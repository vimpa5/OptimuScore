from django.http.response import HttpResponse
from django.shortcuts import render, HttpResponseRedirect
from django.core import serializers
from django.http import JsonResponse
from django.contrib import messages
from openpyxl.styles.alignment import Alignment
from django.core.paginator import Paginator
from .forms import *
from .models import *
from django.db.models import Sum
from decimal import Decimal
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, Color, Border, Side, PatternFill
import datetime
from dateutil.relativedelta import *
from .filters import *

def dhule_dashboard(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            context={}
            cur_user=request.user
            context['cur_user']=cur_user
            opd=Opd.objects.filter(date=datetime.date.today()).count()
            context['opd']=opd
            opd_amt=Opd.objects.filter(date=datetime.date.today()).aggregate(Sum('amount'))
            context['opd_amt']=opd_amt
            patients_all=Patient.objects.all()
            patients=patients_all.count()
            context['patients']=patients
            pt_list=0
            for pt in patients_all:
                ongoing=OngoingReport.objects.filter(ipdreport__patient=pt)
                if ongoing.exists():
                    pt_list+=1
            print(pt_list)
            context['ongoing']=pt_list
            radiation=Radiations.objects.filter(date=datetime.date.today()).count()
            context['radiation']=radiation
            realization=Realization.objects.filter(billing_month=datetime.date.today()).count()
            context['realization']=realization
            realization_amt=Realization.objects.filter(billing_month=datetime.date.today()).aggregate(Sum('amount_received'))
            context['realization_amt']=realization_amt
            discharge=Discharge.objects.filter(date_of_discharge=datetime.date.today()).count()
            context['discharge']=discharge
            updated_discharge=Discharge.objects.filter(date_of_discharge=datetime.date.today(), discharge_updated=True).count()
            context['updated_discharge']=updated_discharge
            unupdated_discharge=Discharge.objects.filter(date_of_discharge=datetime.date.today(), discharge_updated=False).count()
            context['unupdated_discharge']=unupdated_discharge
            return render(request, 'dhule/dashboard.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def operations(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            cur_user=request.user
            return render(request, 'dhule/operations.html', {'cur_user':cur_user})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/operations/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def bill_gateway_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fro=request.POST.get('from_date')
                print('from date: ', fro)
                to=request.POST.get('to_date')
                print('to date: ', to)
                bill_date=request.POST.get('billing_date')
                print('Billing date: ', bill_date)
                request.session['fro']=fro
                request.session['to']=to
                request.session['bill_date']=bill_date
                return HttpResponseRedirect('/dhule/additional_fields/')
            else:
                form=BillGateway()
                cur_user=request.user
                nav_msg='Provisional-Bill Gateway'
                return render(request, 'dhule/bill_gateway.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def additional_fields_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                rt_cash_desc=request.POST.get('change_rt_cash_desc')
                print('change_rt_cash_desc: ', rt_cash_desc)
                rt_cash_oopl_desc=request.POST.get('change_rt_cash_oopl_desc')
                print('change_rt_cash_oopl_desc: ', rt_cash_oopl_desc)
                rt_cash_amt=request.POST.get('change_rt_cash_amount')
                print('change_rt_cash_amount: ', rt_cash_amt)
                rt_cash_oopl_amt=request.POST.get('change_rt_cash_oopl_amount')
                print('change_rt_cash_oopl_amount: ', rt_cash_oopl_amt)
                partial_cash_desc=request.POST.get('change_partial_cash_desc')
                print('change_partial_cash_desc: ', partial_cash_desc)
                partial_cash_oopl_desc=request.POST.get('change_partial_cash_oopl_desc')
                print('change_partial_cash_oopl_desc: ', partial_cash_oopl_desc)
                partial_cash_amt=request.POST.get('change_partial_cash_amount')
                print('change_partial_cash_amount: ', partial_cash_amt)
                partial_cash_oopl_amt=request.POST.get('change_partial_cash_oopl_amount')
                print('change_partial_cash_oopl_amount: ', partial_cash_oopl_amt)
                mjpjay_desc=request.POST.get('change_mjpjay_desc')
                print('change_mjpjay_desc: ', mjpjay_desc)
                mjpjay_oopl_desc=request.POST.get('change_mjpjay_oopl_desc')
                print('change_mjpjay_oopl_desc: ', mjpjay_oopl_desc)
                mjpjay_amt=request.POST.get('change_mjpjay_amount')
                print('change_mjpjay_amount: ', mjpjay_amt)
                mjpjay_oopl_amt=request.POST.get('change_mjpjay_oopl_amount')
                print('change_mjpjay_oopl_amount: ', mjpjay_oopl_amt)
                pmjay_desc=request.POST.get('change_pmjay_desc')
                print('change_pmjay_desc: ', pmjay_desc)
                pmjay_oopl_desc=request.POST.get('change_pmjay_oopl_desc')
                print('change_pmjay_oopl_desc: ', pmjay_oopl_desc)
                pmjay_amt=request.POST.get('change_pmjay_amount')
                print('change_pmjay_amount: ', pmjay_amt)
                pmjay_oopl_amt=request.POST.get('change_pmjay_oopl_amount')
                print('change_pmjay_oopl_amount: ', pmjay_oopl_amt)
                police_file_desc=request.POST.get('change_police_file_desc')
                print('change_police_file_desc: ', police_file_desc)
                police_file_oopl_desc=request.POST.get('change_police_file_oopl_desc')
                print('change_police_file_oopl_desc: ', police_file_oopl_desc)
                police_file_amt=request.POST.get('change_police_file_amount')
                print('change_police_file_amount: ', police_file_amt)
                police_file_oopl_amt=request.POST.get('change_police_file_oopl_amount')
                print('change_police_file_oopl_amount: ', police_file_oopl_amt)
                insurance_desc=request.POST.get('change_insurance_desc')
                print('change_insurance_desc: ', insurance_desc)
                insurance_oopl_desc=request.POST.get('change_insurance_oopl_desc')
                print('change_insurance_oopl_desc: ', insurance_oopl_desc)
                insurance_amt=request.POST.get('change_insurance_amount')
                print('change_insurance_amount: ', insurance_amt)
                insurance_oopl_amt=request.POST.get('change_insurance_oopl_amount')
                print('change_insurance_oopl_amount: ', insurance_oopl_amt)
                other_income_desc=request.POST.get('change_other_income_desc')
                print('change_other_income_desc: ', other_income_desc)
                other_income_oopl_desc=request.POST.get('change_other_income_oopl_desc')
                print('change_other_income_oopl_desc: ', other_income_oopl_desc)
                other_income_amt=request.POST.get('change_other_income_amount')
                print('change_other_income_amount: ', other_income_amt)
                other_income_oopl_amt=request.POST.get('change_other_income_oopl_amount')
                print('change_other_income_oopl_amount: ', other_income_oopl_amt)
                ct_kcc_desc=request.POST.get('change_ct_kcc_desc')
                print('change_ct_kcc_desc: ', ct_kcc_desc)
                ct_kcc_amount=request.POST.get('change_ct_kcc_amount')
                print('change_ct_kcc_amount: ', ct_kcc_amount)
                ct_oopl_desc=request.POST.get('change_ct_oopl_desc')
                print('change_ct_oopl_desc: ', ct_oopl_desc)
                ct_oopl_amount=request.POST.get('change_ct_oopl_amount')
                print('change_ct_oopl_amount: ', ct_oopl_amount)
                mould_oopl_desc=request.POST.get('change_mould_oopl_desc')
                print('change_mould_oopl_desc: ', mould_oopl_desc)
                mould_oopl_amount=request.POST.get('change_mould_oopl_amount')
                print('change_mould_oopl_amount: ', mould_oopl_amount)
                mould_kcc_desc=request.POST.get('change_mould_kcc_desc')
                print('change_mould_kcc_desc: ', mould_kcc_desc)
                mould_kcc_amount=request.POST.get('change_mould_kcc_amount')
                print('change_mould_kcc_amount: ', mould_kcc_amount)
                additional_income_desc=request.POST.get('change_additional_income_desc')
                print('change_additional_income_desc: ', additional_income_desc)
                kcc_share_add_in1=request.POST.get('kcc_share_add_in1')
                print('kcc_share_add_in1: ', kcc_share_add_in1)
                additional_income_oopl_desc=request.POST.get('change_additional_income_oopl_desc')
                print('change_additional_income_oopl_desc: ', additional_income_oopl_desc)
                kcc_share_add_in2=request.POST.get('kcc_share_add_in2')
                print('kcc_share_add_in2: ', kcc_share_add_in2)
                other_expenses_desc=request.POST.get('change_other_expenses_desc')
                print('change_other_expenses_desc: ', other_expenses_desc)
                kcc_share_other_expenses1=request.POST.get('kcc_share_other_expenses1')
                print('kcc_share_other_expenses1: ', kcc_share_other_expenses1)
                other_expenses_oopl_desc=request.POST.get('change_other_expenses_oopl_desc')
                print('change_other_expenses_oopl_desc: ', other_expenses_oopl_desc)
                kcc_share_other_expenses2=request.POST.get('kcc_share_other_expenses2')
                print('kcc_share_other_expenses2: ', kcc_share_other_expenses2)
                request.session['rt_cash_desc']=rt_cash_desc
                request.session['rt_cash_amt']=rt_cash_amt
                request.session['rt_cash_oopl_desc']=rt_cash_oopl_desc
                request.session['rt_cash_oopl_amt']=rt_cash_oopl_amt
                request.session['partial_cash_desc']=partial_cash_desc
                request.session['partial_cash_amt']=partial_cash_amt
                request.session['partial_cash_oopl_desc']=partial_cash_oopl_desc
                request.session['partial_cash_oopl_amt']=partial_cash_oopl_amt
                request.session['mjpjay_desc']=mjpjay_desc
                request.session['mjpjay_amt']=mjpjay_amt
                request.session['mjpjay_oopl_desc']=mjpjay_oopl_desc
                request.session['mjpjay_oopl_amt']=mjpjay_oopl_amt
                request.session['pmjay_desc']=pmjay_desc
                request.session['pmjay_amt']=pmjay_amt
                request.session['pmjay_oopl_desc']=pmjay_oopl_desc
                request.session['pmjay_oopl_amt']=pmjay_oopl_amt
                request.session['police_file_desc']=police_file_desc
                request.session['police_file_amt']=police_file_amt
                request.session['police_file_oopl_desc']=police_file_oopl_desc
                request.session['police_file_oopl_amt']=police_file_oopl_amt
                request.session['insurance_desc']=insurance_desc
                request.session['insurance_amt']=insurance_amt
                request.session['insurance_oopl_desc']=insurance_oopl_desc
                request.session['insurance_oopl_amt']=insurance_oopl_amt
                request.session['other_income_desc']=other_income_desc
                request.session['other_income_amt']=other_income_amt
                request.session['other_income_oopl_desc']=other_income_oopl_desc
                request.session['other_income_oopl_amt']=other_income_oopl_amt
                request.session['ct_kcc_desc']=ct_kcc_desc
                request.session['ct_kcc_amount']=ct_kcc_amount
                request.session['ct_oopl_desc']=ct_oopl_desc
                request.session['ct_oopl_amount']=ct_oopl_amount
                request.session['mould_oopl_desc']=mould_oopl_desc
                request.session['mould_oopl_amount']=mould_oopl_amount
                request.session['mould_kcc_desc']=mould_kcc_desc
                request.session['mould_kcc_amount']=mould_kcc_amount
                request.session['additional_income_desc']=additional_income_desc
                request.session['kcc_share_add_in1']=kcc_share_add_in1
                request.session['additional_income_oopl_desc']=additional_income_oopl_desc
                request.session['kcc_share_add_in2']=kcc_share_add_in2
                request.session['other_expenses_desc']=other_expenses_desc
                request.session['kcc_share_other_expenses1']=kcc_share_other_expenses1
                request.session['other_expenses_oopl_desc']=other_expenses_oopl_desc
                request.session['kcc_share_other_expenses2']=kcc_share_other_expenses2
                return HttpResponseRedirect('/dhule/provisional_bill/')
            else:
                form=AdditionalFields()
                cur_user=request.user
                nav_msg='Optional Fields'
                return render(request, 'dhule/additional_fields.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def provisional_bill_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            try:
                fro=request.session['fro']
                print('from date in provisional bill: ', fro)
                to=request.session['to']
                print('to date in provisional bill: ', to)
                bill_date=request.session['bill_date']
                print('bill_date in provisional bill: ', bill_date)
                rt_cash_desc=request.session['rt_cash_desc']
                print('rt cash desc: ', rt_cash_desc=='')
                rt_cash_oopl_desc=request.session['rt_cash_oopl_desc']
                print('rt_cash_oopl_desc: ', rt_cash_oopl_desc=='')
                rt_cash_amt=request.session['rt_cash_amt']
                print('rt_cash_amt: ', type(rt_cash_amt))
                rt_cash_oopl_amt=request.session['rt_cash_oopl_amt']
                print('rt_cash_oopl_amt: ', type(rt_cash_oopl_amt))
                partial_cash_desc=request.session['partial_cash_desc']
                print('partial_cash_desc: ', partial_cash_desc)
                partial_cash_oopl_desc=request.session['partial_cash_oopl_desc']
                print('partial_cash_oopl_desc: ', partial_cash_oopl_desc)
                partial_cash_amt=request.session['partial_cash_amt']
                print('partial_cash_amt: ', partial_cash_amt)
                partial_cash_oopl_amt=request.session['partial_cash_oopl_amt']
                print('partial_cash_oopl_amt: ', partial_cash_oopl_amt)
                mjpjay_desc=request.session['mjpjay_desc']
                print('mjpjay_desc: ', mjpjay_desc)
                mjpjay_oopl_desc=request.session['mjpjay_oopl_desc']
                print('mjpjay_oopl_desc: ', mjpjay_oopl_desc)
                mjpjay_amt=request.session['mjpjay_amt']
                print('mjpjay_amt: ', mjpjay_amt)
                mjpjay_oopl_amt=request.session['mjpjay_oopl_amt']
                print('mjpjay_oopl_amt: ', mjpjay_oopl_amt)
                pmjay_desc=request.session['pmjay_desc']
                print('pmjay_desc: ', pmjay_desc)
                pmjay_oopl_desc=request.session['pmjay_oopl_desc']
                print('pmjay_oopl_desc: ', pmjay_oopl_desc)
                pmjay_amt=request.session['pmjay_amt']
                print('pmjay_amt: ', pmjay_amt)
                pmjay_oopl_amt=request.session['pmjay_oopl_amt']
                print('pmjay_oopl_amt: ', pmjay_oopl_amt)
                police_file_desc=request.session['police_file_desc']
                print('police_file_desc: ', police_file_desc)
                police_file_oopl_desc=request.session['police_file_oopl_desc']
                print('police_file_oopl_desc: ', police_file_oopl_desc)
                police_file_amt=request.session['police_file_amt']
                print('police_file_amt: ', police_file_amt)
                police_file_oopl_amt=request.session['police_file_oopl_amt']
                print('police_file_oopl_amt: ', police_file_oopl_amt)
                insurance_desc=request.session['insurance_desc']
                print('insurance_desc: ', insurance_desc)
                insurance_oopl_desc=request.session['insurance_oopl_desc']
                print('insurance_oopl_desc: ', insurance_oopl_desc)
                insurance_amt=request.session['insurance_amt']
                print('insurance_amt: ', insurance_amt)
                insurance_oopl_amt=request.session['insurance_oopl_amt']
                print('insurance_oopl_amt: ', insurance_oopl_amt)
                other_income_desc=request.session['other_income_desc']
                print('other_income_desc: ', other_income_desc)
                other_income_oopl_desc=request.session['other_income_oopl_desc']
                print('other_income_oopl_desc: ', other_income_oopl_desc)
                other_income_amt=request.session['other_income_amt']
                print('other_income_amt: ', other_income_amt)
                other_income_oopl_amt=request.session['other_income_oopl_amt']
                print('other_income_oopl_amt: ', other_income_oopl_amt)
                ct_kcc_desc=request.session['ct_kcc_desc']
                print('ct_kcc_desc: ', ct_kcc_desc)
                ct_kcc_amount=request.session['ct_kcc_amount']
                print('ct_kcc_amount: ', ct_kcc_amount)
                ct_oopl_desc=request.session['ct_oopl_desc']
                print('ct_oopl_desc: ', ct_oopl_desc)
                ct_oopl_amount=request.session['ct_oopl_amount']
                print('ct_oopl_amount: ', ct_oopl_amount)
                mould_oopl_desc=request.session['mould_oopl_desc']
                print('mould_oopl_desc: ', mould_oopl_desc)
                mould_oopl_amount=request.session['mould_oopl_amount']
                print('mould_oopl_amount: ', mould_oopl_amount)
                mould_kcc_desc=request.session['mould_kcc_desc']
                print('mould_kcc_desc: ', mould_kcc_desc)
                mould_kcc_amount=request.session['mould_kcc_amount']
                print('mould_kcc_amount: ', mould_kcc_amount)
                additional_income_desc=request.session['additional_income_desc']
                print('additional_income_desc: ', additional_income_desc)
                kcc_share_add_in1=request.session['kcc_share_add_in1']
                print('kcc_share_add_in1: ', kcc_share_add_in1)
                additional_income_oopl_desc=request.session['additional_income_oopl_desc']
                print('additional_income_oopl_desc: ', additional_income_oopl_desc)
                kcc_share_add_in2=request.session['kcc_share_add_in2']
                print('kcc_share_add_in2: ', kcc_share_add_in2)
                other_expenses_desc=request.session['other_expenses_desc']
                print('other_expenses_desc: ', other_expenses_desc)
                kcc_share_other_expenses1=request.session['kcc_share_other_expenses1']
                print('kcc_share_other_expenses1: ', kcc_share_other_expenses1)
                other_expenses_oopl_desc=request.session['other_expenses_oopl_desc']
                print('other_expenses_oopl_desc: ', other_expenses_oopl_desc)
                kcc_share_other_expenses2=request.session['kcc_share_other_expenses2']
                print('kcc_share_other_expenses2: ', kcc_share_other_expenses2)
                year, month, day=to.split('-')
                print('month: ', month)
                print('year: ', year)
                year1, month1, day1=bill_date.split('-')
                print('month1: ', month1)
                print('year1: ', year1)
                year_list=list(year)
                print('year list: ', year_list)
                fro_new=datetime.datetime.strptime(fro, "%Y-%m-%d").date()
                print('fro ka type: ', type(fro_new))
                prev1=fro_new+relativedelta(months=-1)
                print('previous month ', prev1)
                to_new=datetime.datetime.strptime(to, "%Y-%m-%d").date()
                print('to ka type: ', type(to_new))
                prev2=to_new+relativedelta(months=-1)
                print('previous month ', prev2)
                context={}
                cur_user=request.user
                nav_msg='Provisional Bill'
                context['cur_user']=cur_user
                context['nav_msg']=nav_msg
                eles_kcc=[]
                eles_oopl=[]
                kcc_total_exp=[]
                oopl_total_exp=[]
                rt_cash=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro, to))
                rt_cash_oopl=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro, to))
                partial_cash=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro, to))
                partial_cash_oopl=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro, to))
                mjpjay_realized=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
                mjpjay_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
                pmjay_realized=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
                pmjay_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
                police_file_realized=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
                police_file_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
                insurance_realized=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
                insurance_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
                other_income=OtherIncome.objects.filter(date__range=(fro, to), received_by='k')
                other_income_oopl=OtherIncome.objects.filter(date__range=(fro, to), received_by='o')
                additional_income=AdditionalIncome.objects.filter(date__range=(fro, to), received_by='k')
                additional_income_oopl=AdditionalIncome.objects.filter(date__range=(fro, to), received_by='o')
                opd=OpdReport.objects.filter(opd__date__range=(fro, to))
                ct_kcc=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='k')
                ct_oopl=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='o')
                mould_oopl=CommonExpenses.objects.filter(date__range=(fro, to), particulars__icontains='Mould', paid_by='o')
                mould_kcc=CommonExpenses.objects.filter(date__range=(fro, to), particulars__icontains='Mould', paid_by='k')
                com_exp_kcc=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro, to), paid_by='k')
                com_exp_oopl=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro, to), paid_by='o')
                other_expenses=OtherExpenses.objects.filter(date__range=(fro, to), paid_by='k')
                other_expenses_oopl=OtherExpenses.objects.filter(date__range=(fro, to), paid_by='o')
                rt_cash_total=rt_cash.aggregate(Sum('realization__amount_received'))
                rt_cash_oopl_total=rt_cash_oopl.aggregate(Sum('realization__amount_received'))
                partial_cash_total=partial_cash.aggregate(Sum('realization__amount_received'))
                partial_cash_oopl_total=partial_cash_oopl.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_total=mjpjay_realized.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_oopl_total=mjpjay_realized_oopl.aggregate(Sum('realization__amount_received'))
                pmjay_realized_total=pmjay_realized.aggregate(Sum('realization__amount_received'))
                pmjay_realized_oopl_total=pmjay_realized_oopl.aggregate(Sum('realization__amount_received'))
                police_file_realized_total=police_file_realized.aggregate(Sum('realization__amount_received'))
                police_file_realized_oopl_total=police_file_realized_oopl.aggregate(Sum('realization__amount_received'))
                insurance_realized_total=insurance_realized.aggregate(Sum('realization__amount_received'))
                insurance_realized_oopl_total=insurance_realized_oopl.aggregate(Sum('realization__amount_received'))
                other_income_total=other_income.aggregate(Sum('amount'))
                other_income_oopl_total=other_income_oopl.aggregate(Sum('amount'))
                opd_total=opd.aggregate(Sum('opd__amount'))
                ct_kcc_total=ct_kcc.aggregate(Sum('amount'))
                ct_oopl_total=ct_oopl.aggregate(Sum('amount'))
                mould_oopl_total=mould_oopl.aggregate(Sum('amount'))
                mould_kcc_total=mould_kcc.aggregate(Sum('amount'))
                com_exp_kcc_total=com_exp_kcc.aggregate(Sum('amount'))
                com_exp_oopl_total=com_exp_oopl.aggregate(Sum('amount'))
                additional_income_total=additional_income.aggregate(Sum('amount'))
                additional_income_oopl_total=additional_income_oopl.aggregate(Sum('amount'))
                other_expenses_total=other_expenses.aggregate(Sum('amount'))
                other_expenses_oopl_total=other_expenses_oopl.aggregate(Sum('amount'))
                if rt_cash_desc != '': #RT Cash description and amount entry into the bill.
                    context['rt_cash_desc']=rt_cash_desc
                if rt_cash_amt != '':
                    context['total1']=rt_cash_amt
                    eles_kcc.append(int(rt_cash_amt))
                else:
                    context['total1']=rt_cash_total['realization__amount_received__sum']
                    eles_kcc.append(rt_cash_total['realization__amount_received__sum'])
                if rt_cash_oopl_desc != '': #RT Cash OOPL description and amount entry into the bill.
                    context['rt_cash_oopl_desc']=rt_cash_oopl_desc
                if rt_cash_oopl_amt != '':
                    context['total1_oopl']=rt_cash_oopl_amt
                    eles_oopl.append(int(rt_cash_oopl_amt))
                else:
                    context['total1_oopl']=rt_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl.append(rt_cash_oopl_total['realization__amount_received__sum'])
                if partial_cash_desc != '': #Partial Cash description and amount entry into the bill.
                    context['partial_cash_desc']=partial_cash_desc
                if partial_cash_amt != '':
                    context['total2']=partial_cash_amt
                    eles_kcc.append(int(partial_cash_amt))
                else:
                    context['total2']=partial_cash_total['realization__amount_received__sum']
                    eles_kcc.append(partial_cash_total['realization__amount_received__sum'])
                if partial_cash_oopl_desc != '': #Partial Cash OOPL description and amount entry into the bill.
                    context['partial_cash_oopl_desc']=partial_cash_oopl_desc
                if partial_cash_oopl_amt != '':
                    context['total2_oopl']=partial_cash_oopl_amt
                    eles_oopl.append(int(partial_cash_oopl_amt))
                else:
                    context['total2_oopl']=partial_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl.append(partial_cash_oopl_total['realization__amount_received__sum'])
                if mjpjay_desc != '': #MJPJAY description and amount entry into the bill.
                    context['mjpjay_desc']=mjpjay_desc
                if mjpjay_amt != '':
                    context['total3']=mjpjay_amt
                    eles_kcc.append(int(mjpjay_amt))
                else:
                    context['total3']=mjpjay_realized_total['realization__amount_received__sum']
                    eles_kcc.append(mjpjay_realized_total['realization__amount_received__sum'])
                if mjpjay_oopl_desc != '': #MJPJAY OOPL description and amount entry into the bill.
                    context['mjpjay_oopl_desc']=mjpjay_oopl_desc
                if mjpjay_oopl_amt != '':
                    context['total3_oopl']=mjpjay_oopl_amt
                    eles_oopl.append(int(mjpjay_oopl_amt))
                else:
                    context['total3_oopl']=mjpjay_realized_oopl_total['realization__amount_received__sum']
                    eles_oopl.append(mjpjay_realized_oopl_total['realization__amount_received__sum'])
                if pmjay_desc != '': #PMJAY description and amount entry into the bill.
                    context['pmjay_desc']=pmjay_desc
                if pmjay_amt != '':
                    context['total4']=pmjay_amt
                    eles_kcc.append(int(pmjay_amt))
                else:
                    context['total4']=pmjay_realized_total['realization__amount_received__sum']
                    eles_kcc.append(pmjay_realized_total['realization__amount_received__sum'])
                if pmjay_oopl_desc != '': #PMJAY OOPL description and amount entry into the bill.
                    context['pmjay_oopl_desc']=pmjay_oopl_desc
                if pmjay_oopl_amt != '':
                    context['total4_oopl']=pmjay_oopl_amt
                    eles_oopl.append(int(pmjay_oopl_amt))
                else:
                    context['total4_oopl']=pmjay_realized_oopl_total['realization__amount_received__sum']
                    eles_oopl.append(pmjay_realized_oopl_total['realization__amount_received__sum'])
                if police_file_desc != '': #Police File description and amount entry into the bill.
                    context['police_file_desc']=police_file_desc
                if police_file_amt != '':
                    context['total7']=police_file_amt
                    eles_kcc.append(int(police_file_amt))
                else:
                    context['total7']=police_file_realized_total['realization__amount_received__sum']
                    eles_kcc.append(police_file_realized_total['realization__amount_received__sum'])
                if police_file_oopl_desc != '': #Police File OOPL description and amount entry into the bill.
                    context['police_file_oopl_desc']=police_file_oopl_desc
                if police_file_oopl_amt != '':
                    context['total7_oopl']=police_file_oopl_amt
                    eles_oopl.append(int(police_file_oopl_amt))
                else:
                    context['total7_oopl']=police_file_realized_oopl_total['realization__amount_received__sum']
                    eles_oopl.append(police_file_realized_oopl_total['realization__amount_received__sum'])
                if insurance_desc != '': #Insurance description and amount entry into the bill.
                    context['insurance_desc']=insurance_desc
                if insurance_amt != '':
                    context['total8']=insurance_amt
                    eles_kcc.append(int(insurance_amt))
                else:
                    context['total8']=insurance_realized_total['realization__amount_received__sum']
                    eles_kcc.append(insurance_realized_total['realization__amount_received__sum'])
                if insurance_oopl_desc != '': #Insurance OOPL description and amount entry into the bill.
                    context['insurance_oopl_desc']=insurance_oopl_desc
                if insurance_oopl_amt != '':
                    context['total8_oopl']=insurance_oopl_amt
                    eles_oopl.append(int(insurance_oopl_amt))
                else:
                    context['total8_oopl']=insurance_realized_oopl_total['realization__amount_received__sum']
                    eles_oopl.append(insurance_realized_oopl_total['realization__amount_received__sum'])
                if other_income_desc != '': #Other Income description and amount entry into the bill.
                    context['other_income_desc']=other_income_desc
                if other_income_amt != '':
                    context['total13']=other_income_amt
                    eles_kcc.append(int(other_income_amt))
                else:
                    context['total13']=other_income_total['amount__sum']
                    eles_kcc.append(other_income_total['amount__sum'])
                if other_income_oopl_desc != '': #Other Income OOPL description and amount entry into the bill.
                    context['other_income_oopl_desc']=other_income_oopl_desc
                if other_income_oopl_amt != '':
                    context['total13_oopl']=other_income_oopl_amt
                    eles_oopl.append(int(other_income_oopl_amt))
                else:
                    context['total13_oopl']=other_income_oopl_total['amount__sum']
                    eles_oopl.append(other_income_oopl_total['amount__sum'])
                if ct_kcc_desc != '': #CT KCC description and amount entry into the bill.
                    context['ct_kcc_desc']=ct_kcc_desc
                if ct_kcc_amount != '':
                    context['total6']=ct_kcc_amount
                    kcc_total_exp.append(int(ct_kcc_amount))
                else:
                    context['total6']=ct_kcc_total['amount__sum']
                    kcc_total_exp.append(ct_kcc_total['amount__sum'])
                if ct_oopl_desc != '': #CT OOPL description and amount entry into the bill.
                    context['ct_oopl_desc']=ct_oopl_desc
                if ct_oopl_amount != '':
                    context['total11']=ct_oopl_amount
                    oopl_total_exp.append(int(ct_oopl_amount))
                else:
                    context['total11']=ct_oopl_total['amount__sum']
                    oopl_total_exp.append(ct_oopl_total['amount__sum'])
                if mould_oopl_desc != '': #Mould OOPL description and amount entry into the bill.
                    context['mould_oopl_desc']=mould_oopl_desc
                if mould_oopl_amount != '':
                    context['total5']=mould_oopl_amount
                    oopl_total_exp.append(int(mould_oopl_amount))
                else:
                    context['total5']=mould_oopl_total['amount__sum']
                    oopl_total_exp.append(mould_oopl_total['amount__sum'])
                if mould_kcc_desc != '': #Mould KCC description and amount entry into the bill.
                    context['mould_kcc_desc']=mould_kcc_desc
                if mould_kcc_amount != '':
                    context['total12']=mould_kcc_amount
                    kcc_total_exp.append(int(mould_kcc_amount))
                else:
                    context['total12']=mould_kcc_total['amount__sum']
                    kcc_total_exp.append(mould_kcc_total['amount__sum'])
                if com_exp_kcc: #Common Expenses KCC
                    context['com_exp_kcc']=com_exp_kcc
                    kcc_total_exp.append(com_exp_kcc_total['amount__sum'])
                if com_exp_oopl: #Common Expenses OOPL
                    context['com_exp_oopl']=com_exp_oopl
                    oopl_total_exp.append(com_exp_oopl_total['amount__sum'])
                if additional_income_desc != '': #Additional Income KCC description and amount entry into the bill.
                    context['additional_income_desc']=additional_income_desc
                if additional_income_oopl_desc != '': #Additional Income OOPL description and amount entry into the bill.
                    context['additional_income_oopl_desc']=additional_income_oopl_desc
                if kcc_share_add_in1 != '':
                    if additional_income_total['amount__sum']:
                        k_kcc=int(kcc_share_add_in1)
                        context['k_kcc']=k_kcc
                        o_kcc=100-k_kcc
                        context['o_kcc']=o_kcc
                        kcc_add_in_kcc=additional_income_total['amount__sum']*k_kcc/100
                        print('1. kcc_add_in_kcc ka value: ', kcc_add_in_kcc)
                        context['kcc_add_in_kcc']=kcc_add_in_kcc
                        oopl_add_in_kcc=additional_income_total['amount__sum']*o_kcc/100
                        print('1. oopl_add_in_kcc ka value: ', oopl_add_in_kcc)
                        context['oopl_add_in_kcc']=oopl_add_in_kcc
                        context['additional_income_total']=additional_income_total['amount__sum']
                else:
                    if additional_income_total['amount__sum']:
                        kcc_add_in_kcc=additional_income_total['amount__sum']*50/100
                        print('2. kcc_add_in_kcc ka value: ', kcc_add_in_kcc)
                        context['kcc_add_in_kcc']=kcc_add_in_kcc
                        oopl_add_in_kcc=additional_income_total['amount__sum']*50/100
                        print('2. oopl_add_in_kcc ka value: ', oopl_add_in_kcc)
                        context['oopl_add_in_kcc']=oopl_add_in_kcc
                        context['additional_income_total']=additional_income_total['amount__sum']
                if kcc_share_add_in2 != '':
                    if additional_income_oopl_total['amount__sum']:
                        k_oopl=int(kcc_share_add_in2)
                        context['k_oopl']=k_oopl
                        o_oopl=100-k_oopl
                        context['o_oopl']=o_oopl
                        kcc_add_in_oopl=additional_income_oopl_total['amount__sum']*k_oopl/100
                        print('1. kcc_add_in_oopl ka value: ', kcc_add_in_oopl)
                        context['kcc_add_in_oopl']=kcc_add_in_oopl
                        oopl_add_in_oopl=additional_income_oopl_total['amount__sum']*o_oopl/100
                        print('1. oopl_add_in_oopl ka value: ', oopl_add_in_oopl)
                        context['oopl_add_in_oopl']=oopl_add_in_oopl
                        context['additional_income_oopl_total']=additional_income_oopl_total['amount__sum']
                else:
                    if additional_income_oopl_total['amount__sum']:
                        kcc_add_in_oopl=additional_income_oopl_total['amount__sum']*50/100
                        print('2. kcc_add_in_oopl ka value: ', kcc_add_in_oopl)
                        context['kcc_add_in_oopl']=kcc_add_in_oopl
                        oopl_add_in_oopl=additional_income_oopl_total['amount__sum']*50/100
                        print('2. oopl_add_in_oopl ka value: ', oopl_add_in_oopl)
                        context['oopl_add_in_oopl']=oopl_add_in_oopl
                        context['additional_income_oopl_total']=additional_income_oopl_total['amount__sum']
                if other_expenses_desc != '': #Other Expenses KCC description and amount entry into the bill.
                    context['other_expenses_desc']=other_expenses_desc
                if other_expenses_oopl_desc != '': #Other Expenses OOPL description and amount entry into the bill.
                    context['other_expenses_oopl_desc']=other_expenses_oopl_desc
                if kcc_share_other_expenses1 != '':
                    if other_expenses_total['amount__sum']:
                        k_kcc_ot=int(kcc_share_other_expenses1)
                        context['k_kcc_ot']=k_kcc_ot
                        o_kcc_ot=100-k_kcc_ot
                        context['o_kcc_ot']=o_kcc_ot
                        kcc_ot_exp_kcc=other_expenses_total['amount__sum']*k_kcc_ot/100
                        print('1. kcc_ot_exp_kcc ka value: ', kcc_ot_exp_kcc)
                        context['kcc_ot_exp_kcc']=kcc_ot_exp_kcc
                        oopl_ot_exp_kcc=other_expenses_total['amount__sum']*o_kcc_ot/100
                        print('1. oopl_ot_exp_kcc ka value: ', oopl_ot_exp_kcc)
                        context['oopl_ot_exp_kcc']=oopl_ot_exp_kcc
                        context['other_expenses_total']=other_expenses_total['amount__sum']
                else:
                    if other_expenses_total['amount__sum']:
                        kcc_ot_exp_kcc=other_expenses_total['amount__sum']*50/100
                        print('2. kcc_ot_exp_kcc ka value: ', kcc_ot_exp_kcc)
                        context['kcc_ot_exp_kcc']=kcc_ot_exp_kcc
                        oopl_ot_exp_kcc=other_expenses_total['amount__sum']*50/100
                        print('2. oopl_ot_exp_kcc ka value: ', oopl_ot_exp_kcc)
                        context['oopl_ot_exp_kcc']=oopl_ot_exp_kcc
                        context['other_expenses_total']=other_expenses_total['amount__sum']
                if kcc_share_other_expenses2 != '':
                    if other_expenses_oopl_total['amount__sum']:
                        k_oopl_ot=int(kcc_share_other_expenses2)
                        context['k_oopl_ot']=k_oopl_ot
                        o_oopl_ot=100-k_oopl_ot
                        context['o_oopl_ot']=o_oopl_ot
                        kcc_ot_exp_oopl=other_expenses_oopl_total['amount__sum']*k_oopl_ot/100
                        print('1. kcc_ot_exp_oopl ka value: ', kcc_ot_exp_oopl)
                        context['kcc_ot_exp_oopl']=kcc_ot_exp_oopl
                        oopl_ot_exp_oopl=other_expenses_oopl_total['amount__sum']*o_oopl_ot/100
                        print('1. oopl_ot_exp_oopl ka value: ', oopl_ot_exp_oopl)
                        context['oopl_ot_exp_oopl']=oopl_ot_exp_oopl
                        context['other_expenses_oopl_total']=other_expenses_oopl_total['amount__sum']
                else:
                    if other_expenses_oopl_total['amount__sum']:
                        kcc_ot_exp_oopl=other_expenses_oopl_total['amount__sum']*50/100
                        print('2. kcc_ot_exp_oopl ka value: ', kcc_ot_exp_oopl)
                        context['kcc_ot_exp_oopl']=kcc_ot_exp_oopl
                        oopl_ot_exp_oopl=other_expenses_oopl_total['amount__sum']*50/100
                        print('2. oopl_ot_exp_oopl ka value: ', oopl_ot_exp_oopl)
                        context['oopl_ot_exp_oopl']=oopl_ot_exp_oopl
                        context['other_expenses_oopl_total']=other_expenses_oopl_total['amount__sum']
                print()
                print('iska kya hoga', eles_kcc)
                print()
                print('aur iska bhi', eles_oopl)
                print()
                tot1=0
                for ele in eles_kcc:
                    if ele is not None:
                        tot1+=ele
                print('tot1 ka value: ', tot1)
                tot1_oopl=0
                for ele in eles_oopl:
                    if ele is not None:
                        tot1_oopl+=ele
                print('tot1_oopl ka value: ', tot1_oopl)
                tot_comb=tot1+tot1_oopl
                print('tot comb ka value ', tot_comb)
                tot7=0
                for kccexp in kcc_total_exp:
                    if kccexp is not None:
                        tot7+=kccexp
                print('tot7 ka value: ', tot7)
                tot8=0
                for ooplexp in oopl_total_exp:
                    if ooplexp is not None:
                        tot8+=ooplexp
                print('tot8 ka value: ', tot8)
                tot2=tot7+tot8
                print('tot2 ka value: ', tot2)
                tot3=tot_comb-tot2
                print('tot3 ka value: ', tot3)
                if tot3>=2000000:
                    val1=2000000
                else:
                    val1=tot3
                print('val 1 ka value: ', val1)
                if tot3>=4000000:
                    val2=2000000
                else:
                    if tot3>=2000000:
                        val2=tot3-2000000
                    else:
                        val2=0
                print('val 2 ka value: ', val2)
                if tot3>=6000000:
                    val3=2000000
                else:
                    if tot3>=4000000:
                        val3=tot3-4000000
                    else:
                        val3=0
                print('val 3 ka value: ', val3)
                if tot3>=9000000:
                    val4=3000000
                else:
                    if tot3>=6000000:
                        val4=tot3-6000000
                    else:
                        val4=0
                print('val 4 ka value: ', val4)
                if tot3>=9000000:
                    val5=tot3-9000000
                else:
                    val5=0
                print('val 5 ka value: ', val5)
                tot4=val1+val2+val3+val4+val5
                print('tot4  ka value: ', tot4)
                print('tot4 ka type ka value: ', type(tot4))
                val6=Decimal(val1*10/100)
                val7=Decimal(val2*15/100)
                val8=Decimal(val3*20/100)
                val9=Decimal(val4*30/100)
                val10=Decimal(val5*38/100)
                print('val 6, 7, 8, 9, 10 ka value: ', val6, val7, val8, val9, val10)
                print('val6 ka type value:', type(val6))
                tot5=val6+val7+val8+val9+val10
                print('tot5  ka value: ', tot5)
                val11=val1-val6
                val12=val2-val7
                val13=val3-val8
                val14=val4-val9
                val15=val5-val10
                print('val 11, 12, 13, 14, 15 ka value: ', val11, val12, val13, val14, val15)
                tot6=val11+val12+val13+val14+val15
                print('tot6 ka value: ', tot6)
                tot9=tot5+tot7-tot1
                tot10=tot6+tot8-tot1_oopl
                print('tot9 ka value: ', tot9)
                print('tot10 ka value: ', tot10)
                kcc_finals=[]
                oopl_finals=[]
                kcc_tot=0
                oopl_tot=0
                if additional_income_total['amount__sum']:
                    tot11=tot9-oopl_add_in_kcc
                    tot12=tot10+oopl_add_in_kcc
                    print('1st time tot11 ka value: ', tot11)
                    print('1st time tot12 ka value: ', tot12)
                    context['tot11']=tot11
                    context['tot12']=tot12
                    kcc_tot=tot11
                    oopl_tot=tot12
                    kcc_finals.append(tot11)
                    oopl_finals.append(tot12)
                    print('kcc ka pehla total: ', kcc_tot)
                    print('oopl ka pehla total: ', oopl_tot)
                else:
                    tot11=tot9
                    tot12=tot10
                    print('1st time tot11 ka value: ', tot11)
                    print('1st time tot12 ka value: ', tot12)
                    context['tot11']=tot11
                    context['tot12']=tot12
                    kcc_tot=tot11
                    oopl_tot=tot12
                    kcc_finals.append(tot11)
                    oopl_finals.append(tot12)
                    print('kcc ka pehla total: ', kcc_tot)
                    print('oopl ka pehla total: ', oopl_tot)
                if additional_income_oopl_total['amount__sum']:
                    tot13=tot11+kcc_add_in_oopl
                    tot14=tot12-kcc_add_in_oopl
                    print('1st time tot13 ka value: ', tot13)
                    print('1st time tot14 ka value: ', tot14)
                    context['tot13']=tot13
                    context['tot14']=tot14
                    kcc_tot=tot13
                    oopl_tot=tot14
                    kcc_finals.append(tot13)
                    oopl_finals.append(tot14)
                    print('kcc ka doosra total: ', kcc_tot)
                    print('oopl ka doosra total: ', oopl_tot)
                else:
                    tot13=tot11
                    tot14=tot12
                    print('1st time tot13 ka value: ', tot13)
                    print('1st time tot14 ka value: ', tot14)
                    context['tot13']=tot13
                    context['tot14']=tot14
                    kcc_tot=tot13
                    oopl_tot=tot14
                    kcc_finals.append(tot13)
                    oopl_finals.append(tot14)
                    print('kcc ka doosra total: ', kcc_tot)
                    print('oopl ka doosra total: ', oopl_tot)
                if other_expenses_total['amount__sum']:
                    tot15=tot13+oopl_ot_exp_kcc
                    tot16=tot14-oopl_ot_exp_kcc
                    print('1st time tot15 ka value: ', tot15)
                    print('1st time tot16 ka value: ', tot16)
                    context['tot15']=tot15
                    context['tot16']=tot16
                    kcc_tot=tot15
                    oopl_tot=tot16
                    kcc_finals.append(tot15)
                    oopl_finals.append(tot16)
                    print('kcc ka chautha total: ', kcc_tot)
                    print('oopl ka chautha total: ', oopl_tot)
                else:
                    tot15=tot13
                    tot16=tot14
                    print('1st time tot15 ka value: ', tot15)
                    print('1st time tot16 ka value: ', tot16)
                    context['tot15']=tot15
                    context['tot16']=tot16
                    kcc_tot=tot15
                    oopl_tot=tot16
                    kcc_finals.append(tot15)
                    oopl_finals.append(tot16)
                    print('kcc ka chautha total: ', kcc_tot)
                    print('oopl ka chautha total: ', oopl_tot)
                if other_expenses_oopl_total['amount__sum']:
                    tot17=tot15-kcc_ot_exp_oopl
                    tot18=tot16+kcc_ot_exp_oopl
                    print('1st time tot17 ka value: ', tot17)
                    print('1st time tot18 ka value: ', tot18)
                    context['tot17']=tot17
                    context['tot18']=tot18
                    kcc_tot=tot17
                    oopl_tot=tot18
                    kcc_finals.append(tot17)
                    oopl_finals.append(tot18)
                    print('kcc ka saatwaan total: ', kcc_tot)
                    print('oopl ka saatwaan total: ', oopl_tot)
                else:
                    tot17=tot15
                    tot18=tot16
                    print('1st time tot17 ka value: ', tot17)
                    print('1st time tot18 ka value: ', tot18)
                    context['tot17']=tot17
                    context['tot18']=tot18
                    kcc_tot=tot17
                    oopl_tot=tot18
                    kcc_finals.append(tot17)
                    oopl_finals.append(tot18)
                    print('kcc ka saatwaan total: ', kcc_tot)
                    print('oopl ka saatwaan total: ', oopl_tot)
                if opd:
                    tot_opd=opd_total['opd__amount__sum']
                    context['tot_opd']=tot_opd
                else:
                    tot_opd=0
                print('tot_opd ka value: ', tot_opd)
                if tot_opd>0:
                    tot_opd_kcc=tot_opd*20/100
                    tot_opd_oopl=tot_opd-tot_opd_kcc
                    context['tot_opd_kcc']=tot_opd_kcc
                    context['tot_opd_oopl']=tot_opd_oopl
                    tot19=tot17-tot_opd_oopl
                    tot20=tot18+tot_opd_oopl
                    print('1st time tot19 ka value: ', tot19)
                    print('1st time tot20 ka value: ', tot20)
                    context['tot19']=tot19
                    context['tot20']=tot20
                    kcc_tot=tot19
                    oopl_tot=tot20
                    kcc_finals.append(tot19)
                    oopl_finals.append(tot20)
                    print('kcc ka gyaarahwaan total: ', kcc_tot)
                    print('oopl ka gyaarahwaan total: ', oopl_tot)
                    print('kcc finals ka value: ', kcc_finals)
                    print('oopl finals ka value: ', oopl_finals)
                    print('kcc_tot ka value: ', kcc_tot)
                    print('oopl_tot ka value: ', oopl_tot)
                    context['kcc_tot']=kcc_tot
                    context['oopl_tot']=oopl_tot
                    tds=oopl_tot*10/100
                    context['tds']=tds
                    net=oopl_tot-tds
                    context['net']=net
                    final_amount=net-tot1_oopl
                    context['final_amount']=final_amount
                    print('tot_opd kcc ka value: ', tot_opd_kcc)
                    print('tot_opd oopl ka value: ', tot_opd_oopl)
                    print('tds ka value: ', tds)
                    print('net ka value: ', net)
                    print('final_amount ka value: ', final_amount)
                context['year']=year
                context['month']=month
                context['day']=day
                context['year1']=year1
                context['month1']=month1
                context['day1']=day1
                context['year_list']=year_list
                context['val1']=val1
                context['val2']=val2
                context['val3']=val3
                context['val4']=val4
                context['val5']=val5
                context['val6']=val6
                context['val7']=val7
                context['val8']=val8
                context['val9']=val9
                context['val10']=val10
                context['val11']=val11
                context['val12']=val12
                context['val13']=val13
                context['val14']=val14
                context['val15']=val15
                context['tot1']=tot1
                context['tot1_oopl']=tot1_oopl
                context['tot_comb']=tot_comb
                context['tot2']=tot2
                context['tot3']=tot3
                context['tot4']=tot4
                context['tot5']=tot5
                context['tot6']=tot6
                context['tot7']=tot7
                context['tot8']=tot8
                context['tot9']=tot9
                context['tot10']=tot10
                print('context: ', context)
                return render(request, 'dhule/provisional_bill.html', context)
            except KeyError:
                return HttpResponse('Please Go To Bill Gateway First and Select The Billing Period!')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_provisional_bill(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            fro=request.session['fro']
            print('from date in provisional bill: ', fro)
            to=request.session['to']
            print('to date in provisional bill: ', to)
            bill_date=request.session['bill_date']
            print('bill_date in provisional bill: ', bill_date)
            rt_cash_desc=request.session['rt_cash_desc']
            print('rt cash desc: ', rt_cash_desc=='')
            rt_cash_oopl_desc=request.session['rt_cash_oopl_desc']
            print('rt_cash_oopl_desc: ', rt_cash_oopl_desc=='')
            rt_cash_amt=request.session['rt_cash_amt']
            print('rt_cash_amt: ', type(rt_cash_amt))
            rt_cash_oopl_amt=request.session['rt_cash_oopl_amt']
            print('rt_cash_oopl_amt: ', type(rt_cash_oopl_amt))
            partial_cash_desc=request.session['partial_cash_desc']
            print('partial_cash_desc: ', partial_cash_desc)
            partial_cash_oopl_desc=request.session['partial_cash_oopl_desc']
            print('partial_cash_oopl_desc: ', partial_cash_oopl_desc)
            partial_cash_amt=request.session['partial_cash_amt']
            print('partial_cash_amt: ', partial_cash_amt)
            partial_cash_oopl_amt=request.session['partial_cash_oopl_amt']
            print('partial_cash_oopl_amt: ', partial_cash_oopl_amt)
            mjpjay_desc=request.session['mjpjay_desc']
            print('mjpjay_desc: ', mjpjay_desc)
            mjpjay_oopl_desc=request.session['mjpjay_oopl_desc']
            print('mjpjay_oopl_desc: ', mjpjay_oopl_desc)
            mjpjay_amt=request.session['mjpjay_amt']
            print('mjpjay_amt: ', mjpjay_amt)
            mjpjay_oopl_amt=request.session['mjpjay_oopl_amt']
            print('mjpjay_oopl_amt: ', mjpjay_oopl_amt)
            pmjay_desc=request.session['pmjay_desc']
            print('pmjay_desc: ', pmjay_desc)
            pmjay_oopl_desc=request.session['pmjay_oopl_desc']
            print('pmjay_oopl_desc: ', pmjay_oopl_desc)
            pmjay_amt=request.session['pmjay_amt']
            print('pmjay_amt: ', pmjay_amt)
            pmjay_oopl_amt=request.session['pmjay_oopl_amt']
            print('pmjay_oopl_amt: ', pmjay_oopl_amt)
            police_file_desc=request.session['police_file_desc']
            print('police_file_desc: ', police_file_desc)
            police_file_oopl_desc=request.session['police_file_oopl_desc']
            print('police_file_oopl_desc: ', police_file_oopl_desc)
            police_file_amt=request.session['police_file_amt']
            print('police_file_amt: ', police_file_amt)
            police_file_oopl_amt=request.session['police_file_oopl_amt']
            print('police_file_oopl_amt: ', police_file_oopl_amt)
            insurance_desc=request.session['insurance_desc']
            print('insurance_desc: ', insurance_desc)
            insurance_oopl_desc=request.session['insurance_oopl_desc']
            print('insurance_oopl_desc: ', insurance_oopl_desc)
            insurance_amt=request.session['insurance_amt']
            print('insurance_amt: ', insurance_amt)
            insurance_oopl_amt=request.session['insurance_oopl_amt']
            print('insurance_oopl_amt: ', insurance_oopl_amt)
            other_income_desc=request.session['other_income_desc']
            print('other_income_desc: ', other_income_desc)
            other_income_oopl_desc=request.session['other_income_oopl_desc']
            print('other_income_oopl_desc: ', other_income_oopl_desc)
            other_income_amt=request.session['other_income_amt']
            print('other_income_amt: ', other_income_amt)
            other_income_oopl_amt=request.session['other_income_oopl_amt']
            print('other_income_oopl_amt: ', other_income_oopl_amt)
            ct_kcc_desc=request.session['ct_kcc_desc']
            print('ct_kcc_desc: ', ct_kcc_desc)
            ct_kcc_amount=request.session['ct_kcc_amount']
            print('ct_kcc_amount: ', ct_kcc_amount)
            ct_oopl_desc=request.session['ct_oopl_desc']
            print('ct_oopl_desc: ', ct_oopl_desc)
            ct_oopl_amount=request.session['ct_oopl_amount']
            print('ct_oopl_amount: ', ct_oopl_amount)
            mould_oopl_desc=request.session['mould_oopl_desc']
            print('mould_oopl_desc: ', mould_oopl_desc)
            mould_oopl_amount=request.session['mould_oopl_amount']
            print('mould_oopl_amount: ', mould_oopl_amount)
            mould_kcc_desc=request.session['mould_kcc_desc']
            print('mould_kcc_desc: ', mould_kcc_desc)
            mould_kcc_amount=request.session['mould_kcc_amount']
            print('mould_kcc_amount: ', mould_kcc_amount)
            additional_income_desc=request.session['additional_income_desc']
            print('additional_income_desc: ', additional_income_desc)
            kcc_share_add_in1=request.session['kcc_share_add_in1']
            print('kcc_share_add_in1: ', kcc_share_add_in1)
            additional_income_oopl_desc=request.session['additional_income_oopl_desc']
            print('additional_income_oopl_desc: ', additional_income_oopl_desc)
            kcc_share_add_in2=request.session['kcc_share_add_in2']
            print('kcc_share_add_in2: ', kcc_share_add_in2)
            other_expenses_desc=request.session['other_expenses_desc']
            print('other_expenses_desc: ', other_expenses_desc)
            kcc_share_other_expenses1=request.session['kcc_share_other_expenses1']
            print('kcc_share_other_expenses1: ', kcc_share_other_expenses1)
            other_expenses_oopl_desc=request.session['other_expenses_oopl_desc']
            print('other_expenses_oopl_desc: ', other_expenses_oopl_desc)
            kcc_share_other_expenses2=request.session['kcc_share_other_expenses2']
            print('kcc_share_other_expenses2: ', kcc_share_other_expenses2)
            year, month, day=to.split('-')
            print('month: ', month)
            print('year: ', year)
            year_int=int(year)
            year1, month1, day1=bill_date.split('-')
            print('month1: ', month1)
            print('year1: ', year1)
            year_list=list(year)
            sliced_year_list=year_list[2:4]
            print('sliced year list: ', sliced_year_list)
            joined_year=int(''.join(sliced_year_list))
            print('joined year: ', type(joined_year))
            print('year list: ', year_list)
            fro_new=datetime.datetime.strptime(fro, "%Y-%m-%d").date()
            print('fro ka type: ', type(fro_new))
            prev1=fro_new+relativedelta(months=-1)
            print('previous month ', prev1)
            to_new=datetime.datetime.strptime(to, "%Y-%m-%d").date()
            print('to ka type: ', type(to_new))
            prev2=to_new+relativedelta(months=-1)
            print('previous month ', prev2)
            eles_kcc=[]
            eles_oopl=[]
            kcc_total_exp=[]
            oopl_total_exp=[]
            incs=[]
            descs=[]
            center=[]
            exps=[]
            descs1=[]
            center1=[]
            rt_cash=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro, to))
            rt_cash_oopl=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro, to))
            partial_cash=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro, to))
            partial_cash_oopl=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro, to))
            mjpjay_realized=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
            mjpjay_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
            pmjay_realized=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
            pmjay_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
            police_file_realized=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
            police_file_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
            insurance_realized=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro, to))
            insurance_realized_oopl=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro, to))
            other_income=OtherIncome.objects.filter(date__range=(fro, to), received_by='k')
            other_income_oopl=OtherIncome.objects.filter(date__range=(fro, to), received_by='o')
            additional_income=AdditionalIncome.objects.filter(date__range=(fro, to), received_by='k')
            additional_income_oopl=AdditionalIncome.objects.filter(date__range=(fro, to), received_by='o')
            opd=OpdReport.objects.filter(opd__date__range=(fro, to))
            ct_kcc=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='k')
            ct_oopl=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='o')
            mould_oopl=CommonExpenses.objects.filter(date__range=(fro, to), particulars__icontains='Mould', paid_by='o')
            mould_kcc=CommonExpenses.objects.filter(date__range=(fro, to), particulars__icontains='Mould', paid_by='k')
            com_exp_kcc=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro, to), paid_by='k')
            com_exp_oopl=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro, to), paid_by='o')
            other_expenses=OtherExpenses.objects.filter(date__range=(fro, to), paid_by='k')
            other_expenses_oopl=OtherExpenses.objects.filter(date__range=(fro, to), paid_by='o')
            rt_cash_total=rt_cash.aggregate(Sum('realization__amount_received'))
            rt_cash_oopl_total=rt_cash_oopl.aggregate(Sum('realization__amount_received'))
            partial_cash_total=partial_cash.aggregate(Sum('realization__amount_received'))
            partial_cash_oopl_total=partial_cash_oopl.aggregate(Sum('realization__amount_received'))
            mjpjay_realized_total=mjpjay_realized.aggregate(Sum('realization__amount_received'))
            mjpjay_realized_oopl_total=mjpjay_realized_oopl.aggregate(Sum('realization__amount_received'))
            pmjay_realized_total=pmjay_realized.aggregate(Sum('realization__amount_received'))
            pmjay_realized_oopl_total=pmjay_realized_oopl.aggregate(Sum('realization__amount_received'))
            police_file_realized_total=police_file_realized.aggregate(Sum('realization__amount_received'))
            police_file_realized_oopl_total=police_file_realized_oopl.aggregate(Sum('realization__amount_received'))
            insurance_realized_total=insurance_realized.aggregate(Sum('realization__amount_received'))
            insurance_realized_oopl_total=insurance_realized_oopl.aggregate(Sum('realization__amount_received'))
            other_income_total=other_income.aggregate(Sum('amount'))
            other_income_oopl_total=other_income_oopl.aggregate(Sum('amount'))
            opd_total=opd.aggregate(Sum('opd__amount'))
            ct_kcc_total=ct_kcc.aggregate(Sum('amount'))
            ct_oopl_total=ct_oopl.aggregate(Sum('amount'))
            mould_oopl_total=mould_oopl.aggregate(Sum('amount'))
            mould_kcc_total=mould_kcc.aggregate(Sum('amount'))
            com_exp_kcc_total=com_exp_kcc.aggregate(Sum('amount'))
            com_exp_oopl_total=com_exp_oopl.aggregate(Sum('amount'))
            additional_income_total=additional_income.aggregate(Sum('amount'))
            additional_income_oopl_total=additional_income_oopl.aggregate(Sum('amount'))
            other_expenses_total=other_expenses.aggregate(Sum('amount'))
            other_expenses_oopl_total=other_expenses_oopl.aggregate(Sum('amount'))
            if rt_cash_amt != '':
                total1=rt_cash_amt
                eles_kcc.append(int(rt_cash_amt))
                incs.append(total1)
                center.append('KCC')
                if rt_cash_desc != '':
                    descs.append(rt_cash_desc)
                else:
                    descs.append('RT CASH AMOUNT')
            else:
                total1=rt_cash_total['realization__amount_received__sum']
                eles_kcc.append(rt_cash_total['realization__amount_received__sum'])
                if total1 != None:
                    incs.append(total1)
                    center.append('KCC')
                    if rt_cash_desc != '':
                        descs.append(rt_cash_desc)
                    else:
                        descs.append('RT CASH AMOUNT')
            if rt_cash_oopl_amt != '':
                total1_oopl=rt_cash_oopl_amt
                eles_oopl.append(int(rt_cash_oopl_amt))
                incs.append(total1_oopl)
                center.append('OOPL')
                if rt_cash_oopl_desc != '':
                    descs.append(rt_cash_oopl_desc)
                else:
                    descs.append('RT CASH AMOUNT')
            else:
                total1_oopl=rt_cash_oopl_total['realization__amount_received__sum']
                eles_oopl.append(rt_cash_oopl_total['realization__amount_received__sum'])
                if total1_oopl != None:
                    incs.append(total1_oopl)
                    center.append('OOPL')
                    if rt_cash_oopl_desc != '':
                        descs.append(rt_cash_oopl_desc)
                    else:
                        descs.append('RT CASH AMOUNT')
            if partial_cash_amt != '':
                total2=partial_cash_amt
                eles_kcc.append(int(partial_cash_amt))
                incs.append(total2)
                center.append('KCC')
                if partial_cash_desc != '':
                    descs.append(partial_cash_desc)
                else:
                    descs.append('PARTIAL CASH AMOUNT')
            else:
                total2=partial_cash_total['realization__amount_received__sum']
                eles_kcc.append(partial_cash_total['realization__amount_received__sum'])
                if total2 != None:
                    incs.append(total2)
                    center.append('KCC')
                    if partial_cash_desc != '':
                        descs.append(partial_cash_desc)
                    else:
                        descs.append('PARTIAL CASH AMOUNT')
            if partial_cash_oopl_amt != '':
                total2_oopl=partial_cash_oopl_amt
                eles_oopl.append(int(partial_cash_oopl_amt))
                incs.append(total2_oopl)
                center.append('OOPL')
                if partial_cash_oopl_desc != '':
                    descs.append(partial_cash_oopl_desc)
                else:
                    descs.append('PARTIAL CASH AMOUNT')
            else:
                total2_oopl=partial_cash_oopl_total['realization__amount_received__sum']
                eles_oopl.append(partial_cash_oopl_total['realization__amount_received__sum'])
                if total2_oopl != None:
                    incs.append(total2_oopl)
                    center.append('OOPL')
                    if partial_cash_oopl_desc != '':
                        descs.append(partial_cash_oopl_desc)
                    else:
                        descs.append('PARTIAL CASH AMOUNT')
            if mjpjay_amt != '':
                total3=mjpjay_amt
                eles_kcc.append(int(mjpjay_amt))
                incs.append(total3)
                center.append('KCC')
                if mjpjay_desc != '':
                    descs.append(mjpjay_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year))
            else:
                total3=mjpjay_realized_total['realization__amount_received__sum']
                eles_kcc.append(mjpjay_realized_total['realization__amount_received__sum'])
                if total3 != None:
                    incs.append(total3)
                    center.append('KCC')
                    if mjpjay_desc != '':
                        descs.append(mjpjay_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year))
            if mjpjay_oopl_amt != '':
                total3_oopl=mjpjay_oopl_amt
                eles_oopl.append(int(mjpjay_oopl_amt))
                incs.append(total3_oopl)
                center.append('OOPL')
                if mjpjay_oopl_desc != '':
                    descs.append(mjpjay_oopl_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year))
            else:
                total3_oopl=mjpjay_realized_oopl_total['realization__amount_received__sum']
                eles_oopl.append(mjpjay_realized_oopl_total['realization__amount_received__sum'])
                if total3_oopl != None:
                    incs.append(total3_oopl)
                    center.append('OOPL')
                    if mjpjay_oopl_desc != '':
                        descs.append(mjpjay_oopl_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year))
            if pmjay_amt != '':
                total4=pmjay_amt
                eles_kcc.append(int(pmjay_amt))
                incs.append(total4)
                center.append('KCC')
                if pmjay_desc != '':
                    descs.append(pmjay_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year))
            else:
                total4=pmjay_realized_total['realization__amount_received__sum']
                eles_kcc.append(pmjay_realized_total['realization__amount_received__sum'])
                if total4 != None:
                    incs.append(total4)
                    center.append('KCC')
                    if pmjay_desc != '':
                        descs.append(pmjay_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year))
            if pmjay_oopl_amt != '':
                total4_oopl=pmjay_oopl_amt
                eles_oopl.append(int(pmjay_oopl_amt))
                incs.append(total4_oopl)
                center.append('OOPL')
                if pmjay_oopl_desc != '':
                    descs.append(pmjay_oopl_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year))
            else:
                total4_oopl=pmjay_realized_oopl_total['realization__amount_received__sum']
                eles_oopl.append(pmjay_realized_oopl_total['realization__amount_received__sum'])
                if total4_oopl != None:
                    incs.append(total4_oopl)
                    center.append('OOPL')
                    if pmjay_oopl_desc != '':
                        descs.append(pmjay_oopl_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year))
            if police_file_amt != '':
                total7=police_file_amt
                eles_kcc.append(int(police_file_amt))
                incs.append(total7)
                center.append('KCC')
                if police_file_desc != '':
                    descs.append(police_file_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year))
            else:
                total7=police_file_realized_total['realization__amount_received__sum']
                eles_kcc.append(police_file_realized_total['realization__amount_received__sum'])
                if total7 != None:
                    incs.append(total7)
                    center.append('KCC')
                    if police_file_desc != '':
                        descs.append(police_file_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year))
            if police_file_oopl_amt != '':
                total7_oopl=police_file_oopl_amt
                eles_oopl.append(int(police_file_oopl_amt))
                incs.append(total7_oopl)
                center.append('OOPL')
                if police_file_oopl_desc != '':
                    descs.append(police_file_oopl_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year))
            else:
                total7_oopl=police_file_realized_oopl_total['realization__amount_received__sum']
                eles_oopl.append(police_file_realized_oopl_total['realization__amount_received__sum'])
                if total7_oopl != None:
                    incs.append(total7_oopl)
                    center.append('OOPL')
                    if police_file_oopl_desc != '':
                        descs.append(police_file_oopl_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year))
            if insurance_amt != '':
                total8=insurance_amt
                eles_kcc.append(int(insurance_amt))
                incs.append(total8)
                center.append('KCC')
                if insurance_desc != '':
                    descs.append(insurance_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year))
            else:
                total8=insurance_realized_total['realization__amount_received__sum']
                eles_kcc.append(insurance_realized_total['realization__amount_received__sum'])
                if total8 != None:
                    incs.append(total8)
                    center.append('KCC')
                    if insurance_desc != '':
                        descs.append(insurance_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year))
            if insurance_oopl_amt != '':
                total8_oopl=insurance_oopl_amt
                eles_oopl.append(int(insurance_oopl_amt))
                incs.append(total8_oopl)
                center.append('OOPL')
                if insurance_oopl_desc != '':
                    descs.append(insurance_oopl_desc)
                else:
                    if month == '01':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year))
                    elif month == '02':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year))
                    elif month == '03':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year))
                    elif month == '04':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year))
                    elif month == '05':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year))
                    elif month == '06':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year))
                    elif month == '07':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year))
                    elif month == '08':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year))
                    elif month == '09':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year))
                    elif month == '10':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year))
                    elif month == '11':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year))
                    elif month == '12':
                        descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year))
            else:
                total8_oopl=insurance_realized_oopl_total['realization__amount_received__sum']
                eles_oopl.append(insurance_realized_oopl_total['realization__amount_received__sum'])
                if total8_oopl != None:
                    incs.append(total8_oopl)
                    center.append('OOPL')
                    if insurance_oopl_desc != '':
                        descs.append(insurance_oopl_desc)
                    else:
                        if month == '01':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year))
                        elif month == '02':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year))
                        elif month == '03':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year))
                        elif month == '04':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year))
                        elif month == '05':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year))
                        elif month == '06':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year))
                        elif month == '07':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year))
                        elif month == '08':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year))
                        elif month == '09':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year))
                        elif month == '10':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year))
                        elif month == '11':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year))
                        elif month == '12':
                            descs.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year))
            if other_income_amt != '':
                total13=other_income_amt
                eles_kcc.append(int(other_income_amt))
                incs.append(total13)
                center.append('KCC')
                if other_income_desc != '':
                    descs.append(other_income_desc)
                else:
                    descs.append('Other Income')
            else:
                total13=other_income_total['amount__sum']
                eles_kcc.append(other_income_total['amount__sum'])
                if total13 != None:
                    incs.append(total13)
                    center.append('KCC')
                    if other_income_desc != '':
                        descs.append(other_income_desc)
                    else:
                        descs.append('Other Income')
            if other_income_oopl_amt != '':
                total13_oopl=other_income_oopl_amt
                eles_oopl.append(int(other_income_oopl_amt))
                incs.append(total13_oopl)
                center.append('OOPL')
                if other_income_oopl_desc != '':
                    descs.append(other_income_oopl_desc)
                else:
                    descs.append('Other Income')
            else:
                total13_oopl=other_income_oopl_total['amount__sum']
                eles_oopl.append(other_income_oopl_total['amount__sum'])
                if total13_oopl != None:
                    incs.append(total13_oopl)
                    center.append('OOPL')
                    if other_income_oopl_desc != '':
                        descs.append(other_income_oopl_desc)
                    else:
                        descs.append('Other Income')
            if ct_kcc_amount != '':
                total6=ct_kcc_amount
                kcc_total_exp.append(int(ct_kcc_amount))
                exps.append(total6)
                center1.append('KCC')
                if ct_kcc_desc != '':
                    descs1.append(ct_kcc_desc)
                else:
                    descs1.append('CT BILL')
            else:
                total6=ct_kcc_total['amount__sum']
                kcc_total_exp.append(ct_kcc_total['amount__sum'])
                if total6 != None:
                    exps.append(total6)
                    center1.append('KCC')
                    if ct_kcc_desc != '':
                        descs1.append(ct_kcc_desc)
                    else:
                        descs1.append('CT BILL')
            if ct_oopl_amount != '':
                total11=ct_oopl_amount
                oopl_total_exp.append(int(ct_oopl_amount))
                exps.append(total11)
                center1.append('OOPL')
                if ct_oopl_desc != '':
                    descs1.append(ct_oopl_desc)
                else:
                    descs1.append('CT BILL')
            else:
                total11=ct_oopl_total['amount__sum']
                oopl_total_exp.append(ct_oopl_total['amount__sum'])
                if total11 != None:
                    exps.append(total11)
                    center1.append('OOPL')
                    if ct_oopl_desc != '':
                        descs1.append(ct_oopl_desc)
                    else:
                        descs1.append('CT BILL')
            if mould_oopl_amount != '':
                total5=mould_oopl_amount
                oopl_total_exp.append(int(mould_oopl_amount))
                exps.append(total5)
                center1.append('OOPL')
                if mould_oopl_desc != '':
                    descs1.append(mould_oopl_desc)
                else:
                    descs1.append('MOULD BILL')
            else:
                total5=mould_oopl_total['amount__sum']
                oopl_total_exp.append(mould_oopl_total['amount__sum'])
                if total5 != None:
                    exps.append(total5)
                    center1.append('OOPL')
                    if mould_oopl_desc != '':
                        descs1.append(mould_oopl_desc)
                    else:
                        descs1.append('MOULD BILL')
            if mould_kcc_amount != '':
                total12=mould_kcc_amount
                kcc_total_exp.append(int(mould_kcc_amount))
                exps.append(total12)
                center1.append('KCC')
                if mould_kcc_desc != '':
                    descs1.append(mould_kcc_desc)
                else:
                    descs1.append('MOULD BILL')
            else:
                total12=mould_kcc_total['amount__sum']
                kcc_total_exp.append(mould_kcc_total['amount__sum'])
                if total12 != None:
                    exps.append(total12)
                    center1.append('KCC')
                    if mould_kcc_desc != '':
                        descs1.append(mould_kcc_desc)
                    else:
                        descs1.append('MOULD BILL')
            if com_exp_kcc: #Common Expenses KCC
                kcc_total_exp.append(com_exp_kcc_total['amount__sum'])
            if com_exp_oopl: #Common Expenses OOPL
                oopl_total_exp.append(com_exp_oopl_total['amount__sum'])
            if kcc_share_add_in1 != '':
                if additional_income_total['amount__sum']:
                    k_kcc1=int(kcc_share_add_in1)
                    o_kcc1=100-k_kcc1
                    kcc_add_in_kcc1=additional_income_total['amount__sum']*k_kcc1/100
                    print('1. kcc_add_in_kcc1 ka value: ', kcc_add_in_kcc1)
                    oopl_add_in_kcc1=additional_income_total['amount__sum']*o_kcc1/100
                    print('1. oopl_add_in_kcc1 ka value: ', oopl_add_in_kcc1)
            else:
                if additional_income_total['amount__sum']:
                    kcc_add_in_kcc1=additional_income_total['amount__sum']*50/100
                    print('2. kcc_add_in_kcc1 ka value: ', kcc_add_in_kcc1)
                    oopl_add_in_kcc1=additional_income_total['amount__sum']*50/100
                    print('2. oopl_add_in_kcc1 ka value: ', oopl_add_in_kcc1)
            if kcc_share_add_in2 != '':
                if additional_income_oopl_total['amount__sum']:
                    k_oopl1=int(kcc_share_add_in2)
                    o_oopl1=100-k_oopl1
                    kcc_add_in_oopl1=additional_income_oopl_total['amount__sum']*k_oopl1/100
                    print('1. kcc_add_in_oopl1 ka value: ', kcc_add_in_oopl1)
                    oopl_add_in_oopl1=additional_income_oopl_total['amount__sum']*o_oopl1/100
                    print('1. oopl_add_in_oopl1 ka value: ', oopl_add_in_oopl1)
            else:
                if additional_income_oopl_total['amount__sum']:
                    kcc_add_in_oopl1=additional_income_oopl_total['amount__sum']*50/100
                    print('2. kcc_add_in_oopl1 ka value: ', kcc_add_in_oopl1)
                    oopl_add_in_oopl1=additional_income_oopl_total['amount__sum']*50/100
                    print('2. oopl_add_in_oopl1 ka value: ', oopl_add_in_oopl1)
            if kcc_share_other_expenses1 != '':
                if other_expenses_total['amount__sum']:
                    k_kcc_ot1=int(kcc_share_other_expenses1)
                    o_kcc_ot1=100-k_kcc_ot1
                    kcc_ot_exp_kcc1=other_expenses_total['amount__sum']*k_kcc_ot1/100
                    print('1. kcc_ot_exp_kcc1 ka value: ', kcc_ot_exp_kcc1)
                    oopl_ot_exp_kcc1=other_expenses_total['amount__sum']*o_kcc_ot1/100
                    print('1. oopl_ot_exp_kcc1 ka value: ', oopl_ot_exp_kcc1)
            else:
                if other_expenses_total['amount__sum']:
                    kcc_ot_exp_kcc1=other_expenses_total['amount__sum']*50/100
                    print('2. kcc_ot_exp_kcc1 ka value: ', kcc_ot_exp_kcc1)
                    oopl_ot_exp_kcc1=other_expenses_total['amount__sum']*50/100
                    print('2. oopl_ot_exp_kcc1 ka value: ', oopl_ot_exp_kcc1)
            if kcc_share_other_expenses2 != '':
                if other_expenses_oopl_total['amount__sum']:
                    k_oopl_ot1=int(kcc_share_other_expenses2)
                    o_oopl_ot1=100-k_oopl_ot1
                    kcc_ot_exp_oopl1=other_expenses_oopl_total['amount__sum']*k_oopl_ot1/100
                    print('1. kcc_ot_exp_oopl1 ka value: ', kcc_ot_exp_oopl1)
                    oopl_ot_exp_oopl1=other_expenses_oopl_total['amount__sum']*o_oopl_ot1/100
                    print('1. oopl_ot_exp_oopl1 ka value: ', oopl_ot_exp_oopl1)
            else:
                if other_expenses_oopl_total['amount__sum']:
                    kcc_ot_exp_oopl1=other_expenses_oopl_total['amount__sum']*50/100
                    print('2. kcc_ot_exp_oopl1 ka value: ', kcc_ot_exp_oopl1)
                    oopl_ot_exp_oopl1=other_expenses_oopl_total['amount__sum']*50/100
                    print('2. oopl_ot_exp_oopl1 ka value: ', oopl_ot_exp_oopl1)
            print()
            print('iska kya hoga', eles_kcc)
            print()
            print('aur iska bhi', eles_oopl)
            print()
            tot1=0
            for ele in eles_kcc:
                if ele is not None:
                    tot1+=ele
            print('tot1 ka value: ', tot1)
            tot1_oopl=0
            for ele in eles_oopl:
                if ele is not None:
                    tot1_oopl+=ele
            print('tot1_oopl ka value: ', tot1_oopl)
            tot_comb=tot1+tot1_oopl
            print('tot comb ka value ', tot_comb)
            tot7=0
            for kccexp in kcc_total_exp:
                if kccexp is not None:
                    tot7+=kccexp
            print('tot7 ka value: ', tot7)
            tot8=0
            for ooplexp in oopl_total_exp:
                if ooplexp is not None:
                    tot8+=ooplexp
            print('tot8 ka value: ', tot8)
            tot2=tot7+tot8
            print('tot2 ka value: ', tot2)
            tot3=tot_comb-tot2
            print('tot3 ka value: ', tot3)
            if tot3>=2000000:
                val1=2000000
            else:
                val1=tot3
            print('val 1 ka value: ', val1)
            if tot3>=4000000:
                val2=2000000
            else:
                if tot3>=2000000:
                    val2=tot3-2000000
                else:
                    val2=0
            print('val 2 ka value: ', val2)
            if tot3>=6000000:
                val3=2000000
            else:
                if tot3>=4000000:
                    val3=tot3-4000000
                else:
                    val3=0
            print('val 3 ka value: ', val3)
            if tot3>=9000000:
                val4=3000000
            else:
                if tot3>=6000000:
                    val4=tot3-6000000
                else:
                    val4=0
            print('val 4 ka value: ', val4)
            if tot3>=9000000:
                val5=tot3-9000000
            else:
                val5=0
            print('val 5 ka value: ', val5)
            tot4=val1+val2+val3+val4+val5
            print('tot4  ka value: ', tot4)
            print('tot4 ka type ka value: ', type(tot4))
            val6=Decimal(val1*10/100)
            val7=Decimal(val2*15/100)
            val8=Decimal(val3*20/100)
            val9=Decimal(val4*30/100)
            val10=Decimal(val5*38/100)
            print('val 6, 7, 8, 9, 10 ka value: ', val6, val7, val8, val9, val10)
            print('val6 ka type value:', type(val6))
            tot5=val6+val7+val8+val9+val10
            print('tot5  ka value: ', tot5)
            val11=val1-val6
            val12=val2-val7
            val13=val3-val8
            val14=val4-val9
            val15=val5-val10
            print('val 11, 12, 13, 14, 15 ka value: ', val11, val12, val13, val14, val15)
            tot6=val11+val12+val13+val14+val15
            print('tot6 ka value: ', tot6)
            tot9=tot5+tot7-tot1
            tot10=tot6+tot8-tot1_oopl
            print('tot9 ka value: ', tot9)
            print('tot10 ka value: ', tot10)
            kcc_finals=[]
            oopl_finals=[]
            kcc_tot=0
            oopl_tot=0
            if additional_income_total['amount__sum']:
                tot11=tot9-oopl_add_in_kcc1
                tot12=tot10+oopl_add_in_kcc1
                print('1st time tot11 ka value: ', tot11)
                print('1st time tot12 ka value: ', tot12)
                kcc_tot=tot11
                oopl_tot=tot12
                kcc_finals.append(tot11)
                oopl_finals.append(tot12)
                print('kcc ka pehla total: ', kcc_tot)
                print('oopl ka pehla total: ', oopl_tot)
            else:
                tot11=tot9
                tot12=tot10
                print('1st time tot11 ka value: ', tot11)
                print('1st time tot12 ka value: ', tot12)
                kcc_tot=tot11
                oopl_tot=tot12
                kcc_finals.append(tot11)
                oopl_finals.append(tot12)
                print('kcc ka pehla total: ', kcc_tot)
                print('oopl ka pehla total: ', oopl_tot)
            if additional_income_oopl_total['amount__sum']:
                tot13=tot11+kcc_add_in_oopl1
                tot14=tot12-kcc_add_in_oopl1
                print('1st time tot13 ka value: ', tot13)
                print('1st time tot14 ka value: ', tot14)
                kcc_tot=tot13
                oopl_tot=tot14
                kcc_finals.append(tot13)
                oopl_finals.append(tot14)
                print('kcc ka doosra total: ', kcc_tot)
                print('oopl ka doosra total: ', oopl_tot)
            else:
                tot13=tot11
                tot14=tot12
                print('1st time tot13 ka value: ', tot13)
                print('1st time tot14 ka value: ', tot14)
                kcc_tot=tot13
                oopl_tot=tot14
                kcc_finals.append(tot13)
                oopl_finals.append(tot14)
                print('kcc ka doosra total: ', kcc_tot)
                print('oopl ka doosra total: ', oopl_tot)
            if other_expenses_total['amount__sum']:
                tot15=tot13+oopl_ot_exp_kcc1
                tot16=tot14-oopl_ot_exp_kcc1
                print('1st time tot15 ka value: ', tot15)
                print('1st time tot16 ka value: ', tot16)
                kcc_tot=tot15
                oopl_tot=tot16
                kcc_finals.append(tot15)
                oopl_finals.append(tot16)
                print('kcc ka chautha total: ', kcc_tot)
                print('oopl ka chautha total: ', oopl_tot)
            else:
                tot15=tot13
                tot16=tot14
                print('1st time tot15 ka value: ', tot15)
                print('1st time tot16 ka value: ', tot16)
                kcc_tot=tot15
                oopl_tot=tot16
                kcc_finals.append(tot15)
                oopl_finals.append(tot16)
                print('kcc ka chautha total: ', kcc_tot)
                print('oopl ka chautha total: ', oopl_tot)
            if other_expenses_oopl_total['amount__sum']:
                tot17=tot15-kcc_ot_exp_oopl1
                tot18=tot16+kcc_ot_exp_oopl1
                print('1st time tot17 ka value: ', tot17)
                print('1st time tot18 ka value: ', tot18)
                kcc_tot=tot17
                oopl_tot=tot18
                kcc_finals.append(tot17)
                oopl_finals.append(tot18)
                print('kcc ka saatwaan total: ', kcc_tot)
                print('oopl ka saatwaan total: ', oopl_tot)
            else:
                tot17=tot15
                tot18=tot16
                print('1st time tot17 ka value: ', tot17)
                print('1st time tot18 ka value: ', tot18)
                kcc_tot=tot17
                oopl_tot=tot18
                kcc_finals.append(tot17)
                oopl_finals.append(tot18)
                print('kcc ka saatwaan total: ', kcc_tot)
                print('oopl ka saatwaan total: ', oopl_tot)
            if opd:
                tot_opd=opd_total['opd__amount__sum']
            else:
                tot_opd=0
            print('tot_opd ka value: ', tot_opd)
            if tot_opd>0:
                tot_opd_kcc=tot_opd*20/100
                tot_opd_oopl=tot_opd-tot_opd_kcc
                tot19=tot17-tot_opd_oopl
                tot20=tot18+tot_opd_oopl
                print('1st time tot19 ka value: ', tot19)
                print('1st time tot20 ka value: ', tot20)
                kcc_tot=tot19
                oopl_tot=tot20
                kcc_finals.append(tot19)
                oopl_finals.append(tot20)
                print('kcc ka gyaarahwaan total: ', kcc_tot)
                print('oopl ka gyaarahwaan total: ', oopl_tot)
                print('kcc finals ka value: ', kcc_finals)
                print('oopl finals ka value: ', oopl_finals)
                print('kcc_tot ka value: ', kcc_tot)
                print('oopl_tot ka value: ', oopl_tot)
                tds=oopl_tot*10/100
                net=oopl_tot-tds
                final_amount=net-tot1_oopl
                print('tot_opd kcc ka value: ', tot_opd_kcc)
                print('tot_opd oopl ka value: ', tot_opd_oopl)
                print('tds ka value: ', tds)
                print('net ka value: ', net)
                print('final_amount ka value: ', final_amount)
            else:
                tds=0
                net=0
                final_amount=0
            if month=='01':
                file_date="{}{}".format('Jan-', joined_year)
            elif month=='02':
                file_date="{}{}".format('Feb-', joined_year)
            elif month=='03':
                file_date="{}{}".format('Mar-', joined_year)
            elif month=='04':
                file_date="{}{}".format('Apr-', joined_year)
            elif month=='05':
                file_date="{}{}".format('May-', joined_year)
            elif month=='06':
                file_date="{}{}".format('Jun-', joined_year)
            elif month=='07':
                file_date="{}{}".format('Jul-', joined_year)
            elif month=='08':
                file_date="{}{}".format('Aug-', joined_year)
            elif month=='09':
                file_date="{}{}".format('Sept-', joined_year)
            elif month=='10':
                file_date="{}{}".format('Oct-', joined_year)
            elif month=='11':
                file_date="{}{}".format('Nov-', joined_year)
            elif month=='12':
                file_date="{}{}".format('Dec-', joined_year)
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Provisional Bill-Dhule-'+file_date+'-'+str(datetime.datetime.strptime(str(datetime.datetime.now().date()), '%Y-%m-%d').strftime("%d/%m/%Y"))+'.xlsx'
            wb=Workbook()
            ws=wb.active
            ws.title="Provisional Bill"
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            border5=Border(top=top1, bottom=bottom1)
            border6=Border(top=top1, right=right1, bottom=bottom1)
            contenido1=PatternFill(patternType='solid', fgColor='FFFFFF')
            contenido2=PatternFill(patternType='solid', fgColor='DCDCDC')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=True, shrink_to_fit=False, indent=0)
            alignment1=Alignment(horizontal='center', vertical='center')
            alignment2=Alignment(horizontal='right', vertical='center')
            alignment3=Alignment(horizontal='left', vertical='center')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border11=Border(right=right2)
            border12=Border(left=left2)
            border13=Border(bottom=bottom2)
            border17=Border(left=left2, right=right2, bottom=bottom2)
            border18=Border(left=left2, bottom=bottom2)
            border19=Border(right=right2, bottom=bottom2)
            blank_row1=['', '', '', '', '', '']
            ws.append(blank_row1)
            blank_row2=['', '', '', '', '', '']
            ws.append(blank_row2)
            ws.merge_cells('A3:F3')
            top_col= ws['A3']
            if month == '01':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JANUARY, ', year)
            elif month == '02':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF FEBRUARY, ', year)
            elif month == '03':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MARCH, ', year)
            elif month == '04':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF APRIL, ', year)
            elif month == '05':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MAY, ', year)
            elif month == '06':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JUNE, ', year)
            elif month == '07':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JULY, ', year)
            elif month == '08':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF AUGUST, ', year)
            elif month == '09':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF SEPTEMBER, ', year)
            elif month == '10':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF OCTOBER, ', year)
            elif month == '11':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF NOVEMBER, ', year)
            elif month == '12':
                top_col.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF DECEMBER, ', year)
            top_col.font=Font(bold=True)
            top_col.border=border1
            top_col.alignment=alignment1
            ws['B3'].border=border5
            ws['C3'].border=border5
            ws['D3'].border=border5
            ws['E3'].border=border5
            ws['F3'].border=border6
            ws.merge_cells('A4:F4')
            date_col= ws['A4']
            date_col.value="{}{}{}{}{}{}".format('DATE : ', day1, '/', month1, '/', year1)
            date_col.border=border18
            date_col.alignment=alignment2
            ws['B4'].border=border13
            ws['C4'].border=border13
            ws['D4'].border=border13
            ws['E4'].border=border13
            ws['F4'].border=border19
            ws.merge_cells('A5:F5')
            ref_col= ws['A5']
            if month == '01':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int-1, '-', joined_year, '/', 10)
            elif month == '02':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int-1, '-', joined_year, '/', 11)
            elif month == '03':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int-1, '-', joined_year, '/', 12)
            elif month == '04':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '01')
            elif month == '05':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '02')
            elif month == '06':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '03')
            elif month == '07':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '04')
            elif month == '08':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '05')
            elif month == '09':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '06')
            elif month == '10':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '07')
            elif month == '11':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '08')
            elif month == '12':
                ref_col.value="{}{}{}{}{}{}".format('REF : KCC/', year_int, '-', joined_year+1, '/', '09')
            ref_col.border=border18
            ref_col.alignment=alignment2
            ws['B5'].border=border13
            ws['C5'].border=border13
            ws['D5'].border=border13
            ws['E5'].border=border13
            ws['F5'].border=border19
            ws.merge_cells('A6:F6')
            salutation_col1= ws['A6']
            salutation_col1.value='TO,'
            salutation_col1.font=Font(bold=True)
            salutation_col1.border=border12
            salutation_col1.fill=contenido1
            salutation_col1.alignment=alignment3
            ws['B6'].fill=contenido1
            ws['C6'].fill=contenido1
            ws['D6'].fill=contenido1
            ws['E6'].fill=contenido1
            ws['F6'].fill=contenido1
            ws['F6'].border=border11
            ws.merge_cells('A7:F7')
            salutation_col2= ws['A7']
            salutation_col2.value='THE DIRECTOR,'
            salutation_col2.font=Font(bold=True)
            salutation_col2.border=border12
            salutation_col2.fill=contenido1
            salutation_col2.alignment=alignment3
            ws['B7'].fill=contenido1
            ws['C7'].fill=contenido1
            ws['D7'].fill=contenido1
            ws['E7'].fill=contenido1
            ws['F7'].fill=contenido1
            ws['F7'].border=border11
            ws.merge_cells('A8:F8')
            salutation_col3= ws['A8']
            salutation_col3.value='KHANDESH CANCER CENTRE (OHRPL), DHULE.'
            salutation_col3.font=Font(bold=True)
            salutation_col3.border=border12
            salutation_col3.fill=contenido1
            salutation_col3.alignment=alignment3
            ws['B8'].fill=contenido1
            ws['C8'].fill=contenido1
            ws['D8'].fill=contenido1
            ws['E8'].fill=contenido1
            ws['F8'].fill=contenido1
            ws['F8'].border=border11
            ws.merge_cells('A9:F9')
            message_col4= ws['A9']
            message_col4.value='Dear Sir/Madam,'
            message_col4.font=Font(size=8)
            message_col4.border=border12
            message_col4.fill=contenido1
            message_col4.alignment=alignment3
            ws['B9'].fill=contenido1
            ws['C9'].fill=contenido1
            ws['D9'].fill=contenido1
            ws['E9'].fill=contenido1
            ws['F9'].fill=contenido1
            ws['F9'].border=border11
            ws.merge_cells('A10:F10')
            message_col= ws['A10']
            if month == '01':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of January, ', year, '.')
            elif month == '02':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of February, ', year, '.')
            elif month == '03':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of March, ', year, '.')
            elif month == '04':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of April, ', year, '.')
            elif month == '05':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of May, ', year, '.')
            elif month == '06':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of June, ', year, '.')
            elif month == '07':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of July, ', year, '.')
            elif month == '08':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of August, ', year, '.')
            elif month == '09':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of September, ', year, '.')
            elif month == '10':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of October, ', year, '.')
            elif month == '11':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of November, ', year, '.')
            elif month == '12':
                message_col.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of December, ', year, '.')
            message_col.font=Font(size=8)
            message_col.border=border12
            message_col.fill=contenido1
            message_col.alignment=alignment3
            ws['B10'].fill=contenido1
            ws['C10'].fill=contenido1
            ws['D10'].fill=contenido1
            ws['E10'].fill=contenido1
            ws['F10'].fill=contenido1
            ws['F10'].border=border11
            ws.merge_cells('A11:F11')
            message_col1= ws['A11']
            message_col1.value='Please settle the bill before the 10th of this month as agreed. Details of the bill and bank details are as follows.'
            message_col1.font=Font(size=8)
            message_col1.border=border18
            message_col1.fill=contenido1
            message_col1.alignment=alignment3
            ws['B11'].fill=contenido1
            ws['C11'].fill=contenido1
            ws['D11'].fill=contenido1
            ws['E11'].fill=contenido1
            ws['F11'].fill=contenido1
            ws['B11'].border=border13
            ws['C11'].border=border13
            ws['D11'].border=border13
            ws['E11'].border=border13
            ws['F11'].border=border19
            ws.merge_cells('A12:D12')
            head1= ws['A12']
            head1.value='PARTICULARS'
            ws['E12'].value='CASH & BANK WITH'
            ws['F12'].value='AMOUNT'
            head1.font=Font(bold=True)
            head1.border=border18
            head1.fill=contenido2
            head1.alignment=alignment3
            ws['E12'].border=border17
            ws['E12'].fill=contenido2
            ws['E12'].alignment=alignment1
            ws['E12'].font=Font(bold=True)
            ws['F12'].border=border19
            ws['F12'].fill=contenido2
            ws['F12'].alignment=alignment1
            ws['F12'].font=Font(bold=True)
            ws['B12'].border=border13
            ws['B12'].fill=contenido2
            ws['C12'].border=border13
            ws['C12'].fill=contenido2
            ws['D12'].border=border13
            ws['D12'].fill=contenido2
            ws.column_dimensions['A'].width=20
            ws.column_dimensions['B'].width=20
            ws.column_dimensions['C'].width=12
            ws.column_dimensions['E'].width=18
            ws.column_dimensions['F'].width=15
            row=13
            print()
            print('incs ka value: ', incs)
            print()
            print('descs ka value: ', descs)
            print()
            print('center ka value: ', center)
            for income in incs:
                ws.merge_cells('A'+str(row)+':'+'D'+str(row))
                income_item= ws['A'+str(row)]
                x=incs.index(income)
                income_item.value=descs[x]
                ws['E'+str(row)].value=center[x]
                ws['F'+str(row)].value=int(income)
                income_item.font=Font(size=8, bold=True)
                income_item.border=border18
                income_item.alignment=alignment3
                ws['E'+str(row)].border=border17
                ws['E'+str(row)].alignment=alignment1
                ws['E'+str(row)].font=Font(size=8, bold=True)
                ws['F'+str(row)].border=border19
                ws['F'+str(row)].fill=total_figure
                ws['F'+str(row)].alignment=alignment1
                ws['F'+str(row)].font=Font(size=8, bold=True)
                ws['B'+str(row)].border=border13
                ws['C'+str(row)].border=border13
                ws['D'+str(row)].border=border13
                row+=1
            print()
            print('row ka value: ', row)
            ws.merge_cells('A'+str(row)+':'+'D'+str(row))
            total_a= ws['A'+str(row)]
            total_a.value=''
            ws['E'+str(row)].value='TOTAL (A)'
            ws['F'+str(row)].value=tot_comb
            total_a.font=Font(size=10, bold=True)
            total_a.border=border18
            total_a.alignment=alignment3
            ws['E'+str(row)].border=border17
            ws['E'+str(row)].alignment=alignment1
            ws['E'+str(row)].font=Font(size=10, bold=True)
            ws['F'+str(row)].border=border19
            ws['F'+str(row)].alignment=alignment1
            ws['F'+str(row)].font=Font(size=10, bold=True)
            ws['B'+str(row)].border=border13
            ws['C'+str(row)].border=border13
            ws['D'+str(row)].border=border13
            row1=row+1
            ws.merge_cells('A'+str(row1)+':'+'D'+str(row1))
            head2= ws['A'+str(row1)]
            head2.value='COMMON EXPENSES'
            ws['E'+str(row1)].value='PAID BY'
            ws['F'+str(row1)].value=''
            head2.font=Font(bold=True)
            head2.border=border18
            head2.fill=contenido2
            head2.alignment=alignment3
            ws['E'+str(row1)].border=border17
            ws['E'+str(row1)].fill=contenido2
            ws['E'+str(row1)].alignment=alignment1
            ws['E'+str(row1)].font=Font(bold=True)
            ws['F'+str(row1)].border=border19
            ws['F'+str(row1)].fill=contenido2
            ws['F'+str(row1)].alignment=alignment1
            ws['F'+str(row1)].font=Font(bold=True)
            ws['B'+str(row1)].border=border13
            ws['B'+str(row1)].fill=contenido2
            ws['C'+str(row1)].border=border13
            ws['C'+str(row1)].fill=contenido2
            ws['D'+str(row1)].border=border13
            ws['D'+str(row1)].fill=contenido2
            row2=row1+1
            for expense in exps:
                ws.merge_cells('A'+str(row2)+':'+'D'+str(row2))
                expense_item= ws['A'+str(row2)]
                x=exps.index(expense)
                expense_item.value=descs1[x]
                ws['E'+str(row2)].value=center1[x]
                ws['F'+str(row2)].value=int(expense)
                expense_item.font=Font(size=8, bold=True)
                expense_item.border=border18
                expense_item.alignment=alignment3
                ws['E'+str(row2)].border=border17
                ws['E'+str(row2)].alignment=alignment1
                ws['E'+str(row2)].font=Font(size=8, bold=True)
                ws['F'+str(row2)].border=border19
                ws['F'+str(row2)].fill=total_figure
                ws['F'+str(row2)].alignment=alignment1
                ws['F'+str(row2)].font=Font(size=8, bold=True)
                ws['B'+str(row2)].border=border13
                ws['C'+str(row2)].border=border13
                ws['D'+str(row2)].border=border13
                row2+=1
            print()
            print('row2 ka value: ', row2)
            if com_exp_kcc:
                for kcc_exp in com_exp_kcc:
                    ws.merge_cells('A'+str(row2)+':'+'D'+str(row2))
                    expense_item1= ws['A'+str(row2)]
                    expense_item1.value=kcc_exp.particulars
                    ws['E'+str(row2)].value='KCC'
                    ws['F'+str(row2)].value=int(kcc_exp.amount)
                    expense_item1.font=Font(size=8, bold=True)
                    expense_item1.border=border18
                    expense_item1.alignment=alignment3
                    ws['E'+str(row2)].border=border17
                    ws['E'+str(row2)].alignment=alignment1
                    ws['E'+str(row2)].font=Font(size=8, bold=True)
                    ws['F'+str(row2)].border=border19
                    ws['F'+str(row2)].fill=total_figure
                    ws['F'+str(row2)].alignment=alignment1
                    ws['F'+str(row2)].font=Font(size=8, bold=True)
                    ws['B'+str(row2)].border=border13
                    ws['C'+str(row2)].border=border13
                    ws['D'+str(row2)].border=border13
                    row2+=1
            print()
            print('row2 ka value 2: ', row2)
            if com_exp_oopl:
                for oopl_exp in com_exp_oopl:
                    ws.merge_cells('A'+str(row2)+':'+'D'+str(row2))
                    expense_item2= ws['A'+str(row2)]
                    expense_item2.value=oopl_exp.particulars
                    ws['E'+str(row2)].value='OOPL'
                    ws['F'+str(row2)].value=int(oopl_exp.amount)
                    expense_item2.font=Font(size=8, bold=True)
                    expense_item2.border=border18
                    expense_item2.alignment=alignment3
                    ws['E'+str(row2)].border=border17
                    ws['E'+str(row2)].alignment=alignment1
                    ws['E'+str(row2)].font=Font(size=8, bold=True)
                    ws['F'+str(row2)].border=border19
                    ws['F'+str(row2)].fill=total_figure
                    ws['F'+str(row2)].alignment=alignment1
                    ws['F'+str(row2)].font=Font(size=8, bold=True)
                    ws['B'+str(row2)].border=border13
                    ws['C'+str(row2)].border=border13
                    ws['D'+str(row2)].border=border13
                    row2+=1
            print()
            print('row2 ka value 3: ', row2)
            ws.merge_cells('A'+str(row2)+':'+'D'+str(row2))
            total_b= ws['A'+str(row2)]
            total_b.value=''
            ws['E'+str(row2)].value='TOTAL (B)'
            ws['F'+str(row2)].value=tot2
            total_b.font=Font(size=10, bold=True)
            total_b.border=border18
            total_b.alignment=alignment3
            ws['E'+str(row2)].border=border17
            ws['E'+str(row2)].alignment=alignment1
            ws['E'+str(row2)].font=Font(size=10, bold=True)
            ws['F'+str(row2)].border=border19
            ws['F'+str(row2)].alignment=alignment1
            ws['F'+str(row2)].font=Font(size=10, bold=True)
            ws['B'+str(row2)].border=border13
            ws['C'+str(row2)].border=border13
            ws['D'+str(row2)].border=border13
            print()
            print('row2 ka value 4: ', row2)
            row3=row2+1
            ws.merge_cells('A'+str(row3)+':'+'E'+str(row3))
            total_a_b= ws['A'+str(row3)]
            total_a_b.value='TOTAL AMOUNT AFTER COMMON EXPENSES (A-B)'
            ws['F'+str(row3)].value=tot3
            total_a_b.font=Font(bold=True)
            total_a_b.border=border18
            total_a_b.alignment=alignment1
            ws['E'+str(row3)].border=border17
            ws['E'+str(row3)].alignment=alignment1
            ws['E'+str(row3)].font=Font(bold=True)
            ws['F'+str(row3)].border=border19
            ws['F'+str(row3)].alignment=alignment1
            ws['F'+str(row3)].font=Font(bold=True)
            ws['B'+str(row3)].border=border13
            ws['C'+str(row3)].border=border13
            ws['D'+str(row3)].border=border13
            print()
            print('row3 ka value 1: ', row3)
            row4=row3+1
            ws['A'+str(row4)].value=''
            ws['B'+str(row4)].value='SLAB'
            ws.merge_cells('C'+str(row4)+':'+'D'+str(row4))
            head3= ws['C'+str(row4)]
            head3.value='FINAL % (KCC)'
            head3.font=Font(bold=True)
            head3.border=border18
            head3.fill=contenido2
            head3.alignment=alignment1
            ws['E'+str(row4)].value='KCC'
            ws['F'+str(row4)].value='OOPL'
            ws['A'+str(row4)].border=border17
            ws['A'+str(row4)].fill=contenido2
            ws['A'+str(row4)].alignment=alignment1
            ws['A'+str(row4)].font=Font(bold=True)
            ws['B'+str(row4)].border=border13
            ws['B'+str(row4)].fill=contenido2
            ws['B'+str(row4)].alignment=alignment1
            ws['B'+str(row4)].font=Font(bold=True)
            ws['D'+str(row4)].border=border13
            ws['D'+str(row4)].fill=contenido2
            ws['E'+str(row4)].border=border17
            ws['E'+str(row4)].fill=contenido2
            ws['E'+str(row4)].alignment=alignment1
            ws['E'+str(row4)].font=Font(bold=True)
            ws['F'+str(row4)].border=border19
            ws['F'+str(row4)].fill=contenido2
            ws['F'+str(row4)].alignment=alignment1
            ws['F'+str(row4)].font=Font(bold=True)
            print()
            print('row4 ka value 1: ', row4)
            row5=row4+1
            ws['A'+str(row5)].value=val1
            ws['B'+str(row5)].value='Upto 20 Lacs'
            ws.merge_cells('C'+str(row5)+':'+'D'+str(row5))
            dist1= ws['C'+str(row5)]
            dist1.value=10
            dist1.font=Font(size=9, bold=True)
            dist1.border=border18
            dist1.alignment=alignment1
            ws['E'+str(row5)].value=val6
            ws['F'+str(row5)].value=val11
            ws['A'+str(row5)].border=border17
            ws['A'+str(row5)].alignment=alignment1
            ws['A'+str(row5)].font=Font(size=9)
            ws['B'+str(row5)].border=border13
            ws['B'+str(row5)].alignment=alignment1
            ws['B'+str(row5)].font=Font(size=9)
            ws['D'+str(row5)].border=border13
            ws['E'+str(row5)].border=border17
            ws['E'+str(row5)].alignment=alignment1
            ws['E'+str(row5)].font=Font(size=9)
            ws['F'+str(row5)].border=border19
            ws['F'+str(row5)].alignment=alignment1
            ws['F'+str(row5)].font=Font(size=9)
            print()
            print('row5 ka value 1: ', row5)
            row6=row5+1
            ws['A'+str(row6)].value=val2
            ws['B'+str(row6)].value='20 Lacs - 40 Lacs'
            ws.merge_cells('C'+str(row6)+':'+'D'+str(row6))
            dist2= ws['C'+str(row6)]
            dist2.value=15
            dist2.font=Font(size=9, bold=True)
            dist2.border=border18
            dist2.alignment=alignment1
            ws['E'+str(row6)].value=val7
            ws['F'+str(row6)].value=val12
            ws['A'+str(row6)].border=border17
            ws['A'+str(row6)].alignment=alignment1
            ws['A'+str(row6)].font=Font(size=9)
            ws['B'+str(row6)].border=border13
            ws['B'+str(row6)].alignment=alignment1
            ws['B'+str(row6)].font=Font(size=9)
            ws['D'+str(row6)].border=border13
            ws['E'+str(row6)].border=border17
            ws['E'+str(row6)].alignment=alignment1
            ws['E'+str(row6)].font=Font(size=9)
            ws['F'+str(row6)].border=border19
            ws['F'+str(row6)].alignment=alignment1
            ws['F'+str(row6)].font=Font(size=9)
            print()
            print('row6 ka value 1: ', row6)
            row7=row6+1
            ws['A'+str(row7)].value=val3
            ws['B'+str(row7)].value='40 Lacs - 60 Lacs'
            ws.merge_cells('C'+str(row7)+':'+'D'+str(row7))
            dist3= ws['C'+str(row7)]
            dist3.value=20
            dist3.font=Font(size=9, bold=True)
            dist3.border=border18
            dist3.alignment=alignment1
            ws['E'+str(row7)].value=val8
            ws['F'+str(row7)].value=val13
            ws['A'+str(row7)].border=border17
            ws['A'+str(row7)].alignment=alignment1
            ws['A'+str(row7)].font=Font(size=9)
            ws['B'+str(row7)].border=border13
            ws['B'+str(row7)].alignment=alignment1
            ws['B'+str(row7)].font=Font(size=9)
            ws['D'+str(row7)].border=border13
            ws['E'+str(row7)].border=border17
            ws['E'+str(row7)].alignment=alignment1
            ws['E'+str(row7)].font=Font(size=9)
            ws['F'+str(row7)].border=border19
            ws['F'+str(row7)].alignment=alignment1
            ws['F'+str(row7)].font=Font(size=9)
            print()
            print('row7 ka value 1: ', row7)
            row8=row7+1
            ws['A'+str(row8)].value=val4
            ws['B'+str(row8)].value='60 Lacs - 90 Lacs'
            ws.merge_cells('C'+str(row8)+':'+'D'+str(row8))
            dist4= ws['C'+str(row8)]
            dist4.value=30
            dist4.font=Font(size=9, bold=True)
            dist4.border=border18
            dist4.alignment=alignment1
            ws['E'+str(row8)].value=val9
            ws['F'+str(row8)].value=val14
            ws['A'+str(row8)].border=border17
            ws['A'+str(row8)].alignment=alignment1
            ws['A'+str(row8)].font=Font(size=9)
            ws['B'+str(row8)].border=border13
            ws['B'+str(row8)].alignment=alignment1
            ws['B'+str(row8)].font=Font(size=9)
            ws['D'+str(row8)].border=border13
            ws['E'+str(row8)].border=border17
            ws['E'+str(row8)].alignment=alignment1
            ws['E'+str(row8)].font=Font(size=9)
            ws['F'+str(row8)].border=border19
            ws['F'+str(row8)].alignment=alignment1
            ws['F'+str(row8)].font=Font(size=9)
            print()
            print('row8 ka value 1: ', row8)
            row9=row8+1
            ws['A'+str(row9)].value=val5
            ws['B'+str(row9)].value='Above 90 Lacs'
            ws.merge_cells('C'+str(row9)+':'+'D'+str(row9))
            dist5= ws['C'+str(row9)]
            dist5.value=38
            dist5.font=Font(size=9, bold=True)
            dist5.border=border18
            dist5.alignment=alignment1
            ws['E'+str(row9)].value=val10
            ws['F'+str(row9)].value=val15
            ws['A'+str(row9)].border=border17
            ws['A'+str(row9)].alignment=alignment1
            ws['A'+str(row9)].font=Font(size=9)
            ws['B'+str(row9)].border=border13
            ws['B'+str(row9)].alignment=alignment1
            ws['B'+str(row9)].font=Font(size=9)
            ws['D'+str(row9)].border=border13
            ws['E'+str(row9)].border=border17
            ws['E'+str(row9)].alignment=alignment1
            ws['E'+str(row9)].font=Font(size=9)
            ws['F'+str(row9)].border=border19
            ws['F'+str(row9)].alignment=alignment1
            ws['F'+str(row9)].font=Font(size=9)
            print()
            print('row9 ka value 1: ', row9)
            row10=row9+1
            ws['A'+str(row10)].value=tot4
            ws.merge_cells('B'+str(row10)+':'+'D'+str(row10))
            dist_tot= ws['B'+str(row10)]
            dist_tot.value=''
            dist_tot.font=Font(bold=True)
            dist_tot.border=border18
            dist_tot.alignment=alignment1
            ws['E'+str(row10)].value=tot5
            ws['F'+str(row10)].value=tot6
            ws['A'+str(row10)].border=border17
            ws['A'+str(row10)].alignment=alignment1
            ws['A'+str(row10)].font=Font(bold=True)
            ws['D'+str(row10)].border=border13
            ws['C'+str(row10)].border=border13
            ws['E'+str(row10)].border=border17
            ws['E'+str(row10)].alignment=alignment1
            ws['E'+str(row10)].font=Font(bold=True)
            ws['F'+str(row10)].border=border19
            ws['F'+str(row10)].alignment=alignment1
            ws['F'+str(row10)].font=Font(bold=True)
            print()
            print('row10 ka value 1: ', row10)
            row11=row10+1
            ws['A'+str(row11)].value='ADD'
            ws.merge_cells('B'+str(row11)+':'+'D'+str(row11))
            addition_1= ws['B'+str(row11)]
            addition_1.value='COMMON EXPENSES PAID BY KCC AND OOPL RESP.'
            addition_1.font=Font(size=10, bold=True)
            addition_1.border=border18
            addition_1.alignment=alignment1
            ws['E'+str(row11)].value=tot7
            ws['F'+str(row11)].value=tot8
            ws['A'+str(row11)].border=border17
            ws['A'+str(row11)].alignment=alignment1
            ws['A'+str(row11)].font=Font(size=10, bold=True)
            ws['D'+str(row11)].border=border13
            ws['C'+str(row11)].border=border13
            ws['E'+str(row11)].border=border17
            ws['E'+str(row11)].alignment=alignment1
            ws['E'+str(row11)].font=Font(size=10, bold=True)
            ws['F'+str(row11)].border=border19
            ws['F'+str(row11)].alignment=alignment1
            ws['F'+str(row11)].font=Font(size=10, bold=True)
            print()
            print('row11 ka value 1: ', row11)
            row12=row11+1
            ws['A'+str(row12)].value='LESS'
            ws.merge_cells('B'+str(row12)+':'+'D'+str(row12))
            subtraction_1= ws['B'+str(row12)]
            subtraction_1.value='ADVANCE RECEIVED BY KCC AND OOPL RESP.'
            subtraction_1.font=Font(size=10, bold=True)
            subtraction_1.border=border18
            subtraction_1.alignment=alignment1
            ws['E'+str(row12)].value=tot1
            ws['F'+str(row12)].value=tot1_oopl
            ws['A'+str(row12)].border=border17
            ws['A'+str(row12)].alignment=alignment1
            ws['A'+str(row12)].font=Font(size=10, bold=True)
            ws['D'+str(row12)].border=border13
            ws['C'+str(row12)].border=border13
            ws['E'+str(row12)].border=border17
            ws['E'+str(row12)].alignment=alignment1
            ws['E'+str(row12)].font=Font(size=10, bold=True)
            ws['F'+str(row12)].border=border19
            ws['F'+str(row12)].alignment=alignment1
            ws['F'+str(row12)].font=Font(size=10, bold=True)
            print()
            print('row12 ka value 1: ', row12)
            row13=row12+1
            ws['A'+str(row13)].value=''
            ws.merge_cells('B'+str(row13)+':'+'D'+str(row13))
            sannaata_1= ws['B'+str(row13)]
            sannaata_1.value=''
            sannaata_1.font=Font(bold=True)
            sannaata_1.border=border18
            sannaata_1.alignment=alignment1
            ws['E'+str(row13)].value=tot9
            ws['F'+str(row13)].value=tot10
            ws['A'+str(row13)].border=border17
            ws['A'+str(row13)].alignment=alignment1
            ws['A'+str(row13)].font=Font(bold=True)
            ws['D'+str(row13)].border=border13
            ws['C'+str(row13)].border=border13
            ws['E'+str(row13)].border=border17
            ws['E'+str(row13)].alignment=alignment1
            ws['E'+str(row13)].font=Font(bold=True)
            ws['F'+str(row13)].border=border19
            ws['F'+str(row13)].alignment=alignment1
            ws['F'+str(row13)].font=Font(bold=True)
            print()
            print('row13 ka value 1: ', row13)
            row14=row13+1
            if additional_income_total['amount__sum']:
                if additional_income_desc != '':
                    ws['A'+str(row14)].value=additional_income_desc
                else:
                    ws['A'+str(row14)].value='Additional Income (KCC)'
                if kcc_share_add_in1 != '':
                    ws['B'+str(row14)].value="{}{}{}".format('KCC-', k_kcc1, '%')
                else:
                    ws['B'+str(row14)].value='KCC-50%'
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras1= ws['C'+str(row14)]
                if kcc_share_add_in1 != '':
                    extras1.value="{}{}{}".format('OOPL-', o_kcc1, '%')
                else:
                    extras1.value='OOPL-50%'
                extras1.font=Font(size=9, bold=True)
                extras1.border=border18
                extras1.alignment=alignment1
                if oopl_add_in_kcc1:
                    ws['E'+str(row14)].value=oopl_add_in_kcc1
                else:
                    ws['E'+str(row14)].value=0
                if oopl_add_in_kcc1:
                    ws['F'+str(row14)].value=oopl_add_in_kcc1
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 1: ', row14)
                row14+=1
                ws['A'+str(row14)].value=additional_income_total['amount__sum']
                if kcc_add_in_kcc1:
                    ws['B'+str(row14)].value=kcc_add_in_kcc1
                else:
                    ws['B'+str(row14)].value=0
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras2= ws['C'+str(row14)]
                if oopl_add_in_kcc1:
                    extras2.value=oopl_add_in_kcc1
                else:
                    extras2.value=0
                extras2.font=Font(size=9, bold=True)
                extras2.border=border18
                extras2.alignment=alignment1
                if tot11:
                    ws['E'+str(row14)].value=tot11
                else:
                    ws['E'+str(row14)].value=0
                if tot12:
                    ws['F'+str(row14)].value=tot12
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].fill=total_figure
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 2: ', row14)
                row14+=1
            if additional_income_oopl_total['amount__sum']:
                if additional_income_oopl_desc != '':
                    ws['A'+str(row14)].value=additional_income_oopl_desc
                else:
                    ws['A'+str(row14)].value='Additional Income (OOPL)'
                if kcc_share_add_in2 != '':
                    ws['B'+str(row14)].value="{}{}{}".format('KCC-', k_oopl1, '%')
                else:
                    ws['B'+str(row14)].value='KCC-50%'
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras3= ws['C'+str(row14)]
                if kcc_share_add_in2 != '':
                    extras3.value="{}{}{}".format('OOPL-', o_oopl1, '%')
                else:
                    extras3.value='OOPL-50%'
                extras3.font=Font(size=9, bold=True)
                extras3.border=border18
                extras3.alignment=alignment1
                if kcc_add_in_oopl1:
                    ws['E'+str(row14)].value=kcc_add_in_oopl1
                else:
                    ws['E'+str(row14)].value=0
                if kcc_add_in_oopl1:
                    ws['F'+str(row14)].value=kcc_add_in_oopl1
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 3: ', row14)
                row14+=1
                ws['A'+str(row14)].value=additional_income_oopl_total['amount__sum']
                if kcc_add_in_oopl1:
                    ws['B'+str(row14)].value=kcc_add_in_oopl1
                else:
                    ws['B'+str(row14)].value=0
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras4= ws['C'+str(row14)]
                if oopl_add_in_oopl1:
                    extras4.value=oopl_add_in_oopl1
                else:
                    extras4.value=0
                extras4.font=Font(size=9, bold=True)
                extras4.border=border18
                extras4.alignment=alignment1
                if tot13:
                    ws['E'+str(row14)].value=tot13
                elif tot11:
                    ws['E'+str(row14)].value=tot11
                else:
                    ws['E'+str(row14)].value=0
                if tot14:
                    ws['F'+str(row14)].value=tot14
                elif tot12:
                    ws['F'+str(row14)].value=tot12
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].fill=total_figure
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 4: ', row14)
                row14+=1
            if other_expenses_total['amount__sum']:
                if other_expenses_desc != '':
                    ws['A'+str(row14)].value=other_expenses_desc
                else:
                    ws['A'+str(row14)].value='Other Expenses (KCC)'
                if kcc_share_other_expenses1 != '':
                    ws['B'+str(row14)].value="{}{}{}".format('KCC-', k_kcc_ot1, '%')
                else:
                    ws['B'+str(row14)].value='KCC-50%'
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras5= ws['C'+str(row14)]
                if kcc_share_other_expenses1 != '':
                    extras5.value="{}{}{}".format('OOPL-', o_kcc_ot1, '%')
                else:
                    extras5.value='OOPL-50%'
                extras5.font=Font(size=9, bold=True)
                extras5.border=border18
                extras5.alignment=alignment1
                if oopl_ot_exp_kcc1:
                    ws['E'+str(row14)].value=oopl_ot_exp_kcc1
                else:
                    ws['E'+str(row14)].value=0
                if oopl_ot_exp_kcc1:
                    ws['F'+str(row14)].value=oopl_ot_exp_kcc1
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 5: ', row14)
                row14+=1
                ws['A'+str(row14)].value=other_expenses_total['amount__sum']
                if kcc_ot_exp_kcc1:
                    ws['B'+str(row14)].value=kcc_ot_exp_kcc1
                else:
                    ws['B'+str(row14)].value=0
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras6= ws['C'+str(row14)]
                if oopl_ot_exp_kcc1:
                    extras6.value=oopl_ot_exp_kcc1
                else:
                    extras6.value=0
                extras6.font=Font(size=9, bold=True)
                extras6.border=border18
                extras6.alignment=alignment1
                if tot15:
                    ws['E'+str(row14)].value=tot15
                elif tot13:
                    ws['E'+str(row14)].value=tot13
                elif tot11:
                    ws['E'+str(row14)].value=tot11
                else:
                    ws['E'+str(row14)].value=0
                if tot16:
                    ws['F'+str(row14)].value=tot16
                elif tot14:
                    ws['F'+str(row14)].value=tot14
                elif tot12:
                    ws['F'+str(row14)].value=tot12
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].fill=total_figure
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 6: ', row14)
                row14+=1
            if other_expenses_oopl_total['amount__sum']:
                if other_expenses_oopl_desc != '':
                    ws['A'+str(row14)].value=other_expenses_oopl_desc
                else:
                    ws['A'+str(row14)].value='Other Expenses (OOPL)'
                if kcc_share_other_expenses2 != '':
                    ws['B'+str(row14)].value="{}{}{}".format('KCC-', k_oopl_ot1, '%')
                else:
                    ws['B'+str(row14)].value='KCC-50%'
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras7= ws['C'+str(row14)]
                if kcc_share_other_expenses2 != '':
                    extras7.value="{}{}{}".format('OOPL-', o_oopl_ot1, '%')
                else:
                    extras7.value='OOPL-50%'
                extras7.font=Font(size=9, bold=True)
                extras7.border=border18
                extras7.alignment=alignment1
                if kcc_ot_exp_oopl1:
                    ws['E'+str(row14)].value=kcc_ot_exp_oopl1
                else:
                    ws['E'+str(row14)].value=0
                if kcc_ot_exp_oopl1:
                    ws['F'+str(row14)].value=kcc_ot_exp_oopl1
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 7: ', row14)
                row14+=1
                ws['A'+str(row14)].value=other_expenses_oopl_total['amount__sum']
                if kcc_ot_exp_oopl1:
                    ws['B'+str(row14)].value=kcc_ot_exp_oopl1
                else:
                    ws['B'+str(row14)].value=0
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras8= ws['C'+str(row14)]
                if oopl_ot_exp_oopl1:
                    extras8.value=oopl_ot_exp_oopl1
                else:
                    extras8.value=0
                extras8.font=Font(size=9, bold=True)
                extras8.border=border18
                extras8.alignment=alignment1
                if tot17:
                    ws['E'+str(row14)].value=tot17
                elif tot15:
                    ws['E'+str(row14)].value=tot15
                elif tot13:
                    ws['E'+str(row14)].value=tot13
                elif tot11:
                    ws['E'+str(row14)].value=tot11
                else:
                    ws['E'+str(row14)].value=0
                if tot18:
                    ws['F'+str(row14)].value=tot18
                elif tot16:
                    ws['F'+str(row14)].value=tot16
                elif tot14:
                    ws['F'+str(row14)].value=tot14
                elif tot12:
                    ws['F'+str(row14)].value=tot12
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].fill=total_figure
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 8: ', row14)
                row14+=1
            if tot_opd:
                ws['A'+str(row14)].value='OPD WITH KCC'
                ws['B'+str(row14)].value='KCC-20%'
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras9= ws['C'+str(row14)]
                extras9.value='OOPL-80%'
                extras9.font=Font(size=9, bold=True)
                extras9.border=border18
                extras9.alignment=alignment1
                if tot_opd_oopl:
                    ws['E'+str(row14)].value=tot_opd_oopl
                else:
                    ws['E'+str(row14)].value=0
                if tot_opd_oopl:
                    ws['F'+str(row14)].value=tot_opd_oopl
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 9: ', row14)
                row14+=1
                ws['A'+str(row14)].value=tot_opd
                if tot_opd_kcc:
                    ws['B'+str(row14)].value=tot_opd_kcc
                else:
                    ws['B'+str(row14)].value=0
                ws.merge_cells('C'+str(row14)+':'+'D'+str(row14))
                extras10= ws['C'+str(row14)]
                if tot_opd_oopl:
                    extras10.value=tot_opd_oopl
                else:
                    extras10.value=0
                extras10.font=Font(size=9, bold=True)
                extras10.border=border18
                extras10.alignment=alignment1
                if tot19:
                    ws['E'+str(row14)].value=tot19
                elif tot17:
                    ws['E'+str(row14)].value=tot17
                elif tot15:
                    ws['E'+str(row14)].value=tot15
                elif tot13:
                    ws['E'+str(row14)].value=tot13
                elif tot11:
                    ws['E'+str(row14)].value=tot11
                else:
                    ws['E'+str(row14)].value=0
                if tot20:
                    ws['F'+str(row14)].value=tot20
                elif tot18:
                    ws['F'+str(row14)].value=tot18
                elif tot16:
                    ws['F'+str(row14)].value=tot16
                elif tot14:
                    ws['F'+str(row14)].value=tot14
                elif tot12:
                    ws['F'+str(row14)].value=tot12
                else:
                    ws['F'+str(row14)].value=0
                ws['A'+str(row14)].border=border17
                ws['A'+str(row14)].fill=total_figure
                ws['A'+str(row14)].alignment=alignment1
                ws['A'+str(row14)].font=Font(size=9, bold=True)
                ws['B'+str(row14)].border=border13
                ws['B'+str(row14)].alignment=alignment1
                ws['B'+str(row14)].font=Font(size=9, bold=True)
                ws['D'+str(row14)].border=border13
                ws['E'+str(row14)].border=border17
                ws['E'+str(row14)].alignment=alignment1
                ws['E'+str(row14)].font=Font(size=9, bold=True)
                ws['F'+str(row14)].border=border19
                ws['F'+str(row14)].alignment=alignment1
                ws['F'+str(row14)].font=Font(size=9, bold=True)
                print()
                print('row14 ka value 10: ', row14)
                row14+=1
            ws.merge_cells('A'+str(row14)+':'+'E'+str(row14))
            finals1=ws['A'+str(row14)]
            finals1.value='TDS [10%]'
            finals1.font=Font(size=10, bold=True)
            finals1.border=border18
            finals1.alignment=alignment1
            if tds:
                ws['F'+str(row14)].value=tds
            else:
                ws['F'+str(row14)].value=0
            ws['B'+str(row14)].border=border13
            ws['C'+str(row14)].border=border13
            ws['D'+str(row14)].border=border13
            ws['E'+str(row14)].border=border13
            ws['F'+str(row14)].border=border17
            ws['F'+str(row14)].alignment=alignment1
            ws['F'+str(row14)].font=Font(size=10, bold=True)
            print()
            print('row14 ka value 11: ', row14)
            row14+=1
            ws.merge_cells('A'+str(row14)+':'+'E'+str(row14))
            finals2=ws['A'+str(row14)]
            finals2.value='NET PAYABLE AFTER TDS'
            finals2.font=Font(size=10, bold=True)
            finals2.border=border18
            finals2.alignment=alignment1
            if net:
                ws['F'+str(row14)].value=net
            else:
                ws['F'+str(row14)].value=0
            ws['B'+str(row14)].border=border13
            ws['C'+str(row14)].border=border13
            ws['D'+str(row14)].border=border13
            ws['E'+str(row14)].border=border13
            ws['F'+str(row14)].border=border17
            ws['F'+str(row14)].alignment=alignment1
            ws['F'+str(row14)].font=Font(size=10, bold=True)
            print()
            print('row14 ka value 12: ', row14)
            row14+=1
            ws.merge_cells('A'+str(row14)+':'+'E'+str(row14))
            finals3=ws['A'+str(row14)]
            finals3.value='ADVANCE RECEIVED BY OOPL'
            finals3.font=Font(size=10, bold=True)
            finals3.border=border18
            finals3.alignment=alignment1
            if tot1_oopl:
                ws['F'+str(row14)].value=tot1_oopl
            else:
                ws['F'+str(row14)].value=0
            ws['B'+str(row14)].border=border13
            ws['C'+str(row14)].border=border13
            ws['D'+str(row14)].border=border13
            ws['E'+str(row14)].border=border13
            ws['F'+str(row14)].border=border17
            ws['F'+str(row14)].alignment=alignment1
            ws['F'+str(row14)].font=Font(size=10, bold=True)
            print()
            print('row14 ka value 13: ', row14)
            row14+=1
            ws.merge_cells('A'+str(row14)+':'+'E'+str(row14))
            finals4=ws['A'+str(row14)]
            finals4.value='PAYABLE AMOUNT (AFTER TDS AND ADVANCES)'
            finals4.font=Font(bold=True)
            finals4.border=border18
            finals4.fill=contenido2
            finals4.alignment=alignment1
            if final_amount:
                ws['F'+str(row14)].value=round(final_amount)
            else:
                ws['F'+str(row14)].value=0
            ws['B'+str(row14)].border=border13
            ws['B'+str(row14)].fill=contenido2
            ws['C'+str(row14)].border=border13
            ws['C'+str(row14)].fill=contenido2
            ws['D'+str(row14)].border=border13
            ws['D'+str(row14)].fill=contenido2
            ws['E'+str(row14)].border=border13
            ws['E'+str(row14)].fill=contenido2
            ws['F'+str(row14)].border=border17
            ws['F'+str(row14)].fill=contenido2
            ws['F'+str(row14)].alignment=alignment1
            ws['F'+str(row14)].font=Font(bold=True)
            print()
            print('row14 ka value 14: ', row14)
            row14+=1
            ws.merge_cells('A'+str(row14)+':'+'F'+str(row14+1))
            bottom_1=ws['A'+str(row14)]
            bottom_1.value='Company PAN : AACCO3789M, email id. accounts@optimusoncology.com, mobile no. 8999250794, BANK DETAILS:Optimus Oncology Private Limited,HDFC(Suyojit Sankul,Nashik),  A/C NO.:50200021888130, IFSC CODE::HDFC0001246 (5/6/7th Character is zero)'
            bottom_1.border=border12
            bottom_1.alignment=alignment
            bottom_1.font=Font(size=8)
            ws['A'+str(row14+1)].border=border18
            ws['B'+str(row14+1)].border=border13
            ws['C'+str(row14+1)].border=border13
            ws['D'+str(row14+1)].border=border13
            ws['E'+str(row14+1)].border=border13
            ws['F'+str(row14)].border=border11
            ws['F'+str(row14+1)].border=border19
            print()
            print('row14 ka value 15: ', row14)
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')
    
def quarterly_bills_gateway_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                quarter=request.POST.get('choose_quarter')
                print('Quarter: ', quarter)
                fin_year=request.POST.get('choose_financial_year')
                print('Financial Year: ', fin_year)
                bill_date=request.POST.get('billing_date')
                print('Billing date: ', bill_date)
                request.session['quarter']=quarter
                request.session['fin_year']=fin_year
                request.session['bill_date']=bill_date
                return HttpResponseRedirect('/dhule/additional_fields_first_month/')
            else:
                form=QuarterlyBills()
                cur_user=request.user
                nav_msg='Quarterly Bill Gateway'
                return render(request, 'dhule/quarterly_bills_gateway.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def additional_fields_first_month_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                amount_credited_first_month=request.POST.get('change_amount_credited_first_month')
                print('change_amount_credited_first_month: ', amount_credited_first_month)
                rt_cash_desc_first_month=request.POST.get('change_rt_cash_desc_first_month')
                print('change_rt_cash_desc_first_month: ', rt_cash_desc_first_month)
                rt_cash_oopl_desc_first_month=request.POST.get('change_rt_cash_oopl_desc_first_month')
                print('change_rt_cash_oopl_desc_first_month: ', rt_cash_oopl_desc_first_month)
                rt_cash_amount_first_month=request.POST.get('change_rt_cash_amount_first_month')
                print('change_rt_cash_amount_first_month: ', rt_cash_amount_first_month)
                rt_cash_oopl_amount_first_month=request.POST.get('change_rt_cash_oopl_amount_first_month')
                print('change_rt_cash_oopl_amount_first_month: ', rt_cash_oopl_amount_first_month)
                partial_cash_desc_first_month=request.POST.get('change_partial_cash_desc_first_month')
                print('change_partial_cash_desc_first_month: ', partial_cash_desc_first_month)
                partial_cash_oopl_desc_first_month=request.POST.get('change_partial_cash_oopl_desc_first_month')
                print('change_partial_cash_oopl_desc_first_month: ', partial_cash_oopl_desc_first_month)
                partial_cash_amount_first_month=request.POST.get('change_partial_cash_amount_first_month')
                print('change_partial_cash_amount_first_month: ', partial_cash_amount_first_month)
                partial_cash_oopl_amount_first_month=request.POST.get('change_partial_cash_oopl_amount_first_month')
                print('change_partial_cash_oopl_amount_first_month: ', partial_cash_oopl_amount_first_month)
                mjpjay_desc_first_month=request.POST.get('change_mjpjay_desc_first_month')
                print('change_mjpjay_desc_first_month: ', mjpjay_desc_first_month)
                mjpjay_oopl_desc_first_month=request.POST.get('change_mjpjay_oopl_desc_first_month')
                print('change_mjpjay_oopl_desc_first_month: ', mjpjay_oopl_desc_first_month)
                mjpjay_amount_first_month=request.POST.get('change_mjpjay_amount_first_month')
                print('change_mjpjay_amount_first_month: ', mjpjay_amount_first_month)
                mjpjay_oopl_amount_first_month=request.POST.get('change_mjpjay_oopl_amount_first_month')
                print('change_mjpjay_oopl_amount_first_month: ', mjpjay_oopl_amount_first_month)
                pmjay_desc_first_month=request.POST.get('change_pmjay_desc_first_month')
                print('change_pmjay_desc_first_month: ', pmjay_desc_first_month)
                pmjay_oopl_desc_first_month=request.POST.get('change_pmjay_oopl_desc_first_month')
                print('change_pmjay_oopl_desc_first_month: ', pmjay_oopl_desc_first_month)
                pmjay_amount_first_month=request.POST.get('change_pmjay_amount_first_month')
                print('change_pmjay_amount_first_month: ', pmjay_amount_first_month)
                pmjay_oopl_amount_first_month=request.POST.get('change_pmjay_oopl_amount_first_month')
                print('change_pmjay_oopl_amount_first_month: ', pmjay_oopl_amount_first_month)
                police_file_desc_first_month=request.POST.get('change_police_file_desc_first_month')
                print('change_police_file_desc_first_month: ', police_file_desc_first_month)
                police_file_oopl_desc_first_month=request.POST.get('change_police_file_oopl_desc_first_month')
                print('change_police_file_oopl_desc_first_month: ', police_file_oopl_desc_first_month)
                police_file_amount_first_month=request.POST.get('change_police_file_amount_first_month')
                print('change_police_file_amount_first_month: ', police_file_amount_first_month)
                police_file_oopl_amount_first_month=request.POST.get('change_police_file_oopl_amount_first_month')
                print('change_police_file_oopl_amount_first_month: ', police_file_oopl_amount_first_month)
                insurance_desc_first_month=request.POST.get('change_insurance_desc_first_month')
                print('change_insurance_desc_first_month: ', insurance_desc_first_month)
                insurance_oopl_desc_first_month=request.POST.get('change_insurance_oopl_desc_first_month')
                print('change_insurance_oopl_desc_first_month: ', insurance_oopl_desc_first_month)
                insurance_amount_first_month=request.POST.get('change_insurance_amount_first_month')
                print('change_insurance_amount_first_month: ', insurance_amount_first_month)
                insurance_oopl_amount_first_month=request.POST.get('change_insurance_oopl_amount_first_month')
                print('change_insurance_oopl_amount_first_month: ', insurance_oopl_amount_first_month)
                other_income_desc_first_month=request.POST.get('change_other_income_desc_first_month')
                print('change_other_income_desc_first_month: ', other_income_desc_first_month)
                other_income_oopl_desc_first_month=request.POST.get('change_other_income_oopl_desc_first_month')
                print('change_other_income_oopl_desc_first_month: ', other_income_oopl_desc_first_month)
                other_income_amount_first_month=request.POST.get('change_other_income_amount_first_month')
                print('change_other_income_amount_first_month: ', other_income_amount_first_month)
                other_income_oopl_amount_first_month=request.POST.get('change_other_income_oopl_amount_first_month')
                print('change_other_income_oopl_amount_first_month: ', other_income_oopl_amount_first_month)
                ct_kcc_desc_first_month=request.POST.get('change_ct_kcc_desc_first_month')
                print('change_ct_kcc_desc_first_month: ', ct_kcc_desc_first_month)
                ct_kcc_amount_first_month=request.POST.get('change_ct_kcc_amount_first_month')
                print('change_ct_kcc_amount_first_month: ', ct_kcc_amount_first_month)
                ct_oopl_desc_first_month=request.POST.get('change_ct_oopl_desc_first_month')
                print('change_ct_oopl_desc_first_month: ', ct_oopl_desc_first_month)
                ct_oopl_amount_first_month=request.POST.get('change_ct_oopl_amount_first_month')
                print('change_ct_oopl_amount_first_month: ', ct_oopl_amount_first_month)
                mould_oopl_desc_first_month=request.POST.get('change_mould_oopl_desc_first_month')
                print('change_mould_oopl_desc_first_month: ', mould_oopl_desc_first_month)
                mould_oopl_amount_first_month=request.POST.get('change_mould_oopl_amount_first_month')
                print('change_mould_oopl_amount_first_month: ', mould_oopl_amount_first_month)
                mould_kcc_desc_first_month=request.POST.get('change_mould_kcc_desc_first_month')
                print('change_mould_kcc_desc_first_month: ', mould_kcc_desc_first_month)
                mould_kcc_amount_first_month=request.POST.get('change_mould_kcc_amount_first_month')
                print('change_mould_kcc_amount_first_month: ', mould_kcc_amount_first_month)
                additional_income_desc_first_month=request.POST.get('change_additional_income_desc_first_month')
                print('change_additional_income_desc_first_month: ', additional_income_desc_first_month)
                kcc_share_add_in1_first_month=request.POST.get('kcc_share_add_in1_first_month')
                print('kcc_share_add_in1_first_month: ', kcc_share_add_in1_first_month)
                additional_income_oopl_desc_first_month=request.POST.get('change_additional_income_oopl_desc_first_month')
                print('change_additional_income_oopl_desc_first_month: ', additional_income_oopl_desc_first_month)
                kcc_share_add_in2_first_month=request.POST.get('kcc_share_add_in2_first_month')
                print('kcc_share_add_in2_first_month: ', kcc_share_add_in2_first_month)
                other_expenses_desc_first_month=request.POST.get('change_other_expenses_desc_first_month')
                print('change_other_expenses_desc_first_month: ', other_expenses_desc_first_month)
                kcc_share_other_expenses1_first_month=request.POST.get('kcc_share_other_expenses1_first_month')
                print('kcc_share_other_expenses1_first_month: ', kcc_share_other_expenses1_first_month)
                other_expenses_oopl_desc_first_month=request.POST.get('change_other_expenses_oopl_desc_first_month')
                print('change_other_expenses_oopl_desc_first_month: ', other_expenses_oopl_desc_first_month)
                kcc_share_other_expenses2_first_month=request.POST.get('kcc_share_other_expenses2_first_month')
                print('kcc_share_other_expenses2_first_month: ', kcc_share_other_expenses2_first_month)
                request.session['amount_credited_first_month']=amount_credited_first_month
                request.session['rt_cash_desc_first_month']=rt_cash_desc_first_month
                request.session['rt_cash_amount_first_month']=rt_cash_amount_first_month
                request.session['rt_cash_oopl_desc_first_month']=rt_cash_oopl_desc_first_month
                request.session['rt_cash_oopl_amount_first_month']=rt_cash_oopl_amount_first_month
                request.session['partial_cash_desc_first_month']=partial_cash_desc_first_month
                request.session['partial_cash_amount_first_month']=partial_cash_amount_first_month
                request.session['partial_cash_oopl_desc_first_month']=partial_cash_oopl_desc_first_month
                request.session['partial_cash_oopl_amount_first_month']=partial_cash_oopl_amount_first_month
                request.session['mjpjay_desc_first_month']=mjpjay_desc_first_month
                request.session['mjpjay_amount_first_month']=mjpjay_amount_first_month
                request.session['mjpjay_oopl_desc_first_month']=mjpjay_oopl_desc_first_month
                request.session['mjpjay_oopl_amount_first_month']=mjpjay_oopl_amount_first_month
                request.session['pmjay_desc_first_month']=pmjay_desc_first_month
                request.session['pmjay_amount_first_month']=pmjay_amount_first_month
                request.session['pmjay_oopl_desc_first_month']=pmjay_oopl_desc_first_month
                request.session['pmjay_oopl_amount_first_month']=pmjay_oopl_amount_first_month
                request.session['police_file_desc_first_month']=police_file_desc_first_month
                request.session['police_file_amount_first_month']=police_file_amount_first_month
                request.session['police_file_oopl_desc_first_month']=police_file_oopl_desc_first_month
                request.session['police_file_oopl_amount_first_month']=police_file_oopl_amount_first_month
                request.session['insurance_desc_first_month']=insurance_desc_first_month
                request.session['insurance_amount_first_month']=insurance_amount_first_month
                request.session['insurance_oopl_desc_first_month']=insurance_oopl_desc_first_month
                request.session['insurance_oopl_amount_first_month']=insurance_oopl_amount_first_month
                request.session['other_income_desc_first_month']=other_income_desc_first_month
                request.session['other_income_amount_first_month']=other_income_amount_first_month
                request.session['other_income_oopl_desc_first_month']=other_income_oopl_desc_first_month
                request.session['other_income_oopl_amount_first_month']=other_income_oopl_amount_first_month
                request.session['ct_kcc_desc_first_month']=ct_kcc_desc_first_month
                request.session['ct_kcc_amount_first_month']=ct_kcc_amount_first_month
                request.session['ct_oopl_desc_first_month']=ct_oopl_desc_first_month
                request.session['ct_oopl_amount_first_month']=ct_oopl_amount_first_month
                request.session['mould_oopl_desc_first_month']=mould_oopl_desc_first_month
                request.session['mould_oopl_amount_first_month']=mould_oopl_amount_first_month
                request.session['mould_kcc_desc_first_month']=mould_kcc_desc_first_month
                request.session['mould_kcc_amount_first_month']=mould_kcc_amount_first_month
                request.session['additional_income_desc_first_month']=additional_income_desc_first_month
                request.session['kcc_share_add_in1_first_month']=kcc_share_add_in1_first_month
                request.session['additional_income_oopl_desc_first_month']=additional_income_oopl_desc_first_month
                request.session['kcc_share_add_in2_first_month']=kcc_share_add_in2_first_month
                request.session['other_expenses_desc_first_month']=other_expenses_desc_first_month
                request.session['kcc_share_other_expenses1_first_month']=kcc_share_other_expenses1_first_month
                request.session['other_expenses_oopl_desc_first_month']=other_expenses_oopl_desc_first_month
                request.session['kcc_share_other_expenses2_first_month']=kcc_share_other_expenses2_first_month
                return HttpResponseRedirect('/dhule/additional_fields_second_month/')
            else:
                form=AdditionalFieldsFirstMonth()
                cur_user=request.user
                nav_msg='Optional Fields - 1st Month'
                return render(request, 'dhule/additional_fields_first_month.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def additional_fields_second_month_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                amount_credited_second_month=request.POST.get('change_amount_credited_second_month')
                print('change_amount_credited_second_month: ', amount_credited_second_month)
                rt_cash_desc_second_month=request.POST.get('change_rt_cash_desc_second_month')
                print('change_rt_cash_desc_second_month: ', rt_cash_desc_second_month)
                rt_cash_oopl_desc_second_month=request.POST.get('change_rt_cash_oopl_desc_second_month')
                print('change_rt_cash_oopl_desc_second_month: ', rt_cash_oopl_desc_second_month)
                rt_cash_amount_second_month=request.POST.get('change_rt_cash_amount_second_month')
                print('change_rt_cash_amount_second_month: ', rt_cash_amount_second_month)
                rt_cash_oopl_amount_second_month=request.POST.get('change_rt_cash_oopl_amount_second_month')
                print('change_rt_cash_oopl_amount_second_month: ', rt_cash_oopl_amount_second_month)
                partial_cash_desc_second_month=request.POST.get('change_partial_cash_desc_second_month')
                print('change_partial_cash_desc_second_month: ', partial_cash_desc_second_month)
                partial_cash_oopl_desc_second_month=request.POST.get('change_partial_cash_oopl_desc_second_month')
                print('change_partial_cash_oopl_desc_first_month: ', partial_cash_oopl_desc_second_month)
                partial_cash_amount_second_month=request.POST.get('change_partial_cash_amount_second_month')
                print('change_partial_cash_amount_second_month: ', partial_cash_amount_second_month)
                partial_cash_oopl_amount_second_month=request.POST.get('change_partial_cash_oopl_amount_second_month')
                print('change_partial_cash_oopl_amount_second_month: ', partial_cash_oopl_amount_second_month)
                mjpjay_desc_second_month=request.POST.get('change_mjpjay_desc_second_month')
                print('change_mjpjay_desc_second_month: ', mjpjay_desc_second_month)
                mjpjay_oopl_desc_second_month=request.POST.get('change_mjpjay_oopl_desc_second_month')
                print('change_mjpjay_oopl_desc_second_month: ', mjpjay_oopl_desc_second_month)
                mjpjay_amount_second_month=request.POST.get('change_mjpjay_amount_second_month')
                print('change_mjpjay_amount_second_month: ', mjpjay_amount_second_month)
                mjpjay_oopl_amount_second_month=request.POST.get('change_mjpjay_oopl_amount_second_month')
                print('change_mjpjay_oopl_amount_second_month: ', mjpjay_oopl_amount_second_month)
                pmjay_desc_second_month=request.POST.get('change_pmjay_desc_second_month')
                print('change_pmjay_desc_second_month: ', pmjay_desc_second_month)
                pmjay_oopl_desc_second_month=request.POST.get('change_pmjay_oopl_desc_second_month')
                print('change_pmjay_oopl_desc_second_month: ', pmjay_oopl_desc_second_month)
                pmjay_amount_second_month=request.POST.get('change_pmjay_amount_second_month')
                print('change_pmjay_amount_second_month: ', pmjay_amount_second_month)
                pmjay_oopl_amount_second_month=request.POST.get('change_pmjay_oopl_amount_second_month')
                print('change_pmjay_oopl_amount_second_month: ', pmjay_oopl_amount_second_month)
                police_file_desc_second_month=request.POST.get('change_police_file_desc_second_month')
                print('change_police_file_desc_second_month: ', police_file_desc_second_month)
                police_file_oopl_desc_second_month=request.POST.get('change_police_file_oopl_desc_second_month')
                print('change_police_file_oopl_desc_second_month: ', police_file_oopl_desc_second_month)
                police_file_amount_second_month=request.POST.get('change_police_file_amount_second_month')
                print('change_police_file_amount_second_month: ', police_file_amount_second_month)
                police_file_oopl_amount_second_month=request.POST.get('change_police_file_oopl_amount_second_month')
                print('change_police_file_oopl_amount_second_month: ', police_file_oopl_amount_second_month)
                insurance_desc_second_month=request.POST.get('change_insurance_desc_second_month')
                print('change_insurance_desc_second_month: ', insurance_desc_second_month)
                insurance_oopl_desc_second_month=request.POST.get('change_insurance_oopl_desc_second_month')
                print('change_insurance_oopl_desc_second_month: ', insurance_oopl_desc_second_month)
                insurance_amount_second_month=request.POST.get('change_insurance_amount_second_month')
                print('change_insurance_amount_second_month: ', insurance_amount_second_month)
                insurance_oopl_amount_second_month=request.POST.get('change_insurance_oopl_amount_second_month')
                print('change_insurance_oopl_amount_second_month: ', insurance_oopl_amount_second_month)
                other_income_desc_second_month=request.POST.get('change_other_income_desc_second_month')
                print('change_other_income_desc_second_month: ', other_income_desc_second_month)
                other_income_oopl_desc_second_month=request.POST.get('change_other_income_oopl_desc_second_month')
                print('change_other_income_oopl_desc_second_month: ', other_income_oopl_desc_second_month)
                other_income_amount_second_month=request.POST.get('change_other_income_amount_second_month')
                print('change_other_income_amount_second_month: ', other_income_amount_second_month)
                other_income_oopl_amount_second_month=request.POST.get('change_other_income_oopl_amount_second_month')
                print('change_other_income_oopl_amount_second_month: ', other_income_oopl_amount_second_month)
                ct_kcc_desc_second_month=request.POST.get('change_ct_kcc_desc_second_month')
                print('change_ct_kcc_desc_second_month: ', ct_kcc_desc_second_month)
                ct_kcc_amount_second_month=request.POST.get('change_ct_kcc_amount_second_month')
                print('change_ct_kcc_amount_second_month: ', ct_kcc_amount_second_month)
                ct_oopl_desc_second_month=request.POST.get('change_ct_oopl_desc_second_month')
                print('change_ct_oopl_desc_second_month: ', ct_oopl_desc_second_month)
                ct_oopl_amount_second_month=request.POST.get('change_ct_oopl_amount_second_month')
                print('change_ct_oopl_amount_second_month: ', ct_oopl_amount_second_month)
                mould_oopl_desc_second_month=request.POST.get('change_mould_oopl_desc_second_month')
                print('change_mould_oopl_desc_second_month: ', mould_oopl_desc_second_month)
                mould_oopl_amount_second_month=request.POST.get('change_mould_oopl_amount_second_month')
                print('change_mould_oopl_amount_second_month: ', mould_oopl_amount_second_month)
                mould_kcc_desc_second_month=request.POST.get('change_mould_kcc_desc_second_month')
                print('change_mould_kcc_desc_second_month: ', mould_kcc_desc_second_month)
                mould_kcc_amount_second_month=request.POST.get('change_mould_kcc_amount_second_month')
                print('change_mould_kcc_amount_second_month: ', mould_kcc_amount_second_month)
                additional_income_desc_second_month=request.POST.get('change_additional_income_desc_second_month')
                print('change_additional_income_desc_second_month: ', additional_income_desc_second_month)
                kcc_share_add_in1_second_month=request.POST.get('kcc_share_add_in1_second_month')
                print('kcc_share_add_in1_second_month: ', kcc_share_add_in1_second_month)
                additional_income_oopl_desc_second_month=request.POST.get('change_additional_income_oopl_desc_second_month')
                print('change_additional_income_oopl_desc_second_month: ', additional_income_oopl_desc_second_month)
                kcc_share_add_in2_second_month=request.POST.get('kcc_share_add_in2_second_month')
                print('kcc_share_add_in2_second_month: ', kcc_share_add_in2_second_month)
                other_expenses_desc_second_month=request.POST.get('change_other_expenses_desc_second_month')
                print('change_other_expenses_desc_second_month: ', other_expenses_desc_second_month)
                kcc_share_other_expenses1_second_month=request.POST.get('kcc_share_other_expenses1_second_month')
                print('kcc_share_other_expenses1_second_month: ', kcc_share_other_expenses1_second_month)
                other_expenses_oopl_desc_second_month=request.POST.get('change_other_expenses_oopl_desc_second_month')
                print('change_other_expenses_oopl_desc_second_month: ', other_expenses_oopl_desc_second_month)
                kcc_share_other_expenses2_second_month=request.POST.get('kcc_share_other_expenses2_second_month')
                print('kcc_share_other_expenses2_second_month: ', kcc_share_other_expenses2_second_month)
                request.session['amount_credited_second_month']=amount_credited_second_month
                request.session['rt_cash_desc_second_month']=rt_cash_desc_second_month
                request.session['rt_cash_amount_second_month']=rt_cash_amount_second_month
                request.session['rt_cash_oopl_desc_second_month']=rt_cash_oopl_desc_second_month
                request.session['rt_cash_oopl_amount_second_month']=rt_cash_oopl_amount_second_month
                request.session['partial_cash_desc_second_month']=partial_cash_desc_second_month
                request.session['partial_cash_amount_second_month']=partial_cash_amount_second_month
                request.session['partial_cash_oopl_desc_second_month']=partial_cash_oopl_desc_second_month
                request.session['partial_cash_oopl_amount_second_month']=partial_cash_oopl_amount_second_month
                request.session['mjpjay_desc_second_month']=mjpjay_desc_second_month
                request.session['mjpjay_amount_second_month']=mjpjay_amount_second_month
                request.session['mjpjay_oopl_desc_second_month']=mjpjay_oopl_desc_second_month
                request.session['mjpjay_oopl_amount_second_month']=mjpjay_oopl_amount_second_month
                request.session['pmjay_desc_second_month']=pmjay_desc_second_month
                request.session['pmjay_amount_second_month']=pmjay_amount_second_month
                request.session['pmjay_oopl_desc_second_month']=pmjay_oopl_desc_second_month
                request.session['pmjay_oopl_amount_second_month']=pmjay_oopl_amount_second_month
                request.session['police_file_desc_second_month']=police_file_desc_second_month
                request.session['police_file_amount_second_month']=police_file_amount_second_month
                request.session['police_file_oopl_desc_second_month']=police_file_oopl_desc_second_month
                request.session['police_file_oopl_amount_second_month']=police_file_oopl_amount_second_month
                request.session['insurance_desc_second_month']=insurance_desc_second_month
                request.session['insurance_amount_second_month']=insurance_amount_second_month
                request.session['insurance_oopl_desc_second_month']=insurance_oopl_desc_second_month
                request.session['insurance_oopl_amount_second_month']=insurance_oopl_amount_second_month
                request.session['other_income_desc_second_month']=other_income_desc_second_month
                request.session['other_income_amount_second_month']=other_income_amount_second_month
                request.session['other_income_oopl_desc_second_month']=other_income_oopl_desc_second_month
                request.session['other_income_oopl_amount_second_month']=other_income_oopl_amount_second_month
                request.session['ct_kcc_desc_second_month']=ct_kcc_desc_second_month
                request.session['ct_kcc_amount_second_month']=ct_kcc_amount_second_month
                request.session['ct_oopl_desc_second_month']=ct_oopl_desc_second_month
                request.session['ct_oopl_amount_second_month']=ct_oopl_amount_second_month
                request.session['mould_oopl_desc_second_month']=mould_oopl_desc_second_month
                request.session['mould_oopl_amount_second_month']=mould_oopl_amount_second_month
                request.session['mould_kcc_desc_second_month']=mould_kcc_desc_second_month
                request.session['mould_kcc_amount_second_month']=mould_kcc_amount_second_month
                request.session['additional_income_desc_second_month']=additional_income_desc_second_month
                request.session['kcc_share_add_in1_second_month']=kcc_share_add_in1_second_month
                request.session['additional_income_oopl_desc_second_month']=additional_income_oopl_desc_second_month
                request.session['kcc_share_add_in2_second_month']=kcc_share_add_in2_second_month
                request.session['other_expenses_desc_second_month']=other_expenses_desc_second_month
                request.session['kcc_share_other_expenses1_second_month']=kcc_share_other_expenses1_second_month
                request.session['other_expenses_oopl_desc_second_month']=other_expenses_oopl_desc_second_month
                request.session['kcc_share_other_expenses2_second_month']=kcc_share_other_expenses2_second_month
                return HttpResponseRedirect('/dhule/additional_fields_third_month/')
            else:
                form=AdditionalFieldsSecondMonth()
                cur_user=request.user
                nav_msg='Optional Fields - 2nd Month'
                return render(request, 'dhule/additional_fields_second_month.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def additional_fields_third_month_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                rt_cash_desc_third_month=request.POST.get('change_rt_cash_desc_third_month')
                print('change_rt_cash_desc_third_month: ', rt_cash_desc_third_month)
                rt_cash_oopl_desc_third_month=request.POST.get('change_rt_cash_oopl_desc_third_month')
                print('change_rt_cash_oopl_desc_third_month: ', rt_cash_oopl_desc_third_month)
                rt_cash_amount_third_month=request.POST.get('change_rt_cash_amount_third_month')
                print('change_rt_cash_amount_third_month: ', rt_cash_amount_third_month)
                rt_cash_oopl_amount_third_month=request.POST.get('change_rt_cash_oopl_amount_third_month')
                print('change_rt_cash_oopl_amount_third_month: ', rt_cash_oopl_amount_third_month)
                partial_cash_desc_third_month=request.POST.get('change_partial_cash_desc_third_month')
                print('change_partial_cash_desc_third_month: ', partial_cash_desc_third_month)
                partial_cash_oopl_desc_third_month=request.POST.get('change_partial_cash_oopl_desc_third_month')
                print('change_partial_cash_oopl_desc_first_month: ', partial_cash_oopl_desc_third_month)
                partial_cash_amount_third_month=request.POST.get('change_partial_cash_amount_third_month')
                print('change_partial_cash_amount_third_month: ', partial_cash_amount_third_month)
                partial_cash_oopl_amount_third_month=request.POST.get('change_partial_cash_oopl_amount_third_month')
                print('change_partial_cash_oopl_amount_third_month: ', partial_cash_oopl_amount_third_month)
                mjpjay_desc_third_month=request.POST.get('change_mjpjay_desc_third_month')
                print('change_mjpjay_desc_third_month: ', mjpjay_desc_third_month)
                mjpjay_oopl_desc_third_month=request.POST.get('change_mjpjay_oopl_desc_third_month')
                print('change_mjpjay_oopl_desc_third_month: ', mjpjay_oopl_desc_third_month)
                mjpjay_amount_third_month=request.POST.get('change_mjpjay_amount_third_month')
                print('change_mjpjay_amount_third_month: ', mjpjay_amount_third_month)
                mjpjay_oopl_amount_third_month=request.POST.get('change_mjpjay_oopl_amount_third_month')
                print('change_mjpjay_oopl_amount_third_month: ', mjpjay_oopl_amount_third_month)
                pmjay_desc_third_month=request.POST.get('change_pmjay_desc_third_month')
                print('change_pmjay_desc_third_month: ', pmjay_desc_third_month)
                pmjay_oopl_desc_third_month=request.POST.get('change_pmjay_oopl_desc_third_month')
                print('change_pmjay_oopl_desc_third_month: ', pmjay_oopl_desc_third_month)
                pmjay_amount_third_month=request.POST.get('change_pmjay_amount_third_month')
                print('change_pmjay_amount_third_month: ', pmjay_amount_third_month)
                pmjay_oopl_amount_third_month=request.POST.get('change_pmjay_oopl_amount_third_month')
                print('change_pmjay_oopl_amount_third_month: ', pmjay_oopl_amount_third_month)
                police_file_desc_third_month=request.POST.get('change_police_file_desc_third_month')
                print('change_police_file_desc_third_month: ', police_file_desc_third_month)
                police_file_oopl_desc_third_month=request.POST.get('change_police_file_oopl_desc_third_month')
                print('change_police_file_oopl_desc_third_month: ', police_file_oopl_desc_third_month)
                police_file_amount_third_month=request.POST.get('change_police_file_amount_third_month')
                print('change_police_file_amount_third_month: ', police_file_amount_third_month)
                police_file_oopl_amount_third_month=request.POST.get('change_police_file_oopl_amount_third_month')
                print('change_police_file_oopl_amount_third_month: ', police_file_oopl_amount_third_month)
                insurance_desc_third_month=request.POST.get('change_insurance_desc_third_month')
                print('change_insurance_desc_third_month: ', insurance_desc_third_month)
                insurance_oopl_desc_third_month=request.POST.get('change_insurance_oopl_desc_third_month')
                print('change_insurance_oopl_desc_third_month: ', insurance_oopl_desc_third_month)
                insurance_amount_third_month=request.POST.get('change_insurance_amount_third_month')
                print('change_insurance_amount_third_month: ', insurance_amount_third_month)
                insurance_oopl_amount_third_month=request.POST.get('change_insurance_oopl_amount_third_month')
                print('change_insurance_oopl_amount_third_month: ', insurance_oopl_amount_third_month)
                other_income_desc_third_month=request.POST.get('change_other_income_desc_third_month')
                print('change_other_income_desc_third_month: ', other_income_desc_third_month)
                other_income_oopl_desc_third_month=request.POST.get('change_other_income_oopl_desc_third_month')
                print('change_other_income_oopl_desc_third_month: ', other_income_oopl_desc_third_month)
                other_income_amount_third_month=request.POST.get('change_other_income_amount_third_month')
                print('change_other_income_amount_third_month: ', other_income_amount_third_month)
                other_income_oopl_amount_third_month=request.POST.get('change_other_income_oopl_amount_third_month')
                print('change_other_income_oopl_amount_third_month: ', other_income_oopl_amount_third_month)
                ct_kcc_desc_third_month=request.POST.get('change_ct_kcc_desc_third_month')
                print('change_ct_kcc_desc_third_month: ', ct_kcc_desc_third_month)
                ct_kcc_amount_third_month=request.POST.get('change_ct_kcc_amount_third_month')
                print('change_ct_kcc_amount_third_month: ', ct_kcc_amount_third_month)
                ct_oopl_desc_third_month=request.POST.get('change_ct_oopl_desc_third_month')
                print('change_ct_oopl_desc_third_month: ', ct_oopl_desc_third_month)
                ct_oopl_amount_third_month=request.POST.get('change_ct_oopl_amount_third_month')
                print('change_ct_oopl_amount_third_month: ', ct_oopl_amount_third_month)
                mould_oopl_desc_third_month=request.POST.get('change_mould_oopl_desc_third_month')
                print('change_mould_oopl_desc_third_month: ', mould_oopl_desc_third_month)
                mould_oopl_amount_third_month=request.POST.get('change_mould_oopl_amount_third_month')
                print('change_mould_oopl_amount_third_month: ', mould_oopl_amount_third_month)
                mould_kcc_desc_third_month=request.POST.get('change_mould_kcc_desc_third_month')
                print('change_mould_kcc_desc_third_month: ', mould_kcc_desc_third_month)
                mould_kcc_amount_third_month=request.POST.get('change_mould_kcc_amount_third_month')
                print('change_mould_kcc_amount_third_month: ', mould_kcc_amount_third_month)
                additional_income_desc_third_month=request.POST.get('change_additional_income_desc_third_month')
                print('change_additional_income_desc_third_month: ', additional_income_desc_third_month)
                kcc_share_add_in1_third_month=request.POST.get('kcc_share_add_in1_third_month')
                print('kcc_share_add_in1_third_month: ', kcc_share_add_in1_third_month)
                additional_income_oopl_desc_third_month=request.POST.get('change_additional_income_oopl_desc_third_month')
                print('change_additional_income_oopl_desc_third_month: ', additional_income_oopl_desc_third_month)
                kcc_share_add_in2_third_month=request.POST.get('kcc_share_add_in2_third_month')
                print('kcc_share_add_in2_third_month: ', kcc_share_add_in2_third_month)
                other_expenses_desc_third_month=request.POST.get('change_other_expenses_desc_third_month')
                print('change_other_expenses_desc_third_month: ', other_expenses_desc_third_month)
                kcc_share_other_expenses1_third_month=request.POST.get('kcc_share_other_expenses1_third_month')
                print('kcc_share_other_expenses1_third_month: ', kcc_share_other_expenses1_third_month)
                other_expenses_oopl_desc_third_month=request.POST.get('change_other_expenses_oopl_desc_third_month')
                print('change_other_expenses_oopl_desc_third_month: ', other_expenses_oopl_desc_third_month)
                kcc_share_other_expenses2_third_month=request.POST.get('kcc_share_other_expenses2_third_month')
                print('kcc_share_other_expenses2_third_month: ', kcc_share_other_expenses2_third_month)
                request.session['rt_cash_desc_third_month']=rt_cash_desc_third_month
                request.session['rt_cash_amount_third_month']=rt_cash_amount_third_month
                request.session['rt_cash_oopl_desc_third_month']=rt_cash_oopl_desc_third_month
                request.session['rt_cash_oopl_amount_third_month']=rt_cash_oopl_amount_third_month
                request.session['partial_cash_desc_third_month']=partial_cash_desc_third_month
                request.session['partial_cash_amount_third_month']=partial_cash_amount_third_month
                request.session['partial_cash_oopl_desc_third_month']=partial_cash_oopl_desc_third_month
                request.session['partial_cash_oopl_amount_third_month']=partial_cash_oopl_amount_third_month
                request.session['mjpjay_desc_third_month']=mjpjay_desc_third_month
                request.session['mjpjay_amount_third_month']=mjpjay_amount_third_month
                request.session['mjpjay_oopl_desc_third_month']=mjpjay_oopl_desc_third_month
                request.session['mjpjay_oopl_amount_third_month']=mjpjay_oopl_amount_third_month
                request.session['pmjay_desc_third_month']=pmjay_desc_third_month
                request.session['pmjay_amount_third_month']=pmjay_amount_third_month
                request.session['pmjay_oopl_desc_third_month']=pmjay_oopl_desc_third_month
                request.session['pmjay_oopl_amount_third_month']=pmjay_oopl_amount_third_month
                request.session['police_file_desc_third_month']=police_file_desc_third_month
                request.session['police_file_amount_third_month']=police_file_amount_third_month
                request.session['police_file_oopl_desc_third_month']=police_file_oopl_desc_third_month
                request.session['police_file_oopl_amount_third_month']=police_file_oopl_amount_third_month
                request.session['insurance_desc_third_month']=insurance_desc_third_month
                request.session['insurance_amount_third_month']=insurance_amount_third_month
                request.session['insurance_oopl_desc_third_month']=insurance_oopl_desc_third_month
                request.session['insurance_oopl_amount_third_month']=insurance_oopl_amount_third_month
                request.session['other_income_desc_third_month']=other_income_desc_third_month
                request.session['other_income_amount_third_month']=other_income_amount_third_month
                request.session['other_income_oopl_desc_third_month']=other_income_oopl_desc_third_month
                request.session['other_income_oopl_amount_third_month']=other_income_oopl_amount_third_month
                request.session['ct_kcc_desc_third_month']=ct_kcc_desc_third_month
                request.session['ct_kcc_amount_third_month']=ct_kcc_amount_third_month
                request.session['ct_oopl_desc_third_month']=ct_oopl_desc_third_month
                request.session['ct_oopl_amount_third_month']=ct_oopl_amount_third_month
                request.session['mould_oopl_desc_third_month']=mould_oopl_desc_third_month
                request.session['mould_oopl_amount_third_month']=mould_oopl_amount_third_month
                request.session['mould_kcc_desc_third_month']=mould_kcc_desc_third_month
                request.session['mould_kcc_amount_third_month']=mould_kcc_amount_third_month
                request.session['additional_income_desc_third_month']=additional_income_desc_third_month
                request.session['kcc_share_add_in1_third_month']=kcc_share_add_in1_third_month
                request.session['additional_income_oopl_desc_third_month']=additional_income_oopl_desc_third_month
                request.session['kcc_share_add_in2_third_month']=kcc_share_add_in2_third_month
                request.session['other_expenses_desc_third_month']=other_expenses_desc_third_month
                request.session['kcc_share_other_expenses1_third_month']=kcc_share_other_expenses1_third_month
                request.session['other_expenses_oopl_desc_third_month']=other_expenses_oopl_desc_third_month
                request.session['kcc_share_other_expenses2_third_month']=kcc_share_other_expenses2_third_month
                return HttpResponseRedirect('/dhule/quarterly_bill/')
            else:
                form=AdditionalFieldsThirdMonth()
                cur_user=request.user
                nav_msg='Optional Fields - 3rd Month'
                return render(request, 'dhule/additional_fields_third_month.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def quarterly_bill_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            try:
                context={}
                cur_user=request.user
                nav_msg='Quarterly Bills'
                context['cur_user']=cur_user
                context['nav_msg']=nav_msg
                quarter=request.session['quarter']
                print('quarter selected: ', quarter)
                context['quarter']=quarter
                fin_year=request.session['fin_year']
                print('fin_year: ', fin_year)
                bill_date=request.session['bill_date']
                print('bill_date in provisional bill: ', bill_date)
                amount_credited_first_month=request.session['amount_credited_first_month']
                rt_cash_desc_first_month=request.session['rt_cash_desc_first_month']
                rt_cash_amount_first_month=request.session['rt_cash_amount_first_month']
                rt_cash_oopl_desc_first_month=request.session['rt_cash_oopl_desc_first_month']
                rt_cash_oopl_amount_first_month=request.session['rt_cash_oopl_amount_first_month']
                partial_cash_desc_first_month=request.session['partial_cash_desc_first_month']
                partial_cash_amount_first_month=request.session['partial_cash_amount_first_month']
                partial_cash_oopl_desc_first_month=request.session['partial_cash_oopl_desc_first_month']
                partial_cash_oopl_amount_first_month=request.session['partial_cash_oopl_amount_first_month']
                mjpjay_desc_first_month=request.session['mjpjay_desc_first_month']
                mjpjay_amount_first_month=request.session['mjpjay_amount_first_month']
                mjpjay_oopl_desc_first_month=request.session['mjpjay_oopl_desc_first_month']
                mjpjay_oopl_amount_first_month=request.session['mjpjay_oopl_amount_first_month']
                pmjay_desc_first_month=request.session['pmjay_desc_first_month']
                pmjay_amount_first_month=request.session['pmjay_amount_first_month']
                pmjay_oopl_desc_first_month=request.session['pmjay_oopl_desc_first_month']
                pmjay_oopl_amount_first_month=request.session['pmjay_oopl_amount_first_month']
                police_file_desc_first_month=request.session['police_file_desc_first_month']
                police_file_amount_first_month=request.session['police_file_amount_first_month']
                police_file_oopl_desc_first_month=request.session['police_file_oopl_desc_first_month']
                police_file_oopl_amount_first_month=request.session['police_file_oopl_amount_first_month']
                insurance_desc_first_month=request.session['insurance_desc_first_month']
                insurance_amount_first_month=request.session['insurance_amount_first_month']
                insurance_oopl_desc_first_month=request.session['insurance_oopl_desc_first_month']
                insurance_oopl_amount_first_month=request.session['insurance_oopl_amount_first_month']
                other_income_desc_first_month=request.session['other_income_desc_first_month']
                other_income_amount_first_month=request.session['other_income_amount_first_month']
                other_income_oopl_desc_first_month=request.session['other_income_oopl_desc_first_month']
                other_income_oopl_amount_first_month=request.session['other_income_oopl_amount_first_month']
                ct_kcc_desc_first_month=request.session['ct_kcc_desc_first_month']
                ct_kcc_amount_first_month=request.session['ct_kcc_amount_first_month']
                ct_oopl_desc_first_month=request.session['ct_oopl_desc_first_month']
                ct_oopl_amount_first_month=request.session['ct_oopl_amount_first_month']
                mould_oopl_desc_first_month=request.session['mould_oopl_desc_first_month']
                mould_oopl_amount_first_month=request.session['mould_oopl_amount_first_month']
                mould_kcc_desc_first_month=request.session['mould_kcc_desc_first_month']
                mould_kcc_amount_first_month=request.session['mould_kcc_amount_first_month']
                additional_income_desc_first_month=request.session['additional_income_desc_first_month']
                kcc_share_add_in1_first_month=request.session['kcc_share_add_in1_first_month']
                additional_income_oopl_desc_first_month=request.session['additional_income_oopl_desc_first_month']
                kcc_share_add_in2_first_month=request.session['kcc_share_add_in2_first_month']
                other_expenses_desc_first_month=request.session['other_expenses_desc_first_month']
                kcc_share_other_expenses1_first_month=request.session['kcc_share_other_expenses1_first_month']
                other_expenses_oopl_desc_first_month=request.session['other_expenses_oopl_desc_first_month']
                kcc_share_other_expenses2_first_month=request.session['kcc_share_other_expenses2_first_month']
                amount_credited_second_month=request.session['amount_credited_second_month']
                rt_cash_desc_second_month=request.session['rt_cash_desc_second_month']
                rt_cash_amount_second_month=request.session['rt_cash_amount_second_month']
                rt_cash_oopl_desc_second_month=request.session['rt_cash_oopl_desc_second_month']
                rt_cash_oopl_amount_second_month=request.session['rt_cash_oopl_amount_second_month']
                partial_cash_desc_second_month=request.session['partial_cash_desc_second_month']
                partial_cash_amount_second_month=request.session['partial_cash_amount_second_month']
                partial_cash_oopl_desc_second_month=request.session['partial_cash_oopl_desc_second_month']
                partial_cash_oopl_amount_second_month=request.session['partial_cash_oopl_amount_second_month']
                mjpjay_desc_second_month=request.session['mjpjay_desc_second_month']
                mjpjay_amount_second_month=request.session['mjpjay_amount_second_month']
                mjpjay_oopl_desc_second_month=request.session['mjpjay_oopl_desc_second_month']
                mjpjay_oopl_amount_second_month=request.session['mjpjay_oopl_amount_second_month']
                pmjay_desc_second_month=request.session['pmjay_desc_second_month']
                pmjay_amount_second_month=request.session['pmjay_amount_second_month']
                pmjay_oopl_desc_second_month=request.session['pmjay_oopl_desc_second_month']
                pmjay_oopl_amount_second_month=request.session['pmjay_oopl_amount_second_month']
                police_file_desc_second_month=request.session['police_file_desc_second_month']
                police_file_amount_second_month=request.session['police_file_amount_second_month']
                police_file_oopl_desc_second_month=request.session['police_file_oopl_desc_second_month']
                police_file_oopl_amount_second_month=request.session['police_file_oopl_amount_second_month']
                insurance_desc_second_month=request.session['insurance_desc_second_month']
                insurance_amount_second_month=request.session['insurance_amount_second_month']
                insurance_oopl_desc_second_month=request.session['insurance_oopl_desc_second_month']
                insurance_oopl_amount_second_month=request.session['insurance_oopl_amount_second_month']
                other_income_desc_second_month=request.session['other_income_desc_second_month']
                other_income_amount_second_month=request.session['other_income_amount_second_month']
                other_income_oopl_desc_second_month=request.session['other_income_oopl_desc_second_month']
                other_income_oopl_amount_second_month=request.session['other_income_oopl_amount_second_month']
                ct_kcc_desc_second_month=request.session['ct_kcc_desc_second_month']
                ct_kcc_amount_second_month=request.session['ct_kcc_amount_second_month']
                ct_oopl_desc_second_month=request.session['ct_oopl_desc_second_month']
                ct_oopl_amount_second_month=request.session['ct_oopl_amount_second_month']
                mould_oopl_desc_second_month=request.session['mould_oopl_desc_second_month']
                mould_oopl_amount_second_month=request.session['mould_oopl_amount_second_month']
                mould_kcc_desc_second_month=request.session['mould_kcc_desc_second_month']
                mould_kcc_amount_second_month=request.session['mould_kcc_amount_second_month']
                additional_income_desc_second_month=request.session['additional_income_desc_second_month']
                kcc_share_add_in1_second_month=request.session['kcc_share_add_in1_second_month']
                additional_income_oopl_desc_second_month=request.session['additional_income_oopl_desc_second_month']
                kcc_share_add_in2_second_month=request.session['kcc_share_add_in2_second_month']
                other_expenses_desc_second_month=request.session['other_expenses_desc_second_month']
                kcc_share_other_expenses1_second_month=request.session['kcc_share_other_expenses1_second_month']
                other_expenses_oopl_desc_second_month=request.session['other_expenses_oopl_desc_second_month']
                kcc_share_other_expenses2_second_month=request.session['kcc_share_other_expenses2_second_month']
                rt_cash_desc_third_month=request.session['rt_cash_desc_third_month']
                rt_cash_amount_third_month=request.session['rt_cash_amount_third_month']
                rt_cash_oopl_desc_third_month=request.session['rt_cash_oopl_desc_third_month']
                rt_cash_oopl_amount_third_month=request.session['rt_cash_oopl_amount_third_month']
                partial_cash_desc_third_month=request.session['partial_cash_desc_third_month']
                partial_cash_amount_third_month=request.session['partial_cash_amount_third_month']
                partial_cash_oopl_desc_third_month=request.session['partial_cash_oopl_desc_third_month']
                partial_cash_oopl_amount_third_month=request.session['partial_cash_oopl_amount_third_month']
                mjpjay_desc_third_month=request.session['mjpjay_desc_third_month']
                mjpjay_amount_third_month=request.session['mjpjay_amount_third_month']
                mjpjay_oopl_desc_third_month=request.session['mjpjay_oopl_desc_third_month']
                mjpjay_oopl_amount_third_month=request.session['mjpjay_oopl_amount_third_month']
                pmjay_desc_third_month=request.session['pmjay_desc_third_month']
                pmjay_amount_third_month=request.session['pmjay_amount_third_month']
                pmjay_oopl_desc_third_month=request.session['pmjay_oopl_desc_third_month']
                pmjay_oopl_amount_third_month=request.session['pmjay_oopl_amount_third_month']
                police_file_desc_third_month=request.session['police_file_desc_third_month']
                police_file_amount_third_month=request.session['police_file_amount_third_month']
                police_file_oopl_desc_third_month=request.session['police_file_oopl_desc_third_month']
                police_file_oopl_amount_third_month=request.session['police_file_oopl_amount_third_month']
                insurance_desc_third_month=request.session['insurance_desc_third_month']
                insurance_amount_third_month=request.session['insurance_amount_third_month']
                insurance_oopl_desc_third_month=request.session['insurance_oopl_desc_third_month']
                insurance_oopl_amount_third_month=request.session['insurance_oopl_amount_third_month']
                other_income_desc_third_month=request.session['other_income_desc_third_month']
                other_income_amount_third_month=request.session['other_income_amount_third_month']
                other_income_oopl_desc_third_month=request.session['other_income_oopl_desc_third_month']
                other_income_oopl_amount_third_month=request.session['other_income_oopl_amount_third_month']
                ct_kcc_desc_third_month=request.session['ct_kcc_desc_third_month']
                ct_kcc_amount_third_month=request.session['ct_kcc_amount_third_month']
                ct_oopl_desc_third_month=request.session['ct_oopl_desc_third_month']
                ct_oopl_amount_third_month=request.session['ct_oopl_amount_third_month']
                mould_oopl_desc_third_month=request.session['mould_oopl_desc_third_month']
                mould_oopl_amount_third_month=request.session['mould_oopl_amount_third_month']
                mould_kcc_desc_third_month=request.session['mould_kcc_desc_third_month']
                mould_kcc_amount_third_month=request.session['mould_kcc_amount_third_month']
                additional_income_desc_third_month=request.session['additional_income_desc_third_month']
                kcc_share_add_in1_third_month=request.session['kcc_share_add_in1_third_month']
                additional_income_oopl_desc_third_month=request.session['additional_income_oopl_desc_third_month']
                kcc_share_add_in2_third_month=request.session['kcc_share_add_in2_third_month']
                other_expenses_desc_third_month=request.session['other_expenses_desc_third_month']
                kcc_share_other_expenses1_third_month=request.session['kcc_share_other_expenses1_third_month']
                other_expenses_oopl_desc_third_month=request.session['other_expenses_oopl_desc_third_month']
                kcc_share_other_expenses2_third_month=request.session['kcc_share_other_expenses2_third_month']
                year1, year2=fin_year.split('-')
                print('year1 ka value: ', year1)
                print('year2 ka value: ', year2)
                year3, month1, day1=bill_date.split('-')
                print('month1: ', month1)
                print('year3: ', year3)
                context['year3']=year3
                context['month1']=month1
                context['day1']=day1
                if quarter == 'q1':
                    fro1=datetime.datetime(int(year1), 4, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year1), 4, 30).date()
                    print('to1 ka value: ', to1)
                    fro2=datetime.datetime(int(year1), 5, 1).date()
                    print('fro2 ka value: ', fro2)
                    to2=datetime.datetime(int(year1), 5, 31).date()
                    print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year1), 6, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year1), 6, 30).date()
                    print('to3 ka value: ', to3)
                elif quarter == 'q2':
                    fro1=datetime.datetime(int(year1), 7, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year1), 7, 31).date()
                    print('to1 ka value: ', to1)
                    fro2=datetime.datetime(int(year1), 8, 1).date()
                    print('fro2 ka value: ', fro2)
                    to2=datetime.datetime(int(year1), 8, 31).date()
                    print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year1), 9, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year1), 9, 30).date()
                    print('to3 ka value: ', to3)
                elif quarter == 'q3':
                    fro1=datetime.datetime(int(year1), 10, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year1), 10, 31).date()
                    print('to1 ka value: ', to1)
                    fro2=datetime.datetime(int(year1), 11, 1).date()
                    print('fro2 ka value: ', fro2)
                    to2=datetime.datetime(int(year1), 11, 30).date()
                    print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year1), 12, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year1), 12, 31).date()
                    print('to3 ka value: ', to3)
                elif quarter == 'q4':
                    fro1=datetime.datetime(int(year2), 1, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year2), 1, 31).date()
                    print('to1 ka value: ', to1)
                    if year2 == '2024' or year2 == '2028':
                        fro2=datetime.datetime(int(year2), 2, 1).date()
                        print('fro2 ka value: ', fro2)
                        to2=datetime.datetime(int(year2), 2, 29).date()
                        print('to2 ka value: ', to2)
                    else:
                        fro2=datetime.datetime(int(year2), 2, 1).date()
                        print('fro2 ka value: ', fro2)
                        to2=datetime.datetime(int(year2), 2, 28).date()
                        print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year2), 3, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year2), 3, 31).date()
                    print('to3 ka value: ', to3)
                year4, month2, day2=str(to1).split('-')
                print('month2: ', month2)
                print('year4: ', year4)
                print('day2: ', day2)
                context['year4']=year4
                context['month2']=month2
                context['day2']=day2
                year5, month3, day3=str(to2).split('-')
                print('month3: ', month3)
                print('year5: ', year5)
                print('day3: ', day3)
                context['year5']=year5
                context['month3']=month3
                context['day3']=day3
                year6, month4, day4=str(to3).split('-')
                print('month4: ', month4)
                print('year6: ', year6)
                print('day4: ', day4)
                context['year6']=year6
                context['month4']=month4
                context['day4']=day4
                year_list1=list(year4)
                print('year list1: ', year_list1)
                context['year_list1']=year_list1
                year_list2=list(year5)
                print('year list2: ', year_list2)
                context['year_list2']=year_list2
                year_list3=list(year6)
                print('year list3: ', year_list3)
                context['year_list3']=year_list3
                fro_new1=datetime.datetime.strptime(str(fro1), "%Y-%m-%d").date()
                print('fro ka type: ', type(fro_new1))
                prev1=fro_new1+relativedelta(months=-1)
                print('previous month - 1 ', prev1)
                to_new1=datetime.datetime.strptime(str(to1), "%Y-%m-%d").date()
                print('to ka type: ', type(to_new1))
                prev2=to_new1+relativedelta(months=-1)
                print('previous month - 2 ', prev2)
                fro_new2=datetime.datetime.strptime(str(fro2), "%Y-%m-%d").date()
                print('fro ka type: ', type(fro_new2))
                prev3=fro_new2+relativedelta(months=-1)
                print('previous month - 3 ', prev3)
                to_new2=datetime.datetime.strptime(str(to2), "%Y-%m-%d").date()
                print('to ka type: ', type(to_new2))
                prev4=to_new2+relativedelta(months=-1)
                print('previous month - 4 ', prev4)
                fro_new3=datetime.datetime.strptime(str(fro3), "%Y-%m-%d").date()
                print('fro ka type: ', type(fro_new3))
                prev5=fro_new3+relativedelta(months=-1)
                print('previous month - 5 ', prev5)
                to_new3=datetime.datetime.strptime(str(to3), "%Y-%m-%d").date()
                print('to ka type: ', type(to_new3))
                prev6=to_new3+relativedelta(months=-1)
                print('previous month - 6 ', prev6)
                eles_kcc1=[]
                eles_kcc2=[]
                eles_kcc3=[]
                eles_oopl1=[]
                eles_oopl2=[]
                eles_oopl3=[]
                kcc_total_exp1=[]
                kcc_total_exp2=[]
                kcc_total_exp3=[]
                oopl_total_exp1=[]
                oopl_total_exp2=[]
                oopl_total_exp3=[]
                rt_cash1=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                rt_cash2=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                rt_cash3=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                rt_cash_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                rt_cash_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                rt_cash_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                partial_cash1=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                partial_cash2=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                partial_cash3=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                partial_cash_oopl1=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                partial_cash_oopl2=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                partial_cash_oopl3=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                mjpjay_realized1=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                mjpjay_realized2=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                mjpjay_realized3=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                mjpjay_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                mjpjay_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                mjpjay_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                pmjay_realized1=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                pmjay_realized2=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                pmjay_realized3=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                pmjay_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                pmjay_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                pmjay_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                police_file_realized1=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                police_file_realized2=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                police_file_realized3=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                police_file_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                police_file_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                police_file_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                insurance_realized1=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                insurance_realized2=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                insurance_realized3=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                insurance_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                insurance_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                insurance_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                other_income1=OtherIncome.objects.filter(date__range=(fro1, to1), received_by='k')
                other_income2=OtherIncome.objects.filter(date__range=(fro2, to2), received_by='k')
                other_income3=OtherIncome.objects.filter(date__range=(fro3, to3), received_by='k')
                other_income_oopl1=OtherIncome.objects.filter(date__range=(fro1, to1), received_by='o')
                other_income_oopl2=OtherIncome.objects.filter(date__range=(fro2, to2), received_by='o')
                other_income_oopl3=OtherIncome.objects.filter(date__range=(fro3, to3), received_by='o')
                additional_income1=AdditionalIncome.objects.filter(date__range=(fro1, to1), received_by='k')
                additional_income2=AdditionalIncome.objects.filter(date__range=(fro2, to2), received_by='k')
                additional_income3=AdditionalIncome.objects.filter(date__range=(fro3, to3), received_by='k')
                additional_income_oopl1=AdditionalIncome.objects.filter(date__range=(fro1, to1), received_by='o')
                additional_income_oopl2=AdditionalIncome.objects.filter(date__range=(fro2, to2), received_by='o')
                additional_income_oopl3=AdditionalIncome.objects.filter(date__range=(fro3, to3), received_by='o')
                opd1=OpdReport.objects.filter(opd__date__range=(fro1, to1))
                print('opd1 ka value: ', opd1)
                opd2=OpdReport.objects.filter(opd__date__range=(fro2, to2))
                opd3=OpdReport.objects.filter(opd__date__range=(fro3, to3))
                ct_kcc1=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='k')
                ct_kcc2=CTScan.objects.filter(date__range=(prev3, prev4), conducted_by='k')
                ct_kcc3=CTScan.objects.filter(date__range=(prev5, prev6), conducted_by='k')
                ct_oopl1=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='o')
                ct_oopl2=CTScan.objects.filter(date__range=(prev3, prev4), conducted_by='o')
                ct_oopl3=CTScan.objects.filter(date__range=(prev5, prev6), conducted_by='o')
                mould_oopl1=CommonExpenses.objects.filter(date__range=(fro1, to1), particulars__icontains='Mould', paid_by='o')
                mould_oopl2=CommonExpenses.objects.filter(date__range=(fro2, to2), particulars__icontains='Mould', paid_by='o')
                mould_oopl3=CommonExpenses.objects.filter(date__range=(fro3, to3), particulars__icontains='Mould', paid_by='o')
                mould_kcc1=CommonExpenses.objects.filter(date__range=(fro1, to1), particulars__icontains='Mould', paid_by='k')
                mould_kcc2=CommonExpenses.objects.filter(date__range=(fro2, to2), particulars__icontains='Mould', paid_by='k')
                mould_kcc3=CommonExpenses.objects.filter(date__range=(fro3, to3), particulars__icontains='Mould', paid_by='k')
                com_exp_kcc1=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro1, to1), paid_by='k')
                com_exp_kcc2=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro2, to2), paid_by='k')
                com_exp_kcc3=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro3, to3), paid_by='k')
                com_exp_oopl1=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro1, to1), paid_by='o')
                com_exp_oopl2=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro2, to2), paid_by='o')
                com_exp_oopl3=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro3, to3), paid_by='o')
                other_expenses1=OtherExpenses.objects.filter(date__range=(fro1, to1), paid_by='k')
                other_expenses2=OtherExpenses.objects.filter(date__range=(fro2, to2), paid_by='k')
                other_expenses3=OtherExpenses.objects.filter(date__range=(fro3, to3), paid_by='k')
                other_expenses_oopl1=OtherExpenses.objects.filter(date__range=(fro1, to1), paid_by='o')
                other_expenses_oopl2=OtherExpenses.objects.filter(date__range=(fro2, to2), paid_by='o')
                other_expenses_oopl3=OtherExpenses.objects.filter(date__range=(fro3, to3), paid_by='o')
                rt_cash_total1=rt_cash1.aggregate(Sum('realization__amount_received'))
                rt_cash_total2=rt_cash2.aggregate(Sum('realization__amount_received'))
                rt_cash_total3=rt_cash3.aggregate(Sum('realization__amount_received'))
                rt_cash_oopl_total=rt_cash_oopl1.aggregate(Sum('realization__amount_received'))
                rt_cash_oopl_total=rt_cash_oopl2.aggregate(Sum('realization__amount_received'))
                rt_cash_oopl_total=rt_cash_oopl3.aggregate(Sum('realization__amount_received'))
                partial_cash_total1=partial_cash1.aggregate(Sum('realization__amount_received'))
                partial_cash_total2=partial_cash2.aggregate(Sum('realization__amount_received'))
                partial_cash_total3=partial_cash3.aggregate(Sum('realization__amount_received'))
                partial_cash_oopl_total1=partial_cash_oopl1.aggregate(Sum('realization__amount_received'))
                partial_cash_oopl_total2=partial_cash_oopl2.aggregate(Sum('realization__amount_received'))
                partial_cash_oopl_total3=partial_cash_oopl3.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_total1=mjpjay_realized1.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_total2=mjpjay_realized2.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_total3=mjpjay_realized3.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_oopl_total1=mjpjay_realized_oopl1.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_oopl_total2=mjpjay_realized_oopl2.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_oopl_total3=mjpjay_realized_oopl3.aggregate(Sum('realization__amount_received'))
                pmjay_realized_total1=pmjay_realized1.aggregate(Sum('realization__amount_received'))
                pmjay_realized_total2=pmjay_realized2.aggregate(Sum('realization__amount_received'))
                pmjay_realized_total3=pmjay_realized3.aggregate(Sum('realization__amount_received'))
                pmjay_realized_oopl_total1=pmjay_realized_oopl1.aggregate(Sum('realization__amount_received'))
                pmjay_realized_oopl_total2=pmjay_realized_oopl2.aggregate(Sum('realization__amount_received'))
                pmjay_realized_oopl_total3=pmjay_realized_oopl3.aggregate(Sum('realization__amount_received'))
                police_file_realized_total1=police_file_realized1.aggregate(Sum('realization__amount_received'))
                police_file_realized_total2=police_file_realized2.aggregate(Sum('realization__amount_received'))
                police_file_realized_total3=police_file_realized3.aggregate(Sum('realization__amount_received'))
                police_file_realized_oopl_total1=police_file_realized_oopl1.aggregate(Sum('realization__amount_received'))
                police_file_realized_oopl_total2=police_file_realized_oopl2.aggregate(Sum('realization__amount_received'))
                police_file_realized_oopl_total3=police_file_realized_oopl3.aggregate(Sum('realization__amount_received'))
                insurance_realized_total1=insurance_realized1.aggregate(Sum('realization__amount_received'))
                insurance_realized_total2=insurance_realized2.aggregate(Sum('realization__amount_received'))
                insurance_realized_total3=insurance_realized3.aggregate(Sum('realization__amount_received'))
                insurance_realized_oopl_total1=insurance_realized_oopl1.aggregate(Sum('realization__amount_received'))
                insurance_realized_oopl_total2=insurance_realized_oopl2.aggregate(Sum('realization__amount_received'))
                insurance_realized_oopl_total3=insurance_realized_oopl3.aggregate(Sum('realization__amount_received'))
                other_income_total1=other_income1.aggregate(Sum('amount'))
                other_income_total2=other_income2.aggregate(Sum('amount'))
                other_income_total3=other_income3.aggregate(Sum('amount'))
                other_income_oopl_total1=other_income_oopl1.aggregate(Sum('amount'))
                other_income_oopl_total2=other_income_oopl2.aggregate(Sum('amount'))
                other_income_oopl_total3=other_income_oopl3.aggregate(Sum('amount'))
                opd_total1=opd1.aggregate(Sum('opd__amount'))
                opd_total2=opd2.aggregate(Sum('opd__amount'))
                opd_total3=opd3.aggregate(Sum('opd__amount'))
                ct_kcc_total1=ct_kcc1.aggregate(Sum('amount'))
                ct_kcc_total2=ct_kcc2.aggregate(Sum('amount'))
                ct_kcc_total3=ct_kcc3.aggregate(Sum('amount'))
                ct_oopl_total1=ct_oopl1.aggregate(Sum('amount'))
                ct_oopl_total2=ct_oopl2.aggregate(Sum('amount'))
                ct_oopl_total3=ct_oopl3.aggregate(Sum('amount'))
                mould_oopl_total1=mould_oopl1.aggregate(Sum('amount'))
                mould_oopl_total2=mould_oopl2.aggregate(Sum('amount'))
                mould_oopl_total3=mould_oopl3.aggregate(Sum('amount'))
                mould_kcc_total1=mould_kcc1.aggregate(Sum('amount'))
                mould_kcc_total2=mould_kcc2.aggregate(Sum('amount'))
                mould_kcc_total3=mould_kcc3.aggregate(Sum('amount'))
                com_exp_kcc_total1=com_exp_kcc1.aggregate(Sum('amount'))
                com_exp_kcc_total2=com_exp_kcc2.aggregate(Sum('amount'))
                com_exp_kcc_total3=com_exp_kcc3.aggregate(Sum('amount'))
                com_exp_oopl_total1=com_exp_oopl1.aggregate(Sum('amount'))
                com_exp_oopl_total2=com_exp_oopl2.aggregate(Sum('amount'))
                com_exp_oopl_total3=com_exp_oopl3.aggregate(Sum('amount'))
                additional_income_total1=additional_income1.aggregate(Sum('amount'))
                additional_income_total2=additional_income2.aggregate(Sum('amount'))
                additional_income_total3=additional_income3.aggregate(Sum('amount'))
                additional_income_oopl_total1=additional_income_oopl1.aggregate(Sum('amount'))
                additional_income_oopl_total2=additional_income_oopl2.aggregate(Sum('amount'))
                additional_income_oopl_total3=additional_income_oopl3.aggregate(Sum('amount'))
                other_expenses_total1=other_expenses1.aggregate(Sum('amount'))
                other_expenses_total2=other_expenses2.aggregate(Sum('amount'))
                other_expenses_total3=other_expenses3.aggregate(Sum('amount'))
                other_expenses_oopl_total1=other_expenses_oopl1.aggregate(Sum('amount'))
                other_expenses_oopl_total2=other_expenses_oopl2.aggregate(Sum('amount'))
                other_expenses_oopl_total3=other_expenses_oopl3.aggregate(Sum('amount'))
                if rt_cash_desc_first_month != '': #RT Cash description and amount entry into the bill.
                    context['rt_cash_desc_first_month']=rt_cash_desc_first_month
                if rt_cash_amount_first_month != '':
                    context['total1']=rt_cash_amount_first_month
                    eles_kcc1.append(int(rt_cash_amount_first_month))
                else:
                    context['total1']=rt_cash_total1['realization__amount_received__sum']
                    eles_kcc1.append(rt_cash_total1['realization__amount_received__sum'])
                if rt_cash_oopl_desc_first_month != '': #RT Cash OOPL description and amount entry into the bill.
                    context['rt_cash_oopl_desc_first_month']=rt_cash_oopl_desc_first_month
                if rt_cash_oopl_amount_first_month != '':
                    context['total1_oopl']=rt_cash_oopl_amount_first_month
                    eles_oopl1.append(int(rt_cash_oopl_amount_first_month))
                else:
                    context['total1_oopl']=rt_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl1.append(rt_cash_oopl_total['realization__amount_received__sum'])
                if partial_cash_desc_first_month != '': #Partial Cash description and amount entry into the bill.
                    context['partial_cash_desc_first_month']=partial_cash_desc_first_month
                if partial_cash_amount_first_month != '':
                    context['total2']=partial_cash_amount_first_month
                    eles_kcc1.append(int(partial_cash_amount_first_month))
                else:
                    context['total2']=partial_cash_total1['realization__amount_received__sum']
                    eles_kcc1.append(partial_cash_total1['realization__amount_received__sum'])
                if partial_cash_oopl_desc_first_month != '': #Partial Cash OOPL description and amount entry into the bill.
                    context['partial_cash_oopl_desc_first_month']=partial_cash_oopl_desc_first_month
                if partial_cash_oopl_amount_first_month != '':
                    context['total2_oopl']=partial_cash_oopl_amount_first_month
                    eles_oopl1.append(int(partial_cash_oopl_amount_first_month))
                else:
                    context['total2_oopl']=partial_cash_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(partial_cash_oopl_total1['realization__amount_received__sum'])
                if mjpjay_desc_first_month != '': #MJPJAY description and amount entry into the bill.
                    context['mjpjay_desc_first_month']=mjpjay_desc_first_month
                if mjpjay_amount_first_month != '':
                    context['total3']=mjpjay_amount_first_month
                    eles_kcc1.append(int(mjpjay_amount_first_month))
                else:
                    context['total3']=mjpjay_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(mjpjay_realized_total1['realization__amount_received__sum'])
                if mjpjay_oopl_desc_first_month != '': #MJPJAY OOPL description and amount entry into the bill.
                    context['mjpjay_oopl_desc_first_month']=mjpjay_oopl_desc_first_month
                if mjpjay_oopl_amount_first_month != '':
                    context['total3_oopl']=mjpjay_oopl_amount_first_month
                    eles_oopl1.append(int(mjpjay_oopl_amount_first_month))
                else:
                    context['total3_oopl']=mjpjay_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(mjpjay_realized_oopl_total1['realization__amount_received__sum'])
                if pmjay_desc_first_month != '': #PMJAY description and amount entry into the bill.
                    context['pmjay_desc_first_month']=pmjay_desc_first_month
                if pmjay_amount_first_month != '':
                    context['total4']=pmjay_amount_first_month
                    eles_kcc1.append(int(pmjay_amount_first_month))
                else:
                    context['total4']=pmjay_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(pmjay_realized_total1['realization__amount_received__sum'])
                if pmjay_oopl_desc_first_month != '': #PMJAY OOPL description and amount entry into the bill.
                    context['pmjay_oopl_desc_first_month']=pmjay_oopl_desc_first_month
                if pmjay_oopl_amount_first_month != '':
                    context['total4_oopl']=pmjay_oopl_amount_first_month
                    eles_oopl1.append(int(pmjay_oopl_amount_first_month))
                else:
                    context['total4_oopl']=pmjay_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(pmjay_realized_oopl_total1['realization__amount_received__sum'])
                if police_file_desc_first_month != '': #Police File description and amount entry into the bill.
                    context['police_file_desc_first_month']=police_file_desc_first_month
                if police_file_amount_first_month != '':
                    context['total7']=police_file_amount_first_month
                    eles_kcc1.append(int(police_file_amount_first_month))
                else:
                    context['total7']=police_file_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(police_file_realized_total1['realization__amount_received__sum'])
                if police_file_oopl_desc_first_month != '': #Police File OOPL description and amount entry into the bill.
                    context['police_file_oopl_desc_first_month']=police_file_oopl_desc_first_month
                if police_file_oopl_amount_first_month != '':
                    context['total7_oopl']=police_file_oopl_amount_first_month
                    eles_oopl1.append(int(police_file_oopl_amount_first_month))
                else:
                    context['total7_oopl']=police_file_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(police_file_realized_oopl_total1['realization__amount_received__sum'])
                if insurance_desc_first_month != '': #Insurance description and amount entry into the bill.
                    context['insurance_desc_first_month']=insurance_desc_first_month
                if insurance_amount_first_month != '':
                    context['total8']=insurance_amount_first_month
                    eles_kcc1.append(int(insurance_amount_first_month))
                else:
                    context['total8']=insurance_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(insurance_realized_total1['realization__amount_received__sum'])
                if insurance_oopl_desc_first_month != '': #Insurance OOPL description and amount entry into the bill.
                    context['insurance_oopl_desc_first_month']=insurance_oopl_desc_first_month
                if insurance_oopl_amount_first_month != '':
                    context['total8_oopl']=insurance_oopl_amount_first_month
                    eles_oopl1.append(int(insurance_oopl_amount_first_month))
                else:
                    context['total8_oopl']=insurance_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(insurance_realized_oopl_total1['realization__amount_received__sum'])
                if other_income_desc_first_month != '': #Other Income description and amount entry into the bill.
                    context['other_income_desc_first_month']=other_income_desc_first_month
                if other_income_amount_first_month != '':
                    context['total13']=other_income_amount_first_month
                    eles_kcc1.append(int(other_income_amount_first_month))
                else:
                    context['total13']=other_income_total1['amount__sum']
                    eles_kcc1.append(other_income_total1['amount__sum'])
                if other_income_oopl_desc_first_month != '': #Other Income OOPL description and amount entry into the bill.
                    context['other_income_oopl_desc_first_month']=other_income_oopl_desc_first_month
                if other_income_oopl_amount_first_month != '':
                    context['total13_oopl']=other_income_oopl_amount_first_month
                    eles_oopl1.append(int(other_income_oopl_amount_first_month))
                else:
                    context['total13_oopl']=other_income_oopl_total1['amount__sum']
                    eles_oopl1.append(other_income_oopl_total1['amount__sum'])
                if ct_kcc_desc_first_month != '': #CT KCC description and amount entry into the bill.
                    context['ct_kcc_desc_first_month']=ct_kcc_desc_first_month
                if ct_kcc_amount_first_month != '':
                    context['total6']=ct_kcc_amount_first_month
                    kcc_total_exp1.append(int(ct_kcc_amount_first_month))
                else:
                    context['total6']=ct_kcc_total1['amount__sum']
                    kcc_total_exp1.append(ct_kcc_total1['amount__sum'])
                if ct_oopl_desc_first_month != '': #CT OOPL description and amount entry into the bill.
                    context['ct_oopl_desc_first_month']=ct_oopl_desc_first_month
                if ct_oopl_amount_first_month != '':
                    context['total11']=ct_oopl_amount_first_month
                    oopl_total_exp1.append(int(ct_oopl_amount_first_month))
                else:
                    context['total11']=ct_oopl_total1['amount__sum']
                    oopl_total_exp1.append(ct_oopl_total1['amount__sum'])
                if mould_oopl_desc_first_month != '': #Mould OOPL description and amount entry into the bill.
                    context['mould_oopl_desc_first_month']=mould_oopl_desc_first_month
                if mould_oopl_amount_first_month != '':
                    context['total5']=mould_oopl_amount_first_month
                    oopl_total_exp1.append(int(mould_oopl_amount_first_month))
                else:
                    context['total5']=mould_oopl_total1['amount__sum']
                    oopl_total_exp1.append(mould_oopl_total1['amount__sum'])
                if mould_kcc_desc_first_month != '': #Mould KCC description and amount entry into the bill.
                    context['mould_kcc_desc_first_month']=mould_kcc_desc_first_month
                if mould_kcc_amount_first_month != '':
                    context['total12']=mould_kcc_amount_first_month
                    kcc_total_exp1.append(int(mould_kcc_amount_first_month))
                else:
                    context['total12']=mould_kcc_total1['amount__sum']
                    kcc_total_exp1.append(mould_kcc_total1['amount__sum'])
                if com_exp_kcc1: #Common Expenses KCC
                    context['com_exp_kcc1']=com_exp_kcc1
                    kcc_total_exp1.append(com_exp_kcc_total1['amount__sum'])
                if com_exp_oopl1: #Common Expenses OOPL
                    context['com_exp_oopl1']=com_exp_oopl1
                    oopl_total_exp1.append(com_exp_oopl_total1['amount__sum'])
                if additional_income_desc_first_month != '': #Additional Income KCC description and amount entry into the bill.
                    context['additional_income_desc_first_month']=additional_income_desc_first_month
                if additional_income_oopl_desc_first_month != '': #Additional Income OOPL description and amount entry into the bill.
                    context['additional_income_oopl_desc_first_month']=additional_income_oopl_desc_first_month
                if kcc_share_add_in1_first_month != '':
                    if additional_income_total1['amount__sum']:
                        k_kcc=int(kcc_share_add_in1_first_month)
                        context['k_kcc']=k_kcc
                        o_kcc=100-k_kcc
                        context['o_kcc']=o_kcc
                        kcc_add_in_kcc=additional_income_total1['amount__sum']*k_kcc/100
                        print('1. kcc_add_in_kcc ka value: ', kcc_add_in_kcc)
                        context['kcc_add_in_kcc']=kcc_add_in_kcc
                        oopl_add_in_kcc=additional_income_total1['amount__sum']*o_kcc/100
                        print('1. oopl_add_in_kcc ka value: ', oopl_add_in_kcc)
                        context['oopl_add_in_kcc']=oopl_add_in_kcc
                        context['additional_income_total1']=additional_income_total1['amount__sum']
                else:
                    if additional_income_total1['amount__sum']:
                        kcc_add_in_kcc=additional_income_total1['amount__sum']*50/100
                        print('2. kcc_add_in_kcc ka value: ', kcc_add_in_kcc)
                        context['kcc_add_in_kcc']=kcc_add_in_kcc
                        oopl_add_in_kcc=additional_income_total1['amount__sum']*50/100
                        print('2. oopl_add_in_kcc ka value: ', oopl_add_in_kcc)
                        context['oopl_add_in_kcc']=oopl_add_in_kcc
                        context['additional_income_total1']=additional_income_total1['amount__sum']
                if kcc_share_add_in2_first_month != '':
                    if additional_income_oopl_total1['amount__sum']:
                        k_oopl=int(kcc_share_add_in2_first_month)
                        context['k_oopl']=k_oopl
                        o_oopl=100-k_oopl
                        context['o_oopl']=o_oopl
                        kcc_add_in_oopl=additional_income_oopl_total1['amount__sum']*k_oopl/100
                        print('1. kcc_add_in_oopl ka value: ', kcc_add_in_oopl)
                        context['kcc_add_in_oopl']=kcc_add_in_oopl
                        oopl_add_in_oopl=additional_income_oopl_total1['amount__sum']*o_oopl/100
                        print('1. oopl_add_in_oopl ka value: ', oopl_add_in_oopl)
                        context['oopl_add_in_oopl']=oopl_add_in_oopl
                        context['additional_income_oopl_total1']=additional_income_oopl_total1['amount__sum']
                else:
                    if additional_income_oopl_total1['amount__sum']:
                        kcc_add_in_oopl=additional_income_oopl_total1['amount__sum']*50/100
                        print('2. kcc_add_in_oopl ka value: ', kcc_add_in_oopl)
                        context['kcc_add_in_oopl']=kcc_add_in_oopl
                        oopl_add_in_oopl=additional_income_oopl_total1['amount__sum']*50/100
                        print('2. oopl_add_in_oopl ka value: ', oopl_add_in_oopl)
                        context['oopl_add_in_oopl']=oopl_add_in_oopl
                        context['additional_income_oopl_total1']=additional_income_oopl_total1['amount__sum']
                if other_expenses_desc_first_month != '': #Other Expenses KCC description and amount entry into the bill.
                    context['other_expenses_desc_first_month']=other_expenses_desc_first_month
                if other_expenses_oopl_desc_first_month != '': #Other Expenses OOPL description and amount entry into the bill.
                    context['other_expenses_oopl_desc_first_month']=other_expenses_oopl_desc_first_month
                if kcc_share_other_expenses1_first_month != '':
                    if other_expenses_total1['amount__sum']:
                        k_kcc_ot=int(kcc_share_other_expenses1_first_month)
                        context['k_kcc_ot']=k_kcc_ot
                        o_kcc_ot=100-k_kcc_ot
                        context['o_kcc_ot']=o_kcc_ot
                        kcc_ot_exp_kcc=other_expenses_total1['amount__sum']*k_kcc_ot/100
                        print('1. kcc_ot_exp_kcc ka value: ', kcc_ot_exp_kcc)
                        context['kcc_ot_exp_kcc']=kcc_ot_exp_kcc
                        oopl_ot_exp_kcc=other_expenses_total1['amount__sum']*o_kcc_ot/100
                        print('1. oopl_ot_exp_kcc ka value: ', oopl_ot_exp_kcc)
                        context['oopl_ot_exp_kcc']=oopl_ot_exp_kcc
                        context['other_expenses_total1']=other_expenses_total1['amount__sum']
                else:
                    if other_expenses_total1['amount__sum']:
                        kcc_ot_exp_kcc=other_expenses_total1['amount__sum']*50/100
                        print('2. kcc_ot_exp_kcc ka value: ', kcc_ot_exp_kcc)
                        context['kcc_ot_exp_kcc']=kcc_ot_exp_kcc
                        oopl_ot_exp_kcc=other_expenses_total1['amount__sum']*50/100
                        print('2. oopl_ot_exp_kcc ka value: ', oopl_ot_exp_kcc)
                        context['oopl_ot_exp_kcc']=oopl_ot_exp_kcc
                        context['other_expenses_total1']=other_expenses_total1['amount__sum']
                if kcc_share_other_expenses2_first_month != '':
                    if other_expenses_oopl_total1['amount__sum']:
                        k_oopl_ot=int(kcc_share_other_expenses2_first_month)
                        context['k_oopl_ot']=k_oopl_ot
                        o_oopl_ot=100-k_oopl_ot
                        context['o_oopl_ot']=o_oopl_ot
                        kcc_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*k_oopl_ot/100
                        print('1. kcc_ot_exp_oopl ka value: ', kcc_ot_exp_oopl)
                        context['kcc_ot_exp_oopl']=kcc_ot_exp_oopl
                        oopl_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*o_oopl_ot/100
                        print('1. oopl_ot_exp_oopl ka value: ', oopl_ot_exp_oopl)
                        context['oopl_ot_exp_oopl']=oopl_ot_exp_oopl
                        context['other_expenses_oopl_total1']=other_expenses_oopl_total1['amount__sum']
                else:
                    if other_expenses_oopl_total1['amount__sum']:
                        kcc_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*50/100
                        print('2. kcc_ot_exp_oopl ka value: ', kcc_ot_exp_oopl)
                        context['kcc_ot_exp_oopl']=kcc_ot_exp_oopl
                        oopl_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*50/100
                        print('2. oopl_ot_exp_oopl ka value: ', oopl_ot_exp_oopl)
                        context['oopl_ot_exp_oopl']=oopl_ot_exp_oopl
                        context['other_expenses_oopl_total1']=other_expenses_oopl_total1['amount__sum']
                #2nd Month
                if rt_cash_desc_second_month != '': #RT Cash description and amount entry into the bill.
                    context['rt_cash_desc_second_month_second']=rt_cash_desc_second_month
                if rt_cash_amount_second_month != '':
                    context['total1_second']=rt_cash_amount_second_month
                    eles_kcc2.append(int(rt_cash_amount_second_month))
                else:
                    context['total1_second']=rt_cash_total2['realization__amount_received__sum']
                    eles_kcc2.append(rt_cash_total2['realization__amount_received__sum'])
                if rt_cash_oopl_desc_second_month != '': #RT Cash OOPL description and amount entry into the bill.
                    context['rt_cash_oopl_desc_second_month_second']=rt_cash_oopl_desc_second_month
                if rt_cash_oopl_amount_second_month != '':
                    context['total1_oopl_second']=rt_cash_oopl_amount_second_month
                    eles_oopl2.append(int(rt_cash_oopl_amount_second_month))
                else:
                    context['total1_oopl_second']=rt_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl2.append(rt_cash_oopl_total['realization__amount_received__sum'])
                if partial_cash_desc_second_month != '': #Partial Cash description and amount entry into the bill.
                    context['partial_cash_desc_second_month_second']=partial_cash_desc_second_month
                if partial_cash_amount_second_month != '':
                    context['total2_second']=partial_cash_amount_second_month
                    eles_kcc2.append(int(partial_cash_amount_second_month))
                else:
                    context['total2_second']=partial_cash_total2['realization__amount_received__sum']
                    eles_kcc2.append(partial_cash_total2['realization__amount_received__sum'])
                if partial_cash_oopl_desc_second_month != '': #Partial Cash OOPL description and amount entry into the bill.
                    context['partial_cash_oopl_desc_second_month_second']=partial_cash_oopl_desc_second_month
                if partial_cash_oopl_amount_second_month != '':
                    context['total2_oopl_second']=partial_cash_oopl_amount_second_month
                    eles_oopl2.append(int(partial_cash_oopl_amount_second_month))
                else:
                    context['total2_oopl_second']=partial_cash_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(partial_cash_oopl_total2['realization__amount_received__sum'])
                if mjpjay_desc_second_month != '': #MJPJAY description and amount entry into the bill.
                    context['mjpjay_desc_second_month_second']=mjpjay_desc_second_month
                if mjpjay_amount_second_month != '':
                    context['total3_second']=mjpjay_amount_second_month
                    eles_kcc2.append(int(mjpjay_amount_second_month))
                else:
                    context['total3_second']=mjpjay_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(mjpjay_realized_total2['realization__amount_received__sum'])
                if mjpjay_oopl_desc_second_month != '': #MJPJAY OOPL description and amount entry into the bill.
                    context['mjpjay_oopl_desc_second_month_second']=mjpjay_oopl_desc_second_month
                if mjpjay_oopl_amount_second_month != '':
                    context['total3_oopl_second']=mjpjay_oopl_amount_second_month
                    eles_oopl2.append(int(mjpjay_oopl_amount_second_month))
                else:
                    context['total3_oopl_second']=mjpjay_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(mjpjay_realized_oopl_total2['realization__amount_received__sum'])
                if pmjay_desc_second_month != '': #PMJAY description and amount entry into the bill.
                    context['pmjay_desc_second_month_second']=pmjay_desc_second_month
                if pmjay_amount_second_month != '':
                    context['total4_second']=pmjay_amount_second_month
                    eles_kcc2.append(int(pmjay_amount_second_month))
                else:
                    context['total4_second']=pmjay_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(pmjay_realized_total2['realization__amount_received__sum'])
                if pmjay_oopl_desc_second_month != '': #PMJAY OOPL description and amount entry into the bill.
                    context['pmjay_oopl_desc_second_month_second']=pmjay_oopl_desc_second_month
                if pmjay_oopl_amount_second_month != '':
                    context['total4_oopl_second']=pmjay_oopl_amount_second_month
                    eles_oopl2.append(int(pmjay_oopl_amount_second_month))
                else:
                    context['total4_oopl_second']=pmjay_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(pmjay_realized_oopl_total2['realization__amount_received__sum'])
                if police_file_desc_second_month != '': #Police File description and amount entry into the bill.
                    context['police_file_desc_second_month_second']=police_file_desc_second_month
                if police_file_amount_second_month != '':
                    context['total7_second']=police_file_amount_second_month
                    eles_kcc2.append(int(police_file_amount_second_month))
                else:
                    context['total7_second']=police_file_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(police_file_realized_total2['realization__amount_received__sum'])
                if police_file_oopl_desc_second_month != '': #Police File OOPL description and amount entry into the bill.
                    context['police_file_oopl_desc_second_month_second']=police_file_oopl_desc_second_month
                if police_file_oopl_amount_second_month != '':
                    context['total7_oopl_second']=police_file_oopl_amount_second_month
                    eles_oopl2.append(int(police_file_oopl_amount_second_month))
                else:
                    context['total7_oopl_second']=police_file_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(police_file_realized_oopl_total2['realization__amount_received__sum'])
                if insurance_desc_second_month != '': #Insurance description and amount entry into the bill.
                    context['insurance_desc_second_month_second']=insurance_desc_second_month
                if insurance_amount_second_month != '':
                    context['total8_second']=insurance_amount_second_month
                    eles_kcc2.append(int(insurance_amount_second_month))
                else:
                    context['total8_second']=insurance_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(insurance_realized_total2['realization__amount_received__sum'])
                if insurance_oopl_desc_second_month != '': #Insurance OOPL description and amount entry into the bill.
                    context['insurance_oopl_desc_second_month_second']=insurance_oopl_desc_second_month
                if insurance_oopl_amount_second_month != '':
                    context['total8_oopl_second']=insurance_oopl_amount_second_month
                    eles_oopl2.append(int(insurance_oopl_amount_second_month))
                else:
                    context['total8_oopl_second']=insurance_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(insurance_realized_oopl_total2['realization__amount_received__sum'])
                if other_income_desc_second_month != '': #Other Income description and amount entry into the bill.
                    context['other_income_desc_second_month_second']=other_income_desc_second_month
                if other_income_amount_second_month != '':
                    context['total13_second']=other_income_amount_second_month
                    eles_kcc2.append(int(other_income_amount_second_month))
                else:
                    context['total13_second']=other_income_total2['amount__sum']
                    eles_kcc2.append(other_income_total2['amount__sum'])
                if other_income_oopl_desc_second_month != '': #Other Income OOPL description and amount entry into the bill.
                    context['other_income_oopl_desc_second_month_second']=other_income_oopl_desc_second_month
                if other_income_oopl_amount_second_month != '':
                    context['total13_oopl_second']=other_income_oopl_amount_second_month
                    eles_oopl2.append(int(other_income_oopl_amount_second_month))
                else:
                    context['total13_oopl_second']=other_income_oopl_total2['amount__sum']
                    eles_oopl2.append(other_income_oopl_total2['amount__sum'])
                if ct_kcc_desc_second_month != '': #CT KCC description and amount entry into the bill.
                    context['ct_kcc_desc_second_month_second']=ct_kcc_desc_second_month
                if ct_kcc_amount_second_month != '':
                    context['total6_second']=ct_kcc_amount_second_month
                    kcc_total_exp2.append(int(ct_kcc_amount_second_month))
                else:
                    context['total6_second']=ct_kcc_total2['amount__sum']
                    kcc_total_exp2.append(ct_kcc_total2['amount__sum'])
                if ct_oopl_desc_second_month != '': #CT OOPL description and amount entry into the bill.
                    context['ct_oopl_desc_second_month_second']=ct_oopl_desc_second_month
                if ct_oopl_amount_second_month != '':
                    context['total11_second']=ct_oopl_amount_second_month
                    oopl_total_exp2.append(int(ct_oopl_amount_second_month))
                else:
                    context['total11_second']=ct_oopl_total2['amount__sum']
                    oopl_total_exp2.append(ct_oopl_total2['amount__sum'])
                if mould_oopl_desc_second_month != '': #Mould OOPL description and amount entry into the bill.
                    context['mould_oopl_desc_second_month_second']=mould_oopl_desc_second_month
                if mould_oopl_amount_second_month != '':
                    context['total5_second']=mould_oopl_amount_second_month
                    oopl_total_exp2.append(int(mould_oopl_amount_second_month))
                else:
                    context['total5_second']=mould_oopl_total2['amount__sum']
                    oopl_total_exp2.append(mould_oopl_total2['amount__sum'])
                if mould_kcc_desc_second_month != '': #Mould KCC description and amount entry into the bill.
                    context['mould_kcc_desc_second_month_second']=mould_kcc_desc_second_month
                if mould_kcc_amount_second_month != '':
                    context['total12_second']=mould_kcc_amount_second_month
                    kcc_total_exp2.append(int(mould_kcc_amount_second_month))
                else:
                    context['total12_second']=mould_kcc_total2['amount__sum']
                    kcc_total_exp2.append(mould_kcc_total2['amount__sum'])
                if com_exp_kcc2: #Common Expenses KCC
                    context['com_exp_kcc_second']=com_exp_kcc2
                    kcc_total_exp2.append(com_exp_kcc_total2['amount__sum'])
                if com_exp_oopl2: #Common Expenses OOPL
                    context['com_exp_oopl_second']=com_exp_oopl2
                    oopl_total_exp2.append(com_exp_oopl_total2['amount__sum'])
                if additional_income_desc_second_month != '': #Additional Income KCC description and amount entry into the bill.
                    context['additional_income_desc_second_month_second']=additional_income_desc_second_month
                if additional_income_oopl_desc_second_month != '': #Additional Income OOPL description and amount entry into the bill.
                    context['additional_income_oopl_desc_second_month_second']=additional_income_oopl_desc_second_month
                if kcc_share_add_in1_second_month != '':
                    if additional_income_total2['amount__sum']:
                        k_kcc_second=int(kcc_share_add_in1_second_month)
                        context['k_kcc_second_second']=k_kcc_second
                        o_kcc_second=100-k_kcc_second
                        context['o_kcc_second_second']=o_kcc_second
                        kcc_add_in_kcc_second=additional_income_total2['amount__sum']*k_kcc_second/100
                        print('1. kcc_add_in_kcc_second ka value: ', kcc_add_in_kcc_second)
                        context['kcc_add_in_kcc_second_second']=kcc_add_in_kcc_second
                        oopl_add_in_kcc_second=additional_income_total2['amount__sum']*o_kcc_second/100
                        print('1. oopl_add_in_kcc_second ka value: ', oopl_add_in_kcc_second)
                        context['oopl_add_in_kcc_second_second']=oopl_add_in_kcc_second
                        context['additional_income_total2_second']=additional_income_total2['amount__sum']
                else:
                    if additional_income_total2['amount__sum']:
                        kcc_add_in_kcc_second=additional_income_total2['amount__sum']*50/100
                        print('2. kcc_add_in_kcc_second ka value: ', kcc_add_in_kcc_second)
                        context['kcc_add_in_kcc_second_second']=kcc_add_in_kcc_second
                        oopl_add_in_kcc_second=additional_income_total2['amount__sum']*50/100
                        print('2. oopl_add_in_kcc_second ka value: ', oopl_add_in_kcc_second)
                        context['oopl_add_in_kcc_second_second']=oopl_add_in_kcc_second
                        context['additional_income_total2_second']=additional_income_total2['amount__sum']
                if kcc_share_add_in2_second_month != '':
                    if additional_income_oopl_total2['amount__sum']:
                        k_oopl_second=int(kcc_share_add_in2_second_month)
                        context['k_oopl_second_second']=k_oopl_second
                        o_oopl_second=100-k_oopl_second
                        context['o_oopl_second_second']=o_oopl_second
                        kcc_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*k_oopl_second/100
                        print('1. kcc_add_in_oopl_second ka value: ', kcc_add_in_oopl_second)
                        context['kcc_add_in_oopl_second_second']=kcc_add_in_oopl_second
                        oopl_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*o_oopl_second/100
                        print('1. oopl_add_in_oopl_second ka value: ', oopl_add_in_oopl_second)
                        context['oopl_add_in_oopl_second_second']=oopl_add_in_oopl_second
                        context['additional_income_oopl_total2_second']=additional_income_oopl_total2['amount__sum']
                else:
                    if additional_income_oopl_total2['amount__sum']:
                        kcc_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*50/100
                        print('2. kcc_add_in_oopl_second ka value: ', kcc_add_in_oopl_second)
                        context['kcc_add_in_oopl_second_second']=kcc_add_in_oopl_second
                        oopl_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*50/100
                        print('2. oopl_add_in_oopl_second ka value: ', oopl_add_in_oopl_second)
                        context['oopl_add_in_oopl_second_second']=oopl_add_in_oopl_second
                        context['additional_income_oopl_total2_second']=additional_income_oopl_total2['amount__sum']
                if other_expenses_desc_second_month != '': #Other Expenses KCC description and amount entry into the bill.
                    context['other_expenses_desc_second_month_second']=other_expenses_desc_second_month
                if other_expenses_oopl_desc_second_month != '': #Other Expenses OOPL description and amount entry into the bill.
                    context['other_expenses_oopl_desc_second_month_second']=other_expenses_oopl_desc_second_month
                if kcc_share_other_expenses1_second_month != '':
                    if other_expenses_total2['amount__sum']:
                        k_kcc_second_ot_second=int(kcc_share_other_expenses1_second_month)
                        context['k_kcc_second_ot_second_second']=k_kcc_second_ot_second
                        o_kcc_second_ot_second=100-k_kcc_second_ot_second
                        context['o_kcc_second_ot_second_second']=o_kcc_second_ot_second
                        kcc_ot_exp_kcc_second=other_expenses_total2['amount__sum']*k_kcc_second_ot_second/100
                        print('1. kcc_ot_exp_kcc_second ka value: ', kcc_ot_exp_kcc_second)
                        context['kcc_ot_exp_kcc_second_second']=kcc_ot_exp_kcc_second
                        oopl_ot_exp_kcc_second=other_expenses_total2['amount__sum']*o_kcc_second_ot_second/100
                        print('1. oopl_ot_exp_kcc_second ka value: ', oopl_ot_exp_kcc_second)
                        context['oopl_ot_exp_kcc_second_second']=oopl_ot_exp_kcc_second
                        context['other_expenses_total2_second']=other_expenses_total2['amount__sum']
                else:
                    if other_expenses_total2['amount__sum']:
                        kcc_ot_exp_kcc_second=other_expenses_total2['amount__sum']*50/100
                        print('2. kcc_ot_exp_kcc_second ka value: ', kcc_ot_exp_kcc_second)
                        context['kcc_ot_exp_kcc_second_second']=kcc_ot_exp_kcc_second
                        oopl_ot_exp_kcc_second=other_expenses_total2['amount__sum']*50/100
                        print('2. oopl_ot_exp_kcc_second ka value: ', oopl_ot_exp_kcc_second)
                        context['oopl_ot_exp_kcc_second_second']=oopl_ot_exp_kcc_second
                        context['other_expenses_total2_second']=other_expenses_total2['amount__sum']
                if kcc_share_other_expenses2_second_month != '':
                    if other_expenses_oopl_total2['amount__sum']:
                        k_oopl_second_ot_second=int(kcc_share_other_expenses2_second_month)
                        context['k_oopl_second_ot_second_second']=k_oopl_second_ot_second
                        o_oopl_second_ot_second=100-k_oopl_second_ot_second
                        context['o_oopl_second_ot_second_second']=o_oopl_second_ot_second
                        kcc_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*k_oopl_second_ot_second/100
                        print('1. kcc_ot_exp_oopl_second ka value: ', kcc_ot_exp_oopl_second)
                        context['kcc_ot_exp_oopl_second_second']=kcc_ot_exp_oopl_second
                        oopl_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*o_oopl_second_ot_second/100
                        print('1. oopl_ot_exp_oopl_second ka value: ', oopl_ot_exp_oopl_second)
                        context['oopl_ot_exp_oopl_second_second']=oopl_ot_exp_oopl_second
                        context['other_expenses_oopl_total2_second']=other_expenses_oopl_total2['amount__sum']
                else:
                    if other_expenses_oopl_total2['amount__sum']:
                        kcc_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*50/100
                        print('2. kcc_ot_exp_oopl_second ka value: ', kcc_ot_exp_oopl_second)
                        context['kcc_ot_exp_oopl_second_second']=kcc_ot_exp_oopl_second
                        oopl_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*50/100
                        print('2. oopl_ot_exp_oopl_second ka value: ', oopl_ot_exp_oopl_second)
                        context['oopl_ot_exp_oopl_second_second']=oopl_ot_exp_oopl_second
                        context['other_expenses_oopl_total2_second']=other_expenses_oopl_total2['amount__sum']
                #3rd Month
                if rt_cash_desc_third_month != '': #RT Cash description and amount entry into the bill.
                    context['rt_cash_desc_third_month_third']=rt_cash_desc_third_month
                if rt_cash_amount_third_month != '':
                    context['total1_third']=rt_cash_amount_third_month
                    eles_kcc3.append(int(rt_cash_amount_third_month))
                else:
                    context['total1_third']=rt_cash_total3['realization__amount_received__sum']
                    eles_kcc3.append(rt_cash_total3['realization__amount_received__sum'])
                if rt_cash_oopl_desc_third_month != '': #RT Cash OOPL description and amount entry into the bill.
                    context['rt_cash_oopl_desc_third_month_third']=rt_cash_oopl_desc_third_month
                if rt_cash_oopl_amount_third_month != '':
                    context['total1_oopl_third']=rt_cash_oopl_amount_third_month
                    eles_oopl3.append(int(rt_cash_oopl_amount_third_month))
                else:
                    context['total1_oopl_third']=rt_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl3.append(rt_cash_oopl_total['realization__amount_received__sum'])
                if partial_cash_desc_third_month != '': #Partial Cash description and amount entry into the bill.
                    context['partial_cash_desc_third_month_third']=partial_cash_desc_third_month
                if partial_cash_amount_third_month != '':
                    context['total2_third']=partial_cash_amount_third_month
                    eles_kcc3.append(int(partial_cash_amount_third_month))
                else:
                    context['total2_third']=partial_cash_total3['realization__amount_received__sum']
                    eles_kcc3.append(partial_cash_total3['realization__amount_received__sum'])
                if partial_cash_oopl_desc_third_month != '': #Partial Cash OOPL description and amount entry into the bill.
                    context['partial_cash_oopl_desc_third_month_third']=partial_cash_oopl_desc_third_month
                if partial_cash_oopl_amount_third_month != '':
                    context['total2_oopl_third']=partial_cash_oopl_amount_third_month
                    eles_oopl3.append(int(partial_cash_oopl_amount_third_month))
                else:
                    context['total2_oopl_third']=partial_cash_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(partial_cash_oopl_total3['realization__amount_received__sum'])
                if mjpjay_desc_third_month != '': #MJPJAY description and amount entry into the bill.
                    context['mjpjay_desc_third_month_third']=mjpjay_desc_third_month
                if mjpjay_amount_third_month != '':
                    context['total3_third']=mjpjay_amount_third_month
                    eles_kcc3.append(int(mjpjay_amount_third_month))
                else:
                    context['total3_third']=mjpjay_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(mjpjay_realized_total3['realization__amount_received__sum'])
                if mjpjay_oopl_desc_third_month != '': #MJPJAY OOPL description and amount entry into the bill.
                    context['mjpjay_oopl_desc_third_month_third']=mjpjay_oopl_desc_third_month
                if mjpjay_oopl_amount_third_month != '':
                    context['total3_oopl_third']=mjpjay_oopl_amount_third_month
                    eles_oopl3.append(int(mjpjay_oopl_amount_third_month))
                else:
                    context['total3_oopl_third']=mjpjay_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(mjpjay_realized_oopl_total3['realization__amount_received__sum'])
                if pmjay_desc_third_month != '': #PMJAY description and amount entry into the bill.
                    context['pmjay_desc_third_month_third']=pmjay_desc_third_month
                if pmjay_amount_third_month != '':
                    context['total4_third']=pmjay_amount_third_month
                    eles_kcc3.append(int(pmjay_amount_third_month))
                else:
                    context['total4_third']=pmjay_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(pmjay_realized_total3['realization__amount_received__sum'])
                if pmjay_oopl_desc_third_month != '': #PMJAY OOPL description and amount entry into the bill.
                    context['pmjay_oopl_desc_third_month_third']=pmjay_oopl_desc_third_month
                if pmjay_oopl_amount_third_month != '':
                    context['total4_oopl_third']=pmjay_oopl_amount_third_month
                    eles_oopl3.append(int(pmjay_oopl_amount_third_month))
                else:
                    context['total4_oopl_third']=pmjay_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(pmjay_realized_oopl_total3['realization__amount_received__sum'])
                if police_file_desc_third_month != '': #Police File description and amount entry into the bill.
                    context['police_file_desc_third_month_third']=police_file_desc_third_month
                if police_file_amount_third_month != '':
                    context['total7_third']=police_file_amount_third_month
                    eles_kcc3.append(int(police_file_amount_third_month))
                else:
                    context['total7_third']=police_file_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(police_file_realized_total3['realization__amount_received__sum'])
                if police_file_oopl_desc_third_month != '': #Police File OOPL description and amount entry into the bill.
                    context['police_file_oopl_desc_third_month_third']=police_file_oopl_desc_third_month
                if police_file_oopl_amount_third_month != '':
                    context['total7_oopl_third']=police_file_oopl_amount_third_month
                    eles_oopl3.append(int(police_file_oopl_amount_third_month))
                else:
                    context['total7_oopl_third']=police_file_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(police_file_realized_oopl_total3['realization__amount_received__sum'])
                if insurance_desc_third_month != '': #Insurance description and amount entry into the bill.
                    context['insurance_desc_third_month_third']=insurance_desc_third_month
                if insurance_amount_third_month != '':
                    context['total8_third']=insurance_amount_third_month
                    eles_kcc3.append(int(insurance_amount_third_month))
                else:
                    context['total8_third']=insurance_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(insurance_realized_total3['realization__amount_received__sum'])
                if insurance_oopl_desc_third_month != '': #Insurance OOPL description and amount entry into the bill.
                    context['insurance_oopl_desc_third_month_third']=insurance_oopl_desc_third_month
                if insurance_oopl_amount_third_month != '':
                    context['total8_oopl_third']=insurance_oopl_amount_third_month
                    eles_oopl3.append(int(insurance_oopl_amount_third_month))
                else:
                    context['total8_oopl_third']=insurance_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(insurance_realized_oopl_total3['realization__amount_received__sum'])
                if other_income_desc_third_month != '': #Other Income description and amount entry into the bill.
                    context['other_income_desc_third_month_third']=other_income_desc_third_month
                if other_income_amount_third_month != '':
                    context['total13_third']=other_income_amount_third_month
                    eles_kcc3.append(int(other_income_amount_third_month))
                else:
                    context['total13_third']=other_income_total3['amount__sum']
                    eles_kcc3.append(other_income_total3['amount__sum'])
                if other_income_oopl_desc_third_month != '': #Other Income OOPL description and amount entry into the bill.
                    context['other_income_oopl_desc_third_month_third']=other_income_oopl_desc_third_month
                if other_income_oopl_amount_third_month != '':
                    context['total13_oopl_third']=other_income_oopl_amount_third_month
                    eles_oopl3.append(int(other_income_oopl_amount_third_month))
                else:
                    context['total13_oopl_third']=other_income_oopl_total3['amount__sum']
                    eles_oopl3.append(other_income_oopl_total3['amount__sum'])
                if ct_kcc_desc_third_month != '': #CT KCC description and amount entry into the bill.
                    context['ct_kcc_desc_third_month_third']=ct_kcc_desc_third_month
                if ct_kcc_amount_third_month != '':
                    context['total6_third']=ct_kcc_amount_third_month
                    kcc_total_exp3.append(int(ct_kcc_amount_third_month))
                else:
                    context['total6_third']=ct_kcc_total3['amount__sum']
                    kcc_total_exp3.append(ct_kcc_total3['amount__sum'])
                if ct_oopl_desc_third_month != '': #CT OOPL description and amount entry into the bill.
                    context['ct_oopl_desc_third_month_third']=ct_oopl_desc_third_month
                if ct_oopl_amount_third_month != '':
                    context['total11_third']=ct_oopl_amount_third_month
                    oopl_total_exp3.append(int(ct_oopl_amount_third_month))
                else:
                    context['total11_third']=ct_oopl_total3['amount__sum']
                    oopl_total_exp3.append(ct_oopl_total3['amount__sum'])
                if mould_oopl_desc_third_month != '': #Mould OOPL description and amount entry into the bill.
                    context['mould_oopl_desc_third_month_third']=mould_oopl_desc_third_month
                if mould_oopl_amount_third_month != '':
                    context['total5_third']=mould_oopl_amount_third_month
                    oopl_total_exp3.append(int(mould_oopl_amount_third_month))
                else:
                    context['total5_third']=mould_oopl_total3['amount__sum']
                    oopl_total_exp3.append(mould_oopl_total3['amount__sum'])
                if mould_kcc_desc_third_month != '': #Mould KCC description and amount entry into the bill.
                    context['mould_kcc_desc_third_month_third']=mould_kcc_desc_third_month
                if mould_kcc_amount_third_month != '':
                    context['total12_third']=mould_kcc_amount_third_month
                    kcc_total_exp3.append(int(mould_kcc_amount_third_month))
                else:
                    context['total12_third']=mould_kcc_total3['amount__sum']
                    kcc_total_exp3.append(mould_kcc_total3['amount__sum'])
                if com_exp_kcc3: #Common Expenses KCC
                    context['com_exp_kcc_third']=com_exp_kcc3
                    kcc_total_exp3.append(com_exp_kcc_total3['amount__sum'])
                if com_exp_oopl3: #Common Expenses OOPL
                    context['com_exp_oopl_third']=com_exp_oopl3
                    oopl_total_exp3.append(com_exp_oopl_total3['amount__sum'])
                if additional_income_desc_third_month != '': #Additional Income KCC description and amount entry into the bill.
                    context['additional_income_desc_third_month_third']=additional_income_desc_third_month
                if additional_income_oopl_desc_third_month != '': #Additional Income OOPL description and amount entry into the bill.
                    context['additional_income_oopl_desc_third_month_third']=additional_income_oopl_desc_third_month
                if kcc_share_add_in1_third_month != '':
                    if additional_income_total3['amount__sum']:
                        k_kcc_third=int(kcc_share_add_in1_third_month)
                        context['k_kcc_third_third']=k_kcc_third
                        o_kcc_third=100-k_kcc_third
                        context['o_kcc_third_third']=o_kcc_third
                        kcc_add_in_kcc_third=additional_income_total3['amount__sum']*k_kcc_third/100
                        print('1. kcc_add_in_kcc_third ka value: ', kcc_add_in_kcc_third)
                        context['kcc_add_in_kcc_third_third']=kcc_add_in_kcc_third
                        oopl_add_in_kcc_third=additional_income_total3['amount__sum']*o_kcc_third/100
                        print('1. oopl_add_in_kcc_third ka value: ', oopl_add_in_kcc_third)
                        context['oopl_add_in_kcc_third_third']=oopl_add_in_kcc_third
                        context['additional_income_total3_third']=additional_income_total3['amount__sum']
                else:
                    if additional_income_total3['amount__sum']:
                        kcc_add_in_kcc_third=additional_income_total3['amount__sum']*50/100
                        print('2. kcc_add_in_kcc_third ka value: ', kcc_add_in_kcc_third)
                        context['kcc_add_in_kcc_third_third']=kcc_add_in_kcc_third
                        oopl_add_in_kcc_third=additional_income_total3['amount__sum']*50/100
                        print('2. oopl_add_in_kcc_third ka value: ', oopl_add_in_kcc_third)
                        context['oopl_add_in_kcc_third_third']=oopl_add_in_kcc_third
                        context['additional_income_total3_third']=additional_income_total3['amount__sum']
                if kcc_share_add_in2_third_month != '':
                    if additional_income_oopl_total3['amount__sum']:
                        k_oopl_third=int(kcc_share_add_in2_third_month)
                        context['k_oopl_third_third']=k_oopl_third
                        o_oopl_third=100-k_oopl_third
                        context['o_oopl_third_third']=o_oopl_third
                        kcc_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*k_oopl_third/100
                        print('1. kcc_add_in_oopl_third ka value: ', kcc_add_in_oopl_third)
                        context['kcc_add_in_oopl_third_third']=kcc_add_in_oopl_third
                        oopl_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*o_oopl_third/100
                        print('1. oopl_add_in_oopl_third ka value: ', oopl_add_in_oopl_third)
                        context['oopl_add_in_oopl_third_third']=oopl_add_in_oopl_third
                        context['additional_income_oopl_total3_third']=additional_income_oopl_total3['amount__sum']
                else:
                    if additional_income_oopl_total3['amount__sum']:
                        kcc_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*50/100
                        print('2. kcc_add_in_oopl_third ka value: ', kcc_add_in_oopl_third)
                        context['kcc_add_in_oopl_third_third']=kcc_add_in_oopl_third
                        oopl_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*50/100
                        print('2. oopl_add_in_oopl_third ka value: ', oopl_add_in_oopl_third)
                        context['oopl_add_in_oopl_third_third']=oopl_add_in_oopl_third
                        context['additional_income_oopl_total3_third']=additional_income_oopl_total3['amount__sum']
                if other_expenses_desc_third_month != '': #Other Expenses KCC description and amount entry into the bill.
                    context['other_expenses_desc_third_month_third']=other_expenses_desc_third_month
                if other_expenses_oopl_desc_third_month != '': #Other Expenses OOPL description and amount entry into the bill.
                    context['other_expenses_oopl_desc_third_month_third']=other_expenses_oopl_desc_third_month
                if kcc_share_other_expenses1_third_month != '':
                    if other_expenses_total3['amount__sum']:
                        k_kcc_third_ot_third=int(kcc_share_other_expenses1_third_month)
                        context['k_kcc_third_ot_third_third']=k_kcc_third_ot_third
                        o_kcc_third_ot_third=100-k_kcc_third_ot_third
                        context['o_kcc_third_ot_third_third']=o_kcc_third_ot_third
                        kcc_ot_exp_kcc_third=other_expenses_total3['amount__sum']*k_kcc_third_ot_third/100
                        print('1. kcc_ot_exp_kcc_third ka value: ', kcc_ot_exp_kcc_third)
                        context['kcc_ot_exp_kcc_third_third']=kcc_ot_exp_kcc_third
                        oopl_ot_exp_kcc_third=other_expenses_total3['amount__sum']*o_kcc_third_ot_third/100
                        print('1. oopl_ot_exp_kcc_third ka value: ', oopl_ot_exp_kcc_third)
                        context['oopl_ot_exp_kcc_third_third']=oopl_ot_exp_kcc_third
                        context['other_expenses_total3_third']=other_expenses_total3['amount__sum']
                else:
                    if other_expenses_total3['amount__sum']:
                        kcc_ot_exp_kcc_third=other_expenses_total3['amount__sum']*50/100
                        print('2. kcc_ot_exp_kcc_third ka value: ', kcc_ot_exp_kcc_third)
                        context['kcc_ot_exp_kcc_third_third']=kcc_ot_exp_kcc_third
                        oopl_ot_exp_kcc_third=other_expenses_total3['amount__sum']*50/100
                        print('2. oopl_ot_exp_kcc_third ka value: ', oopl_ot_exp_kcc_third)
                        context['oopl_ot_exp_kcc_third_third']=oopl_ot_exp_kcc_third
                        context['other_expenses_total3_third']=other_expenses_total3['amount__sum']
                if kcc_share_other_expenses2_third_month != '':
                    if other_expenses_oopl_total3['amount__sum']:
                        k_oopl_third_ot_third=int(kcc_share_other_expenses2_third_month)
                        context['k_oopl_third_ot_third_third']=k_oopl_third_ot_third
                        o_oopl_third_ot_third=100-k_oopl_third_ot_third
                        context['o_oopl_third_ot_third_third']=o_oopl_third_ot_third
                        kcc_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*k_oopl_third_ot_third/100
                        print('1. kcc_ot_exp_oopl_third ka value: ', kcc_ot_exp_oopl_third)
                        context['kcc_ot_exp_oopl_third_third']=kcc_ot_exp_oopl_third
                        oopl_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*o_oopl_third_ot_third/100
                        print('1. oopl_ot_exp_oopl_third ka value: ', oopl_ot_exp_oopl_third)
                        context['oopl_ot_exp_oopl_third_third']=oopl_ot_exp_oopl_third
                        context['other_expenses_oopl_total3_third']=other_expenses_oopl_total3['amount__sum']
                else:
                    if other_expenses_oopl_total3['amount__sum']:
                        kcc_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*50/100
                        print('2. kcc_ot_exp_oopl_third ka value: ', kcc_ot_exp_oopl_third)
                        context['kcc_ot_exp_oopl_third_third']=kcc_ot_exp_oopl_third
                        oopl_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*50/100
                        print('2. oopl_ot_exp_oopl_third ka value: ', oopl_ot_exp_oopl_third)
                        context['oopl_ot_exp_oopl_third_third']=oopl_ot_exp_oopl_third
                        context['other_expenses_oopl_total3_third']=other_expenses_oopl_total3['amount__sum']
                print()
                print('iska kya hoga1', eles_kcc1)
                print()
                print('aur iska bhi1', eles_oopl1)
                print()
                print('iska kya hoga2', eles_kcc2)
                print()
                print('aur iska bhi2', eles_oopl2)
                print()
                print('iska kya hoga3', eles_kcc3)
                print()
                print('aur iska bhi3', eles_oopl3)
                tot1=0
                for ele1 in eles_kcc1:
                    if ele1 is not None:
                        tot1+=ele1
                print('tot1 ka value: ', tot1)
                tot1_oopl1=0
                for ele1 in eles_oopl1:
                    if ele1 is not None:
                        tot1_oopl1+=ele1
                print('tot1_oopl1 ka value: ', tot1_oopl1)
                tot_comb1=tot1+tot1_oopl1
                print('tot comb1 ka value ', tot_comb1)
                tot7=0
                for kccexp1 in kcc_total_exp1:
                    if kccexp1 is not None:
                        tot7+=kccexp1
                print('tot7 ka value: ', tot7)
                tot8=0
                for ooplexp1 in oopl_total_exp1:
                    if ooplexp1 is not None:
                        tot8+=ooplexp1
                print('tot8 ka value: ', tot8)
                tot2=tot7+tot8
                print('tot2 ka value: ', tot2)
                tot3=tot_comb1-tot2
                print('tot3 ka value: ', tot3)
                if tot3>=2000000:
                    val1=2000000
                else:
                    val1=tot3
                print('val 1 ka value: ', val1)
                if tot3>=4000000:
                    val2=2000000
                else:
                    if tot3>=2000000:
                        val2=tot3-2000000
                    else:
                        val2=0
                print('val 2 ka value: ', val2)
                if tot3>=6000000:
                    val3=2000000
                else:
                    if tot3>=4000000:
                        val3=tot3-4000000
                    else:
                        val3=0
                print('val 3 ka value: ', val3)
                if tot3>=9000000:
                    val4=3000000
                else:
                    if tot3>=6000000:
                        val4=tot3-6000000
                    else:
                        val4=0
                print('val 4 ka value: ', val4)
                if tot3>=9000000:
                    val5=tot3-9000000
                else:
                    val5=0
                print('val 5 ka value: ', val5)
                tot4=val1+val2+val3+val4+val5
                print('tot4  ka value: ', tot4)
                print('tot4 ka type ka value: ', type(tot4))
                val6=Decimal(val1*10/100)
                val7=Decimal(val2*15/100)
                val8=Decimal(val3*20/100)
                val9=Decimal(val4*30/100)
                val10=Decimal(val5*38/100)
                print('val 6, 7, 8, 9, 10 ka value: ', val6, val7, val8, val9, val10)
                print('val6 ka type value:', type(val6))
                tot5=val6+val7+val8+val9+val10
                print('tot5  ka value: ', tot5)
                val11=val1-val6
                val12=val2-val7
                val13=val3-val8
                val14=val4-val9
                val15=val5-val10
                print('val 11, 12, 13, 14, 15 ka value: ', val11, val12, val13, val14, val15)
                tot6=val11+val12+val13+val14+val15
                print('tot6 ka value: ', tot6)
                tot9=tot5+tot7-tot1
                tot10=tot6+tot8-tot1_oopl1
                print('tot9 ka value: ', tot9)
                print('tot10 ka value: ', tot10)
                kcc_finals1=[]
                oopl_finals1=[]
                kcc_tot1=0
                oopl_tot1=0
                if additional_income_total1['amount__sum']:
                    tot11=tot9-oopl_add_in_kcc
                    tot12=tot10+oopl_add_in_kcc
                    print('1st time tot11 ka value: ', tot11)
                    print('1st time tot12 ka value: ', tot12)
                    context['tot11']=tot11
                    context['tot12']=tot12
                    kcc_tot1=tot11
                    oopl_tot1=tot12
                    kcc_finals1.append(tot11)
                    oopl_finals1.append(tot12)
                    print('kcc ka pehla total: ', kcc_tot1)
                    print('oopl ka pehla total: ', oopl_tot1)
                else:
                    tot11=tot9
                    tot12=tot10
                    print('1st time tot11 ka value: ', tot11)
                    print('1st time tot12 ka value: ', tot12)
                    context['tot11']=tot11
                    context['tot12']=tot12
                    kcc_tot1=tot11
                    oopl_tot1=tot12
                    kcc_finals1.append(tot11)
                    oopl_finals1.append(tot12)
                    print('kcc ka pehla total: ', kcc_tot1)
                    print('oopl ka pehla total: ', oopl_tot1)
                if additional_income_oopl_total1['amount__sum']:
                    tot13=tot11+kcc_add_in_oopl
                    tot14=tot12-kcc_add_in_oopl
                    print('1st time tot13 ka value: ', tot13)
                    print('1st time tot14 ka value: ', tot14)
                    context['tot13']=tot13
                    context['tot14']=tot14
                    kcc_tot1=tot13
                    oopl_tot1=tot14
                    kcc_finals1.append(tot13)
                    oopl_finals1.append(tot14)
                    print('kcc ka doosra total: ', kcc_tot1)
                    print('oopl ka doosra total: ', oopl_tot1)
                else:
                    tot13=tot11
                    tot14=tot12
                    print('1st time tot13 ka value: ', tot13)
                    print('1st time tot14 ka value: ', tot14)
                    context['tot13']=tot13
                    context['tot14']=tot14
                    kcc_tot1=tot13
                    oopl_tot1=tot14
                    kcc_finals1.append(tot13)
                    oopl_finals1.append(tot14)
                    print('kcc ka doosra total: ', kcc_tot1)
                    print('oopl ka doosra total: ', oopl_tot1)
                if other_expenses_total1['amount__sum']:
                    tot15=tot13+oopl_ot_exp_kcc
                    tot16=tot14-oopl_ot_exp_kcc
                    print('1st time tot15 ka value: ', tot15)
                    print('1st time tot16 ka value: ', tot16)
                    context['tot15']=tot15
                    context['tot16']=tot16
                    kcc_tot1=tot15
                    oopl_tot1=tot16
                    kcc_finals1.append(tot15)
                    oopl_finals1.append(tot16)
                    print('kcc ka chautha total: ', kcc_tot1)
                    print('oopl ka chautha total: ', oopl_tot1)
                else:
                    tot15=tot13
                    tot16=tot14
                    print('1st time tot15 ka value: ', tot15)
                    print('1st time tot16 ka value: ', tot16)
                    context['tot15']=tot15
                    context['tot16']=tot16
                    kcc_tot1=tot15
                    oopl_tot1=tot16
                    kcc_finals1.append(tot15)
                    oopl_finals1.append(tot16)
                    print('kcc ka chautha total: ', kcc_tot1)
                    print('oopl ka chautha total: ', oopl_tot1)
                if other_expenses_oopl_total1['amount__sum']:
                    tot17=tot15-kcc_ot_exp_oopl
                    tot18=tot16+kcc_ot_exp_oopl
                    print('1st time tot17 ka value: ', tot17)
                    print('1st time tot18 ka value: ', tot18)
                    context['tot17']=tot17
                    context['tot18']=tot18
                    kcc_tot1=tot17
                    oopl_tot1=tot18
                    kcc_finals1.append(tot17)
                    oopl_finals1.append(tot18)
                    print('kcc ka saatwaan total: ', kcc_tot1)
                    print('oopl ka saatwaan total: ', oopl_tot1)
                else:
                    tot17=tot15
                    tot18=tot16
                    print('1st time tot17 ka value: ', tot17)
                    print('1st time tot18 ka value: ', tot18)
                    context['tot17']=tot17
                    context['tot18']=tot18
                    kcc_tot1=tot17
                    oopl_tot1=tot18
                    kcc_finals1.append(tot17)
                    oopl_finals1.append(tot18)
                    print('kcc ka saatwaan total: ', kcc_tot1)
                    print('oopl ka saatwaan total: ', oopl_tot1)
                if opd1:
                    tot_opd1=opd_total1['opd__amount__sum']
                    context['tot_opd1']=tot_opd1
                else:
                    tot_opd1=0
                print('tot_opd1 ka value: ', tot_opd1)
                tot_opd_kcc1=tot_opd1*20/100
                tot_opd_oopl1=tot_opd1-tot_opd_kcc1
                context['tot_opd_kcc1']=tot_opd_kcc1
                context['tot_opd_oopl1']=tot_opd_oopl1
                tot19=tot17-Decimal(tot_opd_oopl1)
                tot20=tot18+Decimal(tot_opd_oopl1)
                print('1st time tot19 ka value: ', tot19)
                print('1st time tot20 ka value: ', tot20)
                context['tot19']=tot19
                context['tot20']=tot20
                kcc_tot1=tot19
                oopl_tot1=tot20
                kcc_finals1.append(tot19)
                oopl_finals1.append(tot20)
                print('kcc1 ka gyaarahwaan total: ', kcc_tot1)
                print('oopl1 ka gyaarahwaan total: ', oopl_tot1)
                print('kcc finals1 ka value: ', kcc_finals1)
                print('oopl finals1 ka value: ', oopl_finals1)
                print('kcc_tot1 ka value: ', kcc_tot1)
                print('oopl_tot1 ka value: ', oopl_tot1)
                context['kcc_tot1']=kcc_tot1
                context['oopl_tot1']=oopl_tot1
                tds1=oopl_tot1*10/100
                context['tds1']=tds1
                net1=oopl_tot1-tds1
                context['net1']=net1
                final_amount1=net1-tot1_oopl1
                context['final_amount1']=final_amount1
                print('tot_opd1 kcc ka value: ', tot_opd_kcc1)
                print('tot_opd1 oopl ka value: ', tot_opd_oopl1)
                print('tds1 ka value: ', tds1)
                print('net1 ka value: ', net1)
                print('final_amount1 ka value: ', final_amount1)
                context['val1']=val1
                context['val2']=val2
                context['val3']=val3
                context['val4']=val4
                context['val5']=val5
                context['val6']=val6
                context['val7']=val7
                context['val8']=val8
                context['val9']=val9
                context['val10']=val10
                context['val11']=val11
                context['val12']=val12
                context['val13']=val13
                context['val14']=val14
                context['val15']=val15
                context['tot1']=tot1
                context['tot1_oopl1']=tot1_oopl1
                context['tot_comb1']=tot_comb1
                context['tot2']=tot2
                context['tot3']=tot3
                context['tot4']=tot4
                context['tot5']=tot5
                context['tot6']=tot6
                context['tot7']=tot7
                context['tot8']=tot8
                context['tot9']=tot9
                context['tot10']=tot10
                #2nd Month calculations
                tot31=0
                for ele31 in eles_kcc2:
                    if ele31 is not None:
                        tot31+=ele31
                print('tot31 ka value: ', tot31)
                tot1_oopl31=0
                for ele31 in eles_oopl2:
                    if ele31 is not None:
                        tot1_oopl31+=ele31
                print('tot1_oopl31 ka value: ', tot1_oopl31)
                tot_comb31=tot31+tot1_oopl31
                print('tot comb31 ka value ', tot_comb31)
                tot37=0
                for kccexp31 in kcc_total_exp2:
                    if kccexp31 is not None:
                        tot37+=kccexp31
                print('tot37 ka value: ', tot37)
                tot38=0
                for ooplexp31 in oopl_total_exp2:
                    if ooplexp31 is not None:
                        tot38+=ooplexp31
                print('tot38 ka value: ', tot38)
                tot32=tot37+tot38
                print('tot32 ka value: ', tot32)
                tot33=tot_comb31-tot32
                print('tot33 ka value: ', tot33)
                if tot33>=2000000:
                    val16=2000000
                else:
                    val16=tot33
                print('val 1 ka value: ', val16)
                if tot33>=4000000:
                    val17=2000000
                else:
                    if tot33>=2000000:
                        val17=tot33-2000000
                    else:
                        val17=0
                print('val 2 ka value: ', val17)
                if tot33>=6000000:
                    val18=2000000
                else:
                    if tot33>=4000000:
                        val18=tot33-4000000
                    else:
                        val18=0
                print('val 3 ka value: ', val18)
                if tot33>=9000000:
                    val19=3000000
                else:
                    if tot33>=6000000:
                        val19=tot33-6000000
                    else:
                        val19=0
                print('val 4 ka value: ', val19)
                if tot33>=9000000:
                    val20=tot33-9000000
                else:
                    val20=0
                print('val 5 ka value: ', val20)
                tot34=val16+val17+val18+val19+val20
                print('tot34  ka value: ', tot34)
                print('tot34 ka type ka value: ', type(tot34))
                val21=Decimal(val16*10/100)
                val22=Decimal(val17*15/100)
                val23=Decimal(val18*20/100)
                val24=Decimal(val19*30/100)
                val25=Decimal(val20*38/100)
                print('val 6, 7, 8, 9, 10 ka value: ', val21, val22, val23, val24, val25)
                print('val21 ka type value:', type(val21))
                tot35=val21+val22+val23+val24+val25
                print('tot35  ka value: ', tot35)
                val26=val16-val21
                val27=val17-val22
                val28=val18-val23
                val29=val19-val24
                val30=val20-val25
                print('val 11, 12, 13, 14, 15 ka value: ', val26, val27, val28, val29, val30)
                tot36=val26+val27+val28+val29+val30
                print('tot36 ka value: ', tot36)
                tot39=tot35+tot37-tot31
                tot40=tot36+tot38-tot1_oopl31
                print('tot39 ka value: ', tot39)
                print('tot40 ka value: ', tot40)
                kcc_finals31=[]
                oopl_finals31=[]
                kcc_tot31=0
                oopl_tot31=0
                if additional_income_total2['amount__sum']:
                    tot41=tot39-oopl_add_in_kcc_second
                    tot42=tot40+oopl_add_in_kcc_second
                    print('1st time tot41 ka value: ', tot41)
                    print('1st time tot42 ka value: ', tot42)
                    context['tot41']=tot41
                    context['tot42']=tot42
                    kcc_tot31=tot41
                    oopl_tot31=tot42
                    kcc_finals31.append(tot41)
                    oopl_finals31.append(tot42)
                    print('kcc ka pehla total: ', kcc_tot31)
                    print('oopl ka pehla total: ', oopl_tot31)
                else:
                    tot41=tot39
                    tot42=tot40
                    print('1st time tot41 ka value: ', tot41)
                    print('1st time tot42 ka value: ', tot42)
                    context['tot41']=tot41
                    context['tot42']=tot42
                    kcc_tot31=tot41
                    oopl_tot31=tot42
                    kcc_finals31.append(tot41)
                    oopl_finals31.append(tot42)
                    print('kcc ka pehla total: ', kcc_tot31)
                    print('oopl ka pehla total: ', oopl_tot31)
                if additional_income_oopl_total2['amount__sum']:
                    tot43=tot41+kcc_add_in_oopl_second
                    tot44=tot42-kcc_add_in_oopl_second
                    print('1st time tot43 ka value: ', tot43)
                    print('1st time tot44 ka value: ', tot44)
                    context['tot43']=tot43
                    context['tot44']=tot44
                    kcc_tot31=tot43
                    oopl_tot31=tot44
                    kcc_finals31.append(tot43)
                    oopl_finals31.append(tot44)
                    print('kcc ka doosra total: ', kcc_tot31)
                    print('oopl ka doosra total: ', oopl_tot31)
                else:
                    tot43=tot41
                    tot44=tot42
                    print('1st time tot43 ka value: ', tot43)
                    print('1st time tot44 ka value: ', tot44)
                    context['tot43']=tot43
                    context['tot44']=tot44
                    kcc_tot31=tot43
                    oopl_tot31=tot44
                    kcc_finals31.append(tot43)
                    oopl_finals31.append(tot44)
                    print('kcc ka doosra total: ', kcc_tot31)
                    print('oopl ka doosra total: ', oopl_tot31)
                if other_expenses_total2['amount__sum']:
                    tot45=tot43+oopl_ot_exp_kcc_second
                    tot46=tot44-oopl_ot_exp_kcc_second
                    print('1st time tot45 ka value: ', tot45)
                    print('1st time tot46 ka value: ', tot46)
                    context['tot45']=tot45
                    context['tot46']=tot46
                    kcc_tot31=tot45
                    oopl_tot31=tot46
                    kcc_finals31.append(tot45)
                    oopl_finals31.append(tot46)
                    print('kcc ka chautha total: ', kcc_tot31)
                    print('oopl ka chautha total: ', oopl_tot31)
                else:
                    tot45=tot43
                    tot46=tot44
                    print('1st time tot45 ka value: ', tot45)
                    print('1st time tot46 ka value: ', tot46)
                    context['tot45']=tot45
                    context['tot46']=tot46
                    kcc_tot31=tot45
                    oopl_tot31=tot46
                    kcc_finals31.append(tot45)
                    oopl_finals31.append(tot46)
                    print('kcc ka chautha total: ', kcc_tot31)
                    print('oopl ka chautha total: ', oopl_tot31)
                if other_expenses_oopl_total2['amount__sum']:
                    tot47=tot45-kcc_ot_exp_oopl_second
                    tot48=tot46+kcc_ot_exp_oopl_second
                    print('1st time tot47 ka value: ', tot47)
                    print('1st time tot48 ka value: ', tot48)
                    context['tot47']=tot47
                    context['tot48']=tot48
                    kcc_tot31=tot47
                    oopl_tot31=tot48
                    kcc_finals31.append(tot47)
                    oopl_finals31.append(tot48)
                    print('kcc ka saatwaan total: ', kcc_tot31)
                    print('oopl ka saatwaan total: ', oopl_tot31)
                else:
                    tot47=tot45
                    tot48=tot46
                    print('1st time tot47 ka value: ', tot47)
                    print('1st time tot48 ka value: ', tot48)
                    context['tot47']=tot47
                    context['tot48']=tot48
                    kcc_tot31=tot47
                    oopl_tot31=tot48
                    kcc_finals31.append(tot47)
                    oopl_finals31.append(tot48)
                    print('kcc ka saatwaan total: ', kcc_tot31)
                    print('oopl ka saatwaan total: ', oopl_tot31)
                if opd2:
                    tot_opd31=opd_total2['opd__amount__sum']
                    context['tot_opd31']=tot_opd31
                else:
                    tot_opd31=0
                print('tot_opd31 ka value: ', tot_opd31)
                tot_opd_kcc31=tot_opd31*20/100
                tot_opd_oopl31=tot_opd31-tot_opd_kcc31
                context['tot_opd_kcc31']=tot_opd_kcc31
                context['tot_opd_oopl31']=tot_opd_oopl31
                tot49=tot47-Decimal(tot_opd_oopl31)
                tot50=tot48+Decimal(tot_opd_oopl31)
                print('1st time tot49 ka value: ', tot49)
                print('1st time tot50 ka value: ', tot50)
                context['tot49']=tot49
                context['tot50']=tot50
                kcc_tot31=tot49
                oopl_tot31=tot50
                kcc_finals31.append(tot49)
                oopl_finals31.append(tot50)
                print('kcc1 ka gyaarahwaan total: ', kcc_tot31)
                print('oopl1 ka gyaarahwaan total: ', oopl_tot31)
                print('kcc finals1 ka value: ', kcc_finals31)
                print('oopl finals1 ka value: ', oopl_finals31)
                print('kcc_tot31 ka value: ', kcc_tot31)
                print('oopl_tot31 ka value: ', oopl_tot31)
                context['kcc_tot31']=kcc_tot31
                context['oopl_tot31']=oopl_tot31
                tds31=oopl_tot31*10/100
                context['tds31']=tds31
                net31=oopl_tot31-tds31
                context['net31']=net31
                final_amount31=net31-tot1_oopl31
                context['final_amount31']=final_amount31
                print('tot_opd31 kcc ka value: ', tot_opd_kcc31)
                print('tot_opd31 oopl ka value: ', tot_opd_oopl31)
                print('tds31 ka value: ', tds31)
                print('net31 ka value: ', net31)
                print('final_amount31 ka value: ', final_amount31)
                context['val16']=val16
                context['val17']=val17
                context['val18']=val18
                context['val19']=val19
                context['val20']=val20
                context['val21']=val21
                context['val22']=val22
                context['val23']=val23
                context['val24']=val24
                context['val25']=val25
                context['val26']=val26
                context['val27']=val27
                context['val28']=val28
                context['val29']=val29
                context['val30']=val30
                context['tot31']=tot31
                context['tot1_oopl31']=tot1_oopl31
                context['tot_comb31']=tot_comb31
                context['tot32']=tot32
                context['tot33']=tot33
                context['tot34']=tot34
                context['tot35']=tot35
                context['tot36']=tot36
                context['tot37']=tot37
                context['tot38']=tot38
                context['tot39']=tot39
                context['tot40']=tot40
                #3rd Month calculations
                tot51=0
                for ele51 in eles_kcc3:
                    if ele51 is not None:
                        tot51+=ele51
                print('tot51 ka value: ', tot51)
                tot1_oopl51=0
                for ele51 in eles_oopl3:
                    if ele51 is not None:
                        tot1_oopl51+=ele51
                print('tot1_oopl51 ka value: ', tot1_oopl51)
                tot_comb51=tot51+tot1_oopl51
                print('tot comb51 ka value ', tot_comb51)
                tot57=0
                for kccexp51 in kcc_total_exp3:
                    if kccexp51 is not None:
                        tot57+=kccexp51
                print('tot57 ka value: ', tot57)
                tot58=0
                for ooplexp51 in oopl_total_exp3:
                    if ooplexp51 is not None:
                        tot58+=ooplexp51
                print('tot58 ka value: ', tot58)
                tot52=tot57+tot58
                print('tot52 ka value: ', tot52)
                tot53=tot_comb51-tot52
                print('tot53 ka value: ', tot53)
                if tot53>=2000000:
                    val31=2000000
                else:
                    val31=tot53
                print('val 31 ka value: ', val31)
                if tot53>=4000000:
                    val32=2000000
                else:
                    if tot53>=2000000:
                        val32=tot53-2000000
                    else:
                        val32=0
                print('val 32 ka value: ', val32)
                if tot53>=6000000:
                    val33=2000000
                else:
                    if tot53>=4000000:
                        val33=tot53-4000000
                    else:
                        val33=0
                print('val 33 ka value: ', val33)
                if tot53>=9000000:
                    val34=3000000
                else:
                    if tot53>=6000000:
                        val34=tot53-6000000
                    else:
                        val34=0
                print('val 34 ka value: ', val34)
                if tot53>=9000000:
                    val35=tot53-9000000
                else:
                    val35=0
                print('val 35 ka value: ', val35)
                tot54=val31+val32+val33+val34+val35
                print('tot54  ka value: ', tot54)
                print('tot54 ka type ka value: ', type(tot54))
                val36=Decimal(val31*10/100)
                val37=Decimal(val32*15/100)
                val38=Decimal(val33*20/100)
                val39=Decimal(val34*30/100)
                val40=Decimal(val35*38/100)
                print('val 36, 37, 38, 39, 40 ka value: ', val36, val37, val38, val39, val40)
                print('val36 ka type value:', type(val36))
                tot55=val36+val37+val38+val39+val40
                print('tot55  ka value: ', tot55)
                val41=val31-val36
                val42=val32-val37
                val43=val33-val38
                val44=val34-val39
                val45=val35-val40
                print('val 41, 42, 43, 44, 45 ka value: ', val41, val42, val43, val44, val45)
                tot56=val41+val42+val43+val44+val45
                print('tot56 ka value: ', tot56)
                tot59=tot55+tot57-tot51
                tot60=tot56+tot58-tot1_oopl51
                print('tot59 ka value: ', tot59)
                print('tot60 ka value: ', tot60)
                kcc_finals51=[]
                oopl_finals51=[]
                kcc_tot51=0
                oopl_tot51=0
                if additional_income_total3['amount__sum']:
                    tot61=tot59-oopl_add_in_kcc_third
                    tot62=tot60+oopl_add_in_kcc_third
                    print('1st time tot61 ka value: ', tot61)
                    print('1st time tot62 ka value: ', tot62)
                    context['tot61']=tot61
                    context['tot62']=tot62
                    kcc_tot51=tot61
                    oopl_tot51=tot62
                    kcc_finals51.append(tot61)
                    oopl_finals51.append(tot62)
                    print('kcc ka pehla total: ', kcc_tot51)
                    print('oopl ka pehla total: ', oopl_tot51)
                else:
                    tot61=tot59
                    tot62=tot60
                    print('1st time tot61 ka value: ', tot61)
                    print('1st time tot62 ka value: ', tot62)
                    context['tot61']=tot61
                    context['tot62']=tot62
                    kcc_tot51=tot61
                    oopl_tot51=tot62
                    kcc_finals51.append(tot61)
                    oopl_finals51.append(tot62)
                    print('kcc ka pehla total: ', kcc_tot51)
                    print('oopl ka pehla total: ', oopl_tot51)
                if additional_income_oopl_total3['amount__sum']:
                    tot63=tot61+kcc_add_in_oopl_third
                    tot64=tot62-kcc_add_in_oopl_third
                    print('1st time tot63 ka value: ', tot63)
                    print('1st time tot64 ka value: ', tot64)
                    context['tot63']=tot63
                    context['tot64']=tot64
                    kcc_tot51=tot63
                    oopl_tot51=tot64
                    kcc_finals51.append(tot63)
                    oopl_finals51.append(tot64)
                    print('kcc ka doosra total: ', kcc_tot51)
                    print('oopl ka doosra total: ', oopl_tot51)
                else:
                    tot63=tot61
                    tot64=tot62
                    print('1st time tot63 ka value: ', tot63)
                    print('1st time tot64 ka value: ', tot64)
                    context['tot63']=tot63
                    context['tot64']=tot64
                    kcc_tot51=tot63
                    oopl_tot51=tot64
                    kcc_finals51.append(tot63)
                    oopl_finals51.append(tot64)
                    print('kcc ka doosra total: ', kcc_tot51)
                    print('oopl ka doosra total: ', oopl_tot51)
                if other_expenses_total3['amount__sum']:
                    tot65=tot63+oopl_ot_exp_kcc_third
                    tot66=tot64-oopl_ot_exp_kcc_third
                    print('1st time tot65 ka value: ', tot65)
                    print('1st time tot66 ka value: ', tot66)
                    context['tot65']=tot65
                    context['tot66']=tot66
                    kcc_tot51=tot65
                    oopl_tot51=tot66
                    kcc_finals51.append(tot65)
                    oopl_finals51.append(tot66)
                    print('kcc ka chautha total: ', kcc_tot51)
                    print('oopl ka chautha total: ', oopl_tot51)
                else:
                    tot65=tot63
                    tot66=tot64
                    print('1st time tot65 ka value: ', tot65)
                    print('1st time tot66 ka value: ', tot66)
                    context['tot65']=tot65
                    context['tot66']=tot66
                    kcc_tot51=tot65
                    oopl_tot51=tot66
                    kcc_finals51.append(tot65)
                    oopl_finals51.append(tot66)
                    print('kcc ka chautha total: ', kcc_tot51)
                    print('oopl ka chautha total: ', oopl_tot51)
                if other_expenses_oopl_total3['amount__sum']:
                    tot67=tot65-kcc_ot_exp_oopl_third
                    tot68=tot66+kcc_ot_exp_oopl_third
                    print('1st time tot67 ka value: ', tot67)
                    print('1st time tot68 ka value: ', tot68)
                    context['tot67']=tot67
                    context['tot68']=tot68
                    kcc_tot51=tot67
                    oopl_tot51=tot68
                    kcc_finals51.append(tot67)
                    oopl_finals51.append(tot68)
                    print('kcc ka saatwaan total: ', kcc_tot51)
                    print('oopl ka saatwaan total: ', oopl_tot51)
                else:
                    tot67=tot65
                    tot68=tot66
                    print('1st time tot67 ka value: ', tot67)
                    print('1st time tot68 ka value: ', tot68)
                    context['tot67']=tot67
                    context['tot68']=tot68
                    kcc_tot51=tot67
                    oopl_tot51=tot68
                    kcc_finals51.append(tot67)
                    oopl_finals51.append(tot68)
                    print('kcc ka saatwaan total: ', kcc_tot51)
                    print('oopl ka saatwaan total: ', oopl_tot51)
                if opd3:
                    tot_opd51=opd_total3['opd__amount__sum']
                    context['tot_opd51']=tot_opd51
                else:
                    tot_opd51=0
                print('tot_opd51 ka value: ', tot_opd51)
                tot_opd_kcc51=tot_opd51*20/100
                tot_opd_oopl51=tot_opd51-tot_opd_kcc51
                context['tot_opd_kcc51']=tot_opd_kcc51
                context['tot_opd_oopl51']=tot_opd_oopl51
                tot69=tot67-Decimal(tot_opd_oopl51)
                tot70=tot68+Decimal(tot_opd_oopl51)
                print('1st time tot69 ka value: ', tot69)
                print('1st time tot70 ka value: ', tot70)
                context['tot69']=tot69
                context['tot70']=tot70
                kcc_tot51=tot69
                oopl_tot51=tot70
                kcc_finals51.append(tot69)
                oopl_finals51.append(tot70)
                print('kcc1 ka gyaarahwaan total: ', kcc_tot51)
                print('oopl1 ka gyaarahwaan total: ', oopl_tot51)
                print('kcc finals1 ka value: ', kcc_finals51)
                print('oopl finals1 ka value: ', oopl_finals51)
                print('kcc_tot51 ka value: ', kcc_tot51)
                print('oopl_tot51 ka value: ', oopl_tot51)
                context['kcc_tot51']=kcc_tot51
                context['oopl_tot51']=oopl_tot51
                tds51=oopl_tot51*10/100
                context['tds51']=tds51
                net51=oopl_tot51-tds51
                context['net51']=net51
                final_amount51=net51-tot1_oopl51
                context['final_amount51']=final_amount51
                print('tot_opd51 kcc ka value: ', tot_opd_kcc51)
                print('tot_opd51 oopl ka value: ', tot_opd_oopl51)
                print('tds51 ka value: ', tds51)
                print('net51 ka value: ', net51)
                print('final_amount51 ka value: ', final_amount51)
                context['val31']=val31
                context['val32']=val32
                context['val33']=val33
                context['val34']=val34
                context['val35']=val35
                context['val36']=val36
                context['val37']=val37
                context['val38']=val38
                context['val39']=val39
                context['val40']=val40
                context['val41']=val41
                context['val42']=val42
                context['val43']=val43
                context['val44']=val44
                context['val45']=val45
                context['tot51']=tot51
                context['tot1_oopl51']=tot1_oopl51
                context['tot_comb51']=tot_comb51
                context['tot52']=tot52
                context['tot53']=tot53
                context['tot54']=tot54
                context['tot55']=tot55
                context['tot56']=tot56
                context['tot57']=tot57
                context['tot58']=tot58
                context['tot59']=tot59
                context['tot60']=tot60
                kcc_add_inc_final=[]
                oopl_add_inc_final=[]
                oopl_ot_exp_final=[]
                kcc_ot_exp_final=[]
                if additional_income_total1['amount__sum']:
                    kcc_add_inc_final.append(additional_income_total1['amount__sum'])
                if additional_income_total2['amount__sum']:
                    kcc_add_inc_final.append(additional_income_total2['amount__sum'])
                if additional_income_total3['amount__sum']:
                    kcc_add_inc_final.append(additional_income_total3['amount__sum'])
                if additional_income_oopl_total1['amount__sum']:
                    oopl_add_inc_final.append(additional_income_oopl_total1['amount__sum'])
                if additional_income_oopl_total2['amount__sum']:
                    oopl_add_inc_final.append(additional_income_oopl_total2['amount__sum'])
                if additional_income_oopl_total3['amount__sum']:
                    oopl_add_inc_final.append(additional_income_oopl_total3['amount__sum'])
                if other_expenses_total1['amount__sum']:
                    kcc_ot_exp_final.append(other_expenses_total1['amount__sum'])
                if other_expenses_total2['amount__sum']:
                    kcc_ot_exp_final.append(other_expenses_total2['amount__sum'])
                if other_expenses_total3['amount__sum']:
                    kcc_ot_exp_final.append(other_expenses_total3['amount__sum'])
                if other_expenses_oopl_total1['amount__sum']:
                    oopl_ot_exp_final.append(other_expenses_oopl_total1['amount__sum'])
                if other_expenses_oopl_total2['amount__sum']:
                    oopl_ot_exp_final.append(other_expenses_oopl_total2['amount__sum'])
                if other_expenses_oopl_total3['amount__sum']:
                    oopl_ot_exp_final.append(other_expenses_oopl_total3['amount__sum'])
                context['kcc_add_inc_final']=kcc_add_inc_final
                context['oopl_add_inc_final']=oopl_add_inc_final
                context['oopl_ot_exp_final']=oopl_ot_exp_final
                context['kcc_ot_exp_final']=kcc_ot_exp_final
                total_income=tot_comb1+tot_comb31+tot_comb51
                avg_total_income=Decimal(total_income/3)
                context['avg_total_income']=avg_total_income
                total_kcc_income=tot1+tot31+tot51
                avg_kcc_income=Decimal(total_kcc_income/3)
                context['avg_kcc_income']=avg_kcc_income
                total_oopl_income=tot1_oopl1+tot1_oopl31+tot1_oopl51
                avg_oopl_income=Decimal(total_oopl_income/3)
                context['avg_oopl_income']=avg_oopl_income
                total_kcc_expenses=tot7+tot37+tot57
                avg_kcc_expenses=Decimal(total_kcc_expenses/3)
                context['avg_kcc_expenses']=avg_kcc_expenses
                total_oopl_expenses=tot8+tot38+tot58
                avg_oopl_expenses=Decimal(total_oopl_expenses/3)
                context['avg_oopl_expenses']=avg_oopl_expenses
                total_avg_expenses1=avg_kcc_expenses+avg_oopl_expenses
                context['total_avg_expenses1']=total_avg_expenses1
                a_minus_b_income1=avg_total_income-total_avg_expenses1
                context['a_minus_b_income1']=a_minus_b_income1
                #1st revised bill
                if a_minus_b_income1>=2000000:
                    val46=2000000
                else:
                    val46=a_minus_b_income1
                print('val 46 ka value: ', val46)
                context['val46']=val46
                if a_minus_b_income1>=4000000:
                    val47=2000000
                else:
                    if a_minus_b_income1>=2000000:
                        val47=a_minus_b_income1-2000000
                    else:
                        val47=0
                print('val 47 ka value: ', val47)
                context['val47']=val47
                if a_minus_b_income1>=6000000:
                    val48=2000000
                else:
                    if a_minus_b_income1>=4000000:
                        val48=a_minus_b_income1-4000000
                    else:
                        val48=0
                print('val 48 ka value: ', val48)
                context['val48']=val48
                if a_minus_b_income1>=9000000:
                    val49=3000000
                else:
                    if a_minus_b_income1>=6000000:
                        val49=a_minus_b_income1-6000000
                    else:
                        val49=0
                print('val 49 ka value: ', val49)
                context['val49']=val49
                if a_minus_b_income1>=9000000:
                    val50=a_minus_b_income1-9000000
                else:
                    val50=0
                print('val 50 ka value: ', val50)
                context['val50']=val50
                tot71=val46+val47+val48+val49+val50
                print('tot71  ka value: ', tot71)
                print('tot71 ka type ka value: ', type(tot71))
                context['tot71']=tot71
                val51=Decimal(val46*10/100)
                val52=Decimal(val47*15/100)
                val53=Decimal(val48*20/100)
                val54=Decimal(val49*30/100)
                val55=Decimal(val50*38/100)
                print('val 51, 52, 53, 54, 55 ka value: ', val51, val52, val53, val54, val55)
                print('val6 ka type value:', type(val51))
                context['val51']=val51
                context['val52']=val52
                context['val53']=val53
                context['val54']=val54
                context['val55']=val55
                tot72=val51+val52+val53+val54+val55
                print('tot72  ka value: ', tot72)
                context['tot72']=tot72
                val56=val46-val51
                val57=val47-val52
                val58=val48-val53
                val59=val49-val54
                val60=val50-val55
                print('val 56, 57, 58, 59, 60 ka value: ', val56, val57, val58, val59, val60)
                context['val56']=val56
                context['val57']=val57
                context['val58']=val58
                context['val59']=val59
                context['val60']=val60
                tot73=val56+val57+val58+val59+val60
                print('tot73 ka value: ', tot73)
                context['tot73']=tot73
                tot74=tot72+avg_kcc_expenses-avg_kcc_income
                print('tot74 ka value: ', tot74)
                context['tot74']=tot74
                tot75=tot73+avg_oopl_expenses-avg_oopl_income
                print('tot75 ka value: ', tot75)
                context['tot75']=tot75
                #2nd revised bill
                if a_minus_b_income1>=2000000:
                    val61=2000000
                else:
                    val61=a_minus_b_income1
                print('val 61 ka value: ', val61)
                context['val61']=val61
                if a_minus_b_income1>=4000000:
                    val62=2000000
                else:
                    if a_minus_b_income1>=2000000:
                        val62=a_minus_b_income1-2000000
                    else:
                        val62=0
                print('val 62 ka value: ', val62)
                context['val62']=val62
                if a_minus_b_income1>=6000000:
                    val63=2000000
                else:
                    if a_minus_b_income1>=4000000:
                        val63=a_minus_b_income1-4000000
                    else:
                        val63=0
                print('val 63 ka value: ', val63)
                context['val63']=val63
                if a_minus_b_income1>=9000000:
                    val64=3000000
                else:
                    if a_minus_b_income1>=6000000:
                        val64=a_minus_b_income1-6000000
                    else:
                        val64=0
                print('val 64 ka value: ', val64)
                context['val64']=val64
                if a_minus_b_income1>=9000000:
                    val65=a_minus_b_income1-9000000
                else:
                    val65=0
                print('val 65 ka value: ', val65)
                context['val65']=val65
                tot76=val61+val62+val63+val64+val65
                print('tot76  ka value: ', tot76)
                print('tot76 ka type ka value: ', type(tot76))
                context['tot76']=tot76
                val66=Decimal(val61*10/100)
                val67=Decimal(val62*15/100)
                val68=Decimal(val63*20/100)
                val69=Decimal(val64*30/100)
                val70=Decimal(val65*38/100)
                print('val 66, 67, 68, 69, 70 ka value: ', val66, val67, val68, val69, val70)
                print('val6 ka type value:', type(val66))
                context['val66']=val66
                context['val67']=val67
                context['val68']=val68
                context['val69']=val69
                context['val70']=val70
                tot77=val66+val67+val68+val69+val70
                print('tot77  ka value: ', tot77)
                context['tot77']=tot77
                val71=val61-val66
                val72=val62-val67
                val73=val63-val68
                val74=val64-val69
                val75=val65-val70
                print('val 71, 72, 73, 74, 75 ka value: ', val71, val72, val73, val74, val75)
                context['val71']=val71
                context['val72']=val72
                context['val73']=val73
                context['val74']=val74
                context['val75']=val75
                tot78=val71+val72+val73+val74+val75
                print('tot78 ka value: ', tot78)
                context['tot78']=tot78
                tot79=tot77+avg_kcc_expenses-avg_kcc_income
                print('tot79 ka value: ', tot79)
                context['tot79']=tot79
                tot80=tot78+avg_oopl_expenses-avg_oopl_income
                print('tot80 ka value: ', tot80)
                context['tot80']=tot80
                #3rd revised bill
                if a_minus_b_income1>=2000000:
                    val76=2000000
                else:
                    val76=a_minus_b_income1
                print('val 76 ka value: ', val76)
                context['val76']=val76
                if a_minus_b_income1>=4000000:
                    val77=2000000
                else:
                    if a_minus_b_income1>=2000000:
                        val77=a_minus_b_income1-2000000
                    else:
                        val77=0
                print('val 77 ka value: ', val77)
                context['val77']=val77
                if a_minus_b_income1>=6000000:
                    val78=2000000
                else:
                    if a_minus_b_income1>=4000000:
                        val78=a_minus_b_income1-4000000
                    else:
                        val78=0
                print('val 78 ka value: ', val78)
                context['val78']=val78
                if a_minus_b_income1>=9000000:
                    val79=3000000
                else:
                    if a_minus_b_income1>=6000000:
                        val79=a_minus_b_income1-6000000
                    else:
                        val79=0
                print('val 79 ka value: ', val79)
                context['val79']=val79
                if a_minus_b_income1>=9000000:
                    val80=a_minus_b_income1-9000000
                else:
                    val80=0
                print('val 80 ka value: ', val80)
                context['val80']=val80
                tot81=val76+val77+val78+val79+val80
                print('tot81  ka value: ', tot81)
                print('tot81 ka type ka value: ', type(tot81))
                context['tot81']=tot81
                val81=Decimal(val76*10/100)
                val82=Decimal(val77*15/100)
                val83=Decimal(val78*20/100)
                val84=Decimal(val79*30/100)
                val85=Decimal(val80*38/100)
                print('val 81, 82, 83, 84, 85 ka value: ', val81, val82, val83, val84, val85)
                print('val6 ka type value:', type(val81))
                context['val81']=val81
                context['val82']=val82
                context['val83']=val83
                context['val84']=val84
                context['val85']=val85
                tot82=val81+val82+val83+val84+val85
                print('tot82  ka value: ', tot82)
                context['tot82']=tot82
                val86=val76-val81
                val87=val77-val82
                val88=val78-val83
                val89=val79-val84
                val90=val80-val85
                print('val 86, 87, 88, 89, 90 ka value: ', val86, val87, val88, val89, val90)
                context['val86']=val86
                context['val87']=val87
                context['val88']=val88
                context['val89']=val89
                context['val90']=val90
                tot83=val86+val87+val88+val89+val90
                print('tot83 ka value: ', tot83)
                context['tot83']=tot83
                tot84=tot82+avg_kcc_expenses-avg_kcc_income
                print('tot84 ka value: ', tot84)
                context['tot84']=tot84
                tot85=tot83+avg_oopl_expenses-avg_oopl_income
                print('tot85 ka value: ', tot85)
                context['tot85']=tot85
                tot86=0
                for kcc_tot_add_inc in kcc_add_inc_final:
                    if kcc_tot_add_inc is not None:
                        tot86+=kcc_tot_add_inc
                context['tot86']=tot86
                print('tot86 ka value: ', tot86)
                tot87=0
                for oopl_tot_add_inc in oopl_add_inc_final:
                    if oopl_tot_add_inc is not None:
                        tot87+=oopl_tot_add_inc
                context['tot87']=tot87
                tot88=0
                for oopl_tot_ot_exp in oopl_ot_exp_final:
                    if oopl_tot_ot_exp is not None:
                        tot88+=oopl_tot_ot_exp
                context['tot88']=tot88
                tot89=0
                for kcc_tot_ot_exp in kcc_ot_exp_final:
                    if kcc_tot_ot_exp is not None:
                        tot89+=kcc_tot_ot_exp
                context['tot89']=tot89
                total_before_opd_kcc=tot74+tot79+tot84
                print('total_before_opd_kcc ka value: ', total_before_opd_kcc)
                context['total_before_opd_kcc']=total_before_opd_kcc
                total_before_opd_oopl=tot75+tot80+tot85
                print('total_before_opd_oopl ka value: ', total_before_opd_oopl)
                context['total_before_opd_oopl']=total_before_opd_oopl
                total_opd=Decimal(tot_opd_oopl1)+Decimal(tot_opd_oopl31)+Decimal(tot_opd_oopl51)
                print('total_opd ka value: ', total_opd)
                context['total_opd']=total_opd
                total_after_opd_kcc=total_before_opd_kcc-total_opd
                print('total_after_opd_kcc ka value: ', total_after_opd_kcc)
                context['total_after_opd_kcc']=total_after_opd_kcc
                total_after_opd_oopl=total_before_opd_oopl+total_opd
                print('total_after_opd_oopl ka value: ', total_after_opd_oopl)
                context['total_after_opd_oopl']=total_after_opd_oopl
                if tot86>0:
                    tot90=total_after_opd_kcc-tot86
                    tot91=total_after_opd_oopl+tot86
                    context['tot90']=tot90
                    context['tot91']=tot91
                    print('tot90 ka value: ', tot90)
                    print('tot91 ka value: ', tot91)
                else:
                    tot90=total_after_opd_kcc
                    tot91=total_after_opd_oopl
                if tot87>0:
                    tot92=tot90+tot87
                    tot93=tot91-tot87
                    context['tot92']=tot92
                    context['tot93']=tot93
                else:
                    tot92=tot90
                    tot93=tot91
                if tot88>0:
                    tot94=tot92-tot88
                    tot95=tot93+tot88
                    context['tot94']=tot94
                    context['tot95']=tot95
                else:
                    tot94=tot92
                    tot95=tot93
                if tot89>0:
                    tot96=tot94+tot89
                    tot97=tot95-tot89
                    context['tot96']=tot96
                    context['tot97']=tot97
                else:
                    tot96=tot94
                    tot97=tot95
                if amount_credited_first_month != '':
                    first_month_bill=int(amount_credited_first_month)
                else:
                    first_month_bill=oopl_tot1
                context['first_month_bill']=first_month_bill
                if amount_credited_second_month != '':
                    second_month_bill=int(amount_credited_second_month)
                else:
                    second_month_bill=oopl_tot31
                context['second_month_bill']=second_month_bill
                amount_received_earlier=first_month_bill+second_month_bill
                context['amount_received_earlier']=amount_received_earlier
                payable_before_tds_kcc=tot96+amount_received_earlier
                context['payable_before_tds_kcc']=payable_before_tds_kcc
                payable_before_tds_oopl=tot97-amount_received_earlier
                context['payable_before_tds_oopl']=payable_before_tds_oopl
                tds4=payable_before_tds_oopl*10/100
                context['tds4']=tds4
                net4=payable_before_tds_oopl-tds4
                context['net4']=net4
                return render(request, 'dhule/quarterly_bill.html', context)
            except KeyError:
                return HttpResponse('Please Go To Quarterly Bill Gateway First and Select The Billing Period!')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_quarterly_bill(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
                quarter=request.session['quarter']
                print('quarter selected: ', quarter)
                fin_year=request.session['fin_year']
                print('fin_year: ', fin_year)
                bill_date=request.session['bill_date']
                print('bill_date in provisional bill: ', bill_date)
                amount_credited_first_month=request.session['amount_credited_first_month']
                rt_cash_desc_first_month=request.session['rt_cash_desc_first_month']
                rt_cash_amount_first_month=request.session['rt_cash_amount_first_month']
                rt_cash_oopl_desc_first_month=request.session['rt_cash_oopl_desc_first_month']
                rt_cash_oopl_amount_first_month=request.session['rt_cash_oopl_amount_first_month']
                partial_cash_desc_first_month=request.session['partial_cash_desc_first_month']
                partial_cash_amount_first_month=request.session['partial_cash_amount_first_month']
                partial_cash_oopl_desc_first_month=request.session['partial_cash_oopl_desc_first_month']
                partial_cash_oopl_amount_first_month=request.session['partial_cash_oopl_amount_first_month']
                mjpjay_desc_first_month=request.session['mjpjay_desc_first_month']
                mjpjay_amount_first_month=request.session['mjpjay_amount_first_month']
                mjpjay_oopl_desc_first_month=request.session['mjpjay_oopl_desc_first_month']
                mjpjay_oopl_amount_first_month=request.session['mjpjay_oopl_amount_first_month']
                pmjay_desc_first_month=request.session['pmjay_desc_first_month']
                pmjay_amount_first_month=request.session['pmjay_amount_first_month']
                pmjay_oopl_desc_first_month=request.session['pmjay_oopl_desc_first_month']
                pmjay_oopl_amount_first_month=request.session['pmjay_oopl_amount_first_month']
                police_file_desc_first_month=request.session['police_file_desc_first_month']
                police_file_amount_first_month=request.session['police_file_amount_first_month']
                police_file_oopl_desc_first_month=request.session['police_file_oopl_desc_first_month']
                police_file_oopl_amount_first_month=request.session['police_file_oopl_amount_first_month']
                insurance_desc_first_month=request.session['insurance_desc_first_month']
                insurance_amount_first_month=request.session['insurance_amount_first_month']
                insurance_oopl_desc_first_month=request.session['insurance_oopl_desc_first_month']
                insurance_oopl_amount_first_month=request.session['insurance_oopl_amount_first_month']
                other_income_desc_first_month=request.session['other_income_desc_first_month']
                other_income_amount_first_month=request.session['other_income_amount_first_month']
                other_income_oopl_desc_first_month=request.session['other_income_oopl_desc_first_month']
                other_income_oopl_amount_first_month=request.session['other_income_oopl_amount_first_month']
                ct_kcc_desc_first_month=request.session['ct_kcc_desc_first_month']
                ct_kcc_amount_first_month=request.session['ct_kcc_amount_first_month']
                ct_oopl_desc_first_month=request.session['ct_oopl_desc_first_month']
                ct_oopl_amount_first_month=request.session['ct_oopl_amount_first_month']
                mould_oopl_desc_first_month=request.session['mould_oopl_desc_first_month']
                mould_oopl_amount_first_month=request.session['mould_oopl_amount_first_month']
                mould_kcc_desc_first_month=request.session['mould_kcc_desc_first_month']
                mould_kcc_amount_first_month=request.session['mould_kcc_amount_first_month']
                additional_income_desc_first_month=request.session['additional_income_desc_first_month']
                kcc_share_add_in1_first_month=request.session['kcc_share_add_in1_first_month']
                additional_income_oopl_desc_first_month=request.session['additional_income_oopl_desc_first_month']
                kcc_share_add_in2_first_month=request.session['kcc_share_add_in2_first_month']
                other_expenses_desc_first_month=request.session['other_expenses_desc_first_month']
                kcc_share_other_expenses1_first_month=request.session['kcc_share_other_expenses1_first_month']
                other_expenses_oopl_desc_first_month=request.session['other_expenses_oopl_desc_first_month']
                kcc_share_other_expenses2_first_month=request.session['kcc_share_other_expenses2_first_month']
                amount_credited_second_month=request.session['amount_credited_second_month']
                rt_cash_desc_second_month=request.session['rt_cash_desc_second_month']
                rt_cash_amount_second_month=request.session['rt_cash_amount_second_month']
                rt_cash_oopl_desc_second_month=request.session['rt_cash_oopl_desc_second_month']
                rt_cash_oopl_amount_second_month=request.session['rt_cash_oopl_amount_second_month']
                partial_cash_desc_second_month=request.session['partial_cash_desc_second_month']
                partial_cash_amount_second_month=request.session['partial_cash_amount_second_month']
                partial_cash_oopl_desc_second_month=request.session['partial_cash_oopl_desc_second_month']
                partial_cash_oopl_amount_second_month=request.session['partial_cash_oopl_amount_second_month']
                mjpjay_desc_second_month=request.session['mjpjay_desc_second_month']
                mjpjay_amount_second_month=request.session['mjpjay_amount_second_month']
                mjpjay_oopl_desc_second_month=request.session['mjpjay_oopl_desc_second_month']
                mjpjay_oopl_amount_second_month=request.session['mjpjay_oopl_amount_second_month']
                pmjay_desc_second_month=request.session['pmjay_desc_second_month']
                pmjay_amount_second_month=request.session['pmjay_amount_second_month']
                pmjay_oopl_desc_second_month=request.session['pmjay_oopl_desc_second_month']
                pmjay_oopl_amount_second_month=request.session['pmjay_oopl_amount_second_month']
                police_file_desc_second_month=request.session['police_file_desc_second_month']
                police_file_amount_second_month=request.session['police_file_amount_second_month']
                police_file_oopl_desc_second_month=request.session['police_file_oopl_desc_second_month']
                police_file_oopl_amount_second_month=request.session['police_file_oopl_amount_second_month']
                insurance_desc_second_month=request.session['insurance_desc_second_month']
                insurance_amount_second_month=request.session['insurance_amount_second_month']
                insurance_oopl_desc_second_month=request.session['insurance_oopl_desc_second_month']
                insurance_oopl_amount_second_month=request.session['insurance_oopl_amount_second_month']
                other_income_desc_second_month=request.session['other_income_desc_second_month']
                other_income_amount_second_month=request.session['other_income_amount_second_month']
                other_income_oopl_desc_second_month=request.session['other_income_oopl_desc_second_month']
                other_income_oopl_amount_second_month=request.session['other_income_oopl_amount_second_month']
                ct_kcc_desc_second_month=request.session['ct_kcc_desc_second_month']
                ct_kcc_amount_second_month=request.session['ct_kcc_amount_second_month']
                ct_oopl_desc_second_month=request.session['ct_oopl_desc_second_month']
                ct_oopl_amount_second_month=request.session['ct_oopl_amount_second_month']
                mould_oopl_desc_second_month=request.session['mould_oopl_desc_second_month']
                mould_oopl_amount_second_month=request.session['mould_oopl_amount_second_month']
                mould_kcc_desc_second_month=request.session['mould_kcc_desc_second_month']
                mould_kcc_amount_second_month=request.session['mould_kcc_amount_second_month']
                additional_income_desc_second_month=request.session['additional_income_desc_second_month']
                kcc_share_add_in1_second_month=request.session['kcc_share_add_in1_second_month']
                additional_income_oopl_desc_second_month=request.session['additional_income_oopl_desc_second_month']
                kcc_share_add_in2_second_month=request.session['kcc_share_add_in2_second_month']
                other_expenses_desc_second_month=request.session['other_expenses_desc_second_month']
                kcc_share_other_expenses1_second_month=request.session['kcc_share_other_expenses1_second_month']
                other_expenses_oopl_desc_second_month=request.session['other_expenses_oopl_desc_second_month']
                kcc_share_other_expenses2_second_month=request.session['kcc_share_other_expenses2_second_month']
                rt_cash_desc_third_month=request.session['rt_cash_desc_third_month']
                rt_cash_amount_third_month=request.session['rt_cash_amount_third_month']
                rt_cash_oopl_desc_third_month=request.session['rt_cash_oopl_desc_third_month']
                rt_cash_oopl_amount_third_month=request.session['rt_cash_oopl_amount_third_month']
                partial_cash_desc_third_month=request.session['partial_cash_desc_third_month']
                partial_cash_amount_third_month=request.session['partial_cash_amount_third_month']
                partial_cash_oopl_desc_third_month=request.session['partial_cash_oopl_desc_third_month']
                partial_cash_oopl_amount_third_month=request.session['partial_cash_oopl_amount_third_month']
                mjpjay_desc_third_month=request.session['mjpjay_desc_third_month']
                mjpjay_amount_third_month=request.session['mjpjay_amount_third_month']
                mjpjay_oopl_desc_third_month=request.session['mjpjay_oopl_desc_third_month']
                mjpjay_oopl_amount_third_month=request.session['mjpjay_oopl_amount_third_month']
                pmjay_desc_third_month=request.session['pmjay_desc_third_month']
                pmjay_amount_third_month=request.session['pmjay_amount_third_month']
                pmjay_oopl_desc_third_month=request.session['pmjay_oopl_desc_third_month']
                pmjay_oopl_amount_third_month=request.session['pmjay_oopl_amount_third_month']
                police_file_desc_third_month=request.session['police_file_desc_third_month']
                police_file_amount_third_month=request.session['police_file_amount_third_month']
                police_file_oopl_desc_third_month=request.session['police_file_oopl_desc_third_month']
                police_file_oopl_amount_third_month=request.session['police_file_oopl_amount_third_month']
                insurance_desc_third_month=request.session['insurance_desc_third_month']
                insurance_amount_third_month=request.session['insurance_amount_third_month']
                insurance_oopl_desc_third_month=request.session['insurance_oopl_desc_third_month']
                insurance_oopl_amount_third_month=request.session['insurance_oopl_amount_third_month']
                other_income_desc_third_month=request.session['other_income_desc_third_month']
                other_income_amount_third_month=request.session['other_income_amount_third_month']
                other_income_oopl_desc_third_month=request.session['other_income_oopl_desc_third_month']
                other_income_oopl_amount_third_month=request.session['other_income_oopl_amount_third_month']
                ct_kcc_desc_third_month=request.session['ct_kcc_desc_third_month']
                ct_kcc_amount_third_month=request.session['ct_kcc_amount_third_month']
                ct_oopl_desc_third_month=request.session['ct_oopl_desc_third_month']
                ct_oopl_amount_third_month=request.session['ct_oopl_amount_third_month']
                mould_oopl_desc_third_month=request.session['mould_oopl_desc_third_month']
                mould_oopl_amount_third_month=request.session['mould_oopl_amount_third_month']
                mould_kcc_desc_third_month=request.session['mould_kcc_desc_third_month']
                mould_kcc_amount_third_month=request.session['mould_kcc_amount_third_month']
                additional_income_desc_third_month=request.session['additional_income_desc_third_month']
                kcc_share_add_in1_third_month=request.session['kcc_share_add_in1_third_month']
                additional_income_oopl_desc_third_month=request.session['additional_income_oopl_desc_third_month']
                kcc_share_add_in2_third_month=request.session['kcc_share_add_in2_third_month']
                other_expenses_desc_third_month=request.session['other_expenses_desc_third_month']
                kcc_share_other_expenses1_third_month=request.session['kcc_share_other_expenses1_third_month']
                other_expenses_oopl_desc_third_month=request.session['other_expenses_oopl_desc_third_month']
                kcc_share_other_expenses2_third_month=request.session['kcc_share_other_expenses2_third_month']
                year1, year2=fin_year.split('-')
                print('year1 ka value: ', year1)
                print('year2 ka value: ', year2)
                year3, month1, day1=bill_date.split('-')
                print('month1: ', month1)
                print('year3: ', year3)
                if quarter == 'q1':
                    fro1=datetime.datetime(int(year1), 4, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year1), 4, 30).date()
                    print('to1 ka value: ', to1)
                    fro2=datetime.datetime(int(year1), 5, 1).date()
                    print('fro2 ka value: ', fro2)
                    to2=datetime.datetime(int(year1), 5, 31).date()
                    print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year1), 6, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year1), 6, 30).date()
                    print('to3 ka value: ', to3)
                elif quarter == 'q2':
                    fro1=datetime.datetime(int(year1), 7, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year1), 7, 31).date()
                    print('to1 ka value: ', to1)
                    fro2=datetime.datetime(int(year1), 8, 1).date()
                    print('fro2 ka value: ', fro2)
                    to2=datetime.datetime(int(year1), 8, 31).date()
                    print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year1), 9, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year1), 9, 30).date()
                    print('to3 ka value: ', to3)
                elif quarter == 'q3':
                    fro1=datetime.datetime(int(year1), 10, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year1), 10, 31).date()
                    print('to1 ka value: ', to1)
                    fro2=datetime.datetime(int(year1), 11, 1).date()
                    print('fro2 ka value: ', fro2)
                    to2=datetime.datetime(int(year1), 11, 30).date()
                    print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year1), 12, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year1), 12, 31).date()
                    print('to3 ka value: ', to3)
                elif quarter == 'q4':
                    fro1=datetime.datetime(int(year2), 1, 1).date()
                    print('fro1 ka value: ', fro1)
                    to1=datetime.datetime(int(year2), 1, 31).date()
                    print('to1 ka value: ', to1)
                    if year2 == '2024' or year2 == '2028':
                        fro2=datetime.datetime(int(year2), 2, 1).date()
                        print('fro2 ka value: ', fro2)
                        to2=datetime.datetime(int(year2), 2, 29).date()
                        print('to2 ka value: ', to2)
                    else:
                        fro2=datetime.datetime(int(year2), 2, 1).date()
                        print('fro2 ka value: ', fro2)
                        to2=datetime.datetime(int(year2), 2, 28).date()
                        print('to2 ka value: ', to2)
                    fro3=datetime.datetime(int(year2), 3, 1).date()
                    print('fro3 ka value: ', fro3)
                    to3=datetime.datetime(int(year2), 3, 31).date()
                    print('to3 ka value: ', to3)
                year4, month2, day2=str(to1).split('-')
                print('month2: ', month2)
                print('year4: ', year4)
                print('day2: ', day2)
                year_int1=int(year4)
                year5, month3, day3=str(to2).split('-')
                print('month3: ', month3)
                print('year5: ', year5)
                print('day3: ', day3)
                year_int2=int(year5)
                year6, month4, day4=str(to3).split('-')
                print('month4: ', month4)
                print('year6: ', year6)
                print('day4: ', day4)
                year_int3=int(year6)
                year_list1=list(year4)
                print('year list1: ', year_list1)
                sliced_year_list1=year_list1[2:4]
                print('sliced year list1: ', sliced_year_list1)
                joined_year1=int(''.join(sliced_year_list1))
                print('joined year1: ', type(joined_year1))
                year_list2=list(year5)
                print('year list2: ', year_list2)
                sliced_year_list2=year_list2[2:4]
                print('sliced year list2: ', sliced_year_list2)
                joined_year2=int(''.join(sliced_year_list2))
                print('joined year2: ', type(joined_year2))
                year_list3=list(year6)
                print('year list3: ', year_list3)
                sliced_year_list3=year_list3[2:4]
                print('sliced year list3: ', sliced_year_list3)
                joined_year3=int(''.join(sliced_year_list3))
                print('joined year3: ', type(joined_year3))
                fro_new1=datetime.datetime.strptime(str(fro1), "%Y-%m-%d").date()
                print('fro ka type: ', type(fro_new1))
                prev1=fro_new1+relativedelta(months=-1)
                print('previous month - 1 ', prev1)
                to_new1=datetime.datetime.strptime(str(to1), "%Y-%m-%d").date()
                print('to ka type: ', type(to_new1))
                prev2=to_new1+relativedelta(months=-1)
                print('previous month - 2 ', prev2)
                fro_new2=datetime.datetime.strptime(str(fro2), "%Y-%m-%d").date()
                print('fro ka type: ', type(fro_new2))
                prev3=fro_new2+relativedelta(months=-1)
                print('previous month - 3 ', prev3)
                to_new2=datetime.datetime.strptime(str(to2), "%Y-%m-%d").date()
                print('to ka type: ', type(to_new2))
                prev4=to_new2+relativedelta(months=-1)
                print('previous month - 4 ', prev4)
                fro_new3=datetime.datetime.strptime(str(fro3), "%Y-%m-%d").date()
                print('fro ka type: ', type(fro_new3))
                prev5=fro_new3+relativedelta(months=-1)
                print('previous month - 5 ', prev5)
                to_new3=datetime.datetime.strptime(str(to3), "%Y-%m-%d").date()
                print('to ka type: ', type(to_new3))
                prev6=to_new3+relativedelta(months=-1)
                print('previous month - 6 ', prev6)
                eles_kcc1=[]
                eles_kcc2=[]
                eles_kcc3=[]
                eles_oopl1=[]
                eles_oopl2=[]
                eles_oopl3=[]
                kcc_total_exp1=[]
                kcc_total_exp2=[]
                kcc_total_exp3=[]
                oopl_total_exp1=[]
                oopl_total_exp2=[]
                oopl_total_exp3=[]
                incs_first_month=[]
                incs_second_month=[]
                incs_third_month=[]
                descs_first_month=[]
                descs_second_month=[]
                descs_third_month=[]
                center_first_month=[]
                center_second_month=[]
                center_third_month=[]
                exps_first_month=[]
                exps_second_month=[]
                exps_third_month=[]
                descs1_first_month=[]
                descs1_second_month=[]
                descs1_third_month=[]
                center1_first_month=[]
                center1_second_month=[]
                center1_third_month=[]
                rt_cash1=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                rt_cash2=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                rt_cash3=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                rt_cash_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                rt_cash_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                rt_cash_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='CASH', realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                partial_cash1=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                partial_cash2=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                partial_cash3=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                partial_cash_oopl1=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                partial_cash_oopl2=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                partial_cash_oopl3=IpdReport.objects.exclude(package__patient_type__patient_type='CASH').filter(realization__cash=True, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                mjpjay_realized1=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                mjpjay_realized2=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                mjpjay_realized3=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                mjpjay_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                mjpjay_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                mjpjay_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='MJPJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                pmjay_realized1=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                pmjay_realized2=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                pmjay_realized3=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                pmjay_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                pmjay_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                pmjay_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='PMJAY', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                police_file_realized1=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                police_file_realized2=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                police_file_realized3=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                police_file_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                police_file_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                police_file_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='POLICE FILE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                insurance_realized1=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro1, to1))
                insurance_realized2=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro2, to2))
                insurance_realized3=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='k', realization__billing_month__range=(fro3, to3))
                insurance_realized_oopl1=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro1, to1))
                insurance_realized_oopl2=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro2, to2))
                insurance_realized_oopl3=IpdReport.objects.filter(package__patient_type__patient_type='INSURANCE', realization__cash=False, realization__received_by='o', realization__billing_month__range=(fro3, to3))
                other_income1=OtherIncome.objects.filter(date__range=(fro1, to1), received_by='k')
                other_income2=OtherIncome.objects.filter(date__range=(fro2, to2), received_by='k')
                other_income3=OtherIncome.objects.filter(date__range=(fro3, to3), received_by='k')
                other_income_oopl1=OtherIncome.objects.filter(date__range=(fro1, to1), received_by='o')
                other_income_oopl2=OtherIncome.objects.filter(date__range=(fro2, to2), received_by='o')
                other_income_oopl3=OtherIncome.objects.filter(date__range=(fro3, to3), received_by='o')
                additional_income1=AdditionalIncome.objects.filter(date__range=(fro1, to1), received_by='k')
                additional_income2=AdditionalIncome.objects.filter(date__range=(fro2, to2), received_by='k')
                additional_income3=AdditionalIncome.objects.filter(date__range=(fro3, to3), received_by='k')
                additional_income_oopl1=AdditionalIncome.objects.filter(date__range=(fro1, to1), received_by='o')
                additional_income_oopl2=AdditionalIncome.objects.filter(date__range=(fro2, to2), received_by='o')
                additional_income_oopl3=AdditionalIncome.objects.filter(date__range=(fro3, to3), received_by='o')
                opd1=OpdReport.objects.filter(opd__date__range=(fro1, to1))
                print('opd1 ka value: ', opd1)
                opd2=OpdReport.objects.filter(opd__date__range=(fro2, to2))
                opd3=OpdReport.objects.filter(opd__date__range=(fro3, to3))
                ct_kcc1=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='k')
                ct_kcc2=CTScan.objects.filter(date__range=(prev3, prev4), conducted_by='k')
                ct_kcc3=CTScan.objects.filter(date__range=(prev5, prev6), conducted_by='k')
                ct_oopl1=CTScan.objects.filter(date__range=(prev1, prev2), conducted_by='o')
                ct_oopl2=CTScan.objects.filter(date__range=(prev3, prev4), conducted_by='o')
                ct_oopl3=CTScan.objects.filter(date__range=(prev5, prev6), conducted_by='o')
                mould_oopl1=CommonExpenses.objects.filter(date__range=(fro1, to1), particulars__icontains='Mould', paid_by='o')
                mould_oopl2=CommonExpenses.objects.filter(date__range=(fro2, to2), particulars__icontains='Mould', paid_by='o')
                mould_oopl3=CommonExpenses.objects.filter(date__range=(fro3, to3), particulars__icontains='Mould', paid_by='o')
                mould_kcc1=CommonExpenses.objects.filter(date__range=(fro1, to1), particulars__icontains='Mould', paid_by='k')
                mould_kcc2=CommonExpenses.objects.filter(date__range=(fro2, to2), particulars__icontains='Mould', paid_by='k')
                mould_kcc3=CommonExpenses.objects.filter(date__range=(fro3, to3), particulars__icontains='Mould', paid_by='k')
                com_exp_kcc1=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro1, to1), paid_by='k')
                com_exp_kcc2=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro2, to2), paid_by='k')
                com_exp_kcc3=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro3, to3), paid_by='k')
                com_exp_oopl1=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro1, to1), paid_by='o')
                com_exp_oopl2=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro2, to2), paid_by='o')
                com_exp_oopl3=CommonExpenses.objects.exclude(particulars__icontains='Mould').filter(date__range=(fro3, to3), paid_by='o')
                other_expenses1=OtherExpenses.objects.filter(date__range=(fro1, to1), paid_by='k')
                other_expenses2=OtherExpenses.objects.filter(date__range=(fro2, to2), paid_by='k')
                other_expenses3=OtherExpenses.objects.filter(date__range=(fro3, to3), paid_by='k')
                other_expenses_oopl1=OtherExpenses.objects.filter(date__range=(fro1, to1), paid_by='o')
                other_expenses_oopl2=OtherExpenses.objects.filter(date__range=(fro2, to2), paid_by='o')
                other_expenses_oopl3=OtherExpenses.objects.filter(date__range=(fro3, to3), paid_by='o')
                rt_cash_total1=rt_cash1.aggregate(Sum('realization__amount_received'))
                rt_cash_total2=rt_cash2.aggregate(Sum('realization__amount_received'))
                rt_cash_total3=rt_cash3.aggregate(Sum('realization__amount_received'))
                rt_cash_oopl_total=rt_cash_oopl1.aggregate(Sum('realization__amount_received'))
                rt_cash_oopl_total=rt_cash_oopl2.aggregate(Sum('realization__amount_received'))
                rt_cash_oopl_total=rt_cash_oopl3.aggregate(Sum('realization__amount_received'))
                partial_cash_total1=partial_cash1.aggregate(Sum('realization__amount_received'))
                partial_cash_total2=partial_cash2.aggregate(Sum('realization__amount_received'))
                partial_cash_total3=partial_cash3.aggregate(Sum('realization__amount_received'))
                partial_cash_oopl_total1=partial_cash_oopl1.aggregate(Sum('realization__amount_received'))
                partial_cash_oopl_total2=partial_cash_oopl2.aggregate(Sum('realization__amount_received'))
                partial_cash_oopl_total3=partial_cash_oopl3.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_total1=mjpjay_realized1.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_total2=mjpjay_realized2.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_total3=mjpjay_realized3.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_oopl_total1=mjpjay_realized_oopl1.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_oopl_total2=mjpjay_realized_oopl2.aggregate(Sum('realization__amount_received'))
                mjpjay_realized_oopl_total3=mjpjay_realized_oopl3.aggregate(Sum('realization__amount_received'))
                pmjay_realized_total1=pmjay_realized1.aggregate(Sum('realization__amount_received'))
                pmjay_realized_total2=pmjay_realized2.aggregate(Sum('realization__amount_received'))
                pmjay_realized_total3=pmjay_realized3.aggregate(Sum('realization__amount_received'))
                pmjay_realized_oopl_total1=pmjay_realized_oopl1.aggregate(Sum('realization__amount_received'))
                pmjay_realized_oopl_total2=pmjay_realized_oopl2.aggregate(Sum('realization__amount_received'))
                pmjay_realized_oopl_total3=pmjay_realized_oopl3.aggregate(Sum('realization__amount_received'))
                police_file_realized_total1=police_file_realized1.aggregate(Sum('realization__amount_received'))
                police_file_realized_total2=police_file_realized2.aggregate(Sum('realization__amount_received'))
                police_file_realized_total3=police_file_realized3.aggregate(Sum('realization__amount_received'))
                police_file_realized_oopl_total1=police_file_realized_oopl1.aggregate(Sum('realization__amount_received'))
                police_file_realized_oopl_total2=police_file_realized_oopl2.aggregate(Sum('realization__amount_received'))
                police_file_realized_oopl_total3=police_file_realized_oopl3.aggregate(Sum('realization__amount_received'))
                insurance_realized_total1=insurance_realized1.aggregate(Sum('realization__amount_received'))
                insurance_realized_total2=insurance_realized2.aggregate(Sum('realization__amount_received'))
                insurance_realized_total3=insurance_realized3.aggregate(Sum('realization__amount_received'))
                insurance_realized_oopl_total1=insurance_realized_oopl1.aggregate(Sum('realization__amount_received'))
                insurance_realized_oopl_total2=insurance_realized_oopl2.aggregate(Sum('realization__amount_received'))
                insurance_realized_oopl_total3=insurance_realized_oopl3.aggregate(Sum('realization__amount_received'))
                other_income_total1=other_income1.aggregate(Sum('amount'))
                other_income_total2=other_income2.aggregate(Sum('amount'))
                other_income_total3=other_income3.aggregate(Sum('amount'))
                other_income_oopl_total1=other_income_oopl1.aggregate(Sum('amount'))
                other_income_oopl_total2=other_income_oopl2.aggregate(Sum('amount'))
                other_income_oopl_total3=other_income_oopl3.aggregate(Sum('amount'))
                opd_total1=opd1.aggregate(Sum('opd__amount'))
                opd_total2=opd2.aggregate(Sum('opd__amount'))
                opd_total3=opd3.aggregate(Sum('opd__amount'))
                ct_kcc_total1=ct_kcc1.aggregate(Sum('amount'))
                ct_kcc_total2=ct_kcc2.aggregate(Sum('amount'))
                ct_kcc_total3=ct_kcc3.aggregate(Sum('amount'))
                ct_oopl_total1=ct_oopl1.aggregate(Sum('amount'))
                ct_oopl_total2=ct_oopl2.aggregate(Sum('amount'))
                ct_oopl_total3=ct_oopl3.aggregate(Sum('amount'))
                mould_oopl_total1=mould_oopl1.aggregate(Sum('amount'))
                mould_oopl_total2=mould_oopl2.aggregate(Sum('amount'))
                mould_oopl_total3=mould_oopl3.aggregate(Sum('amount'))
                mould_kcc_total1=mould_kcc1.aggregate(Sum('amount'))
                mould_kcc_total2=mould_kcc2.aggregate(Sum('amount'))
                mould_kcc_total3=mould_kcc3.aggregate(Sum('amount'))
                com_exp_kcc_total1=com_exp_kcc1.aggregate(Sum('amount'))
                com_exp_kcc_total2=com_exp_kcc2.aggregate(Sum('amount'))
                com_exp_kcc_total3=com_exp_kcc3.aggregate(Sum('amount'))
                com_exp_oopl_total1=com_exp_oopl1.aggregate(Sum('amount'))
                com_exp_oopl_total2=com_exp_oopl2.aggregate(Sum('amount'))
                com_exp_oopl_total3=com_exp_oopl3.aggregate(Sum('amount'))
                additional_income_total1=additional_income1.aggregate(Sum('amount'))
                additional_income_total2=additional_income2.aggregate(Sum('amount'))
                additional_income_total3=additional_income3.aggregate(Sum('amount'))
                additional_income_oopl_total1=additional_income_oopl1.aggregate(Sum('amount'))
                additional_income_oopl_total2=additional_income_oopl2.aggregate(Sum('amount'))
                additional_income_oopl_total3=additional_income_oopl3.aggregate(Sum('amount'))
                other_expenses_total1=other_expenses1.aggregate(Sum('amount'))
                other_expenses_total2=other_expenses2.aggregate(Sum('amount'))
                other_expenses_total3=other_expenses3.aggregate(Sum('amount'))
                other_expenses_oopl_total1=other_expenses_oopl1.aggregate(Sum('amount'))
                other_expenses_oopl_total2=other_expenses_oopl2.aggregate(Sum('amount'))
                other_expenses_oopl_total3=other_expenses_oopl3.aggregate(Sum('amount'))
                if rt_cash_amount_first_month != '':
                    total1=rt_cash_amount_first_month
                    eles_kcc1.append(int(rt_cash_amount_first_month))
                    incs_first_month.append(total1)
                    center_first_month.append('KCC')
                    if rt_cash_desc_first_month != '':
                        descs_first_month.append(rt_cash_desc_first_month)
                    else:
                        descs_first_month.append('RT CASH AMOUNT')
                else:
                    total1=rt_cash_total1['realization__amount_received__sum']
                    eles_kcc1.append(rt_cash_total1['realization__amount_received__sum'])
                    if total1 != None:
                        incs_first_month.append(total1)
                        center_first_month.append('KCC')
                        if rt_cash_desc_first_month != '':
                            descs_first_month.append(rt_cash_desc_first_month)
                        else:
                            descs_first_month.append('RT CASH AMOUNT')
                if rt_cash_oopl_amount_first_month != '':
                    total1_oopl=rt_cash_oopl_amount_first_month
                    eles_oopl1.append(int(rt_cash_oopl_amount_first_month))
                    incs_first_month.append(total1_oopl)
                    center_first_month.append('OOPL')
                    if rt_cash_oopl_desc_first_month != '':
                        descs_first_month.append(rt_cash_oopl_desc_first_month)
                    else:
                        descs_first_month.append('RT CASH AMOUNT')
                else:
                    total1_oopl=rt_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl1.append(rt_cash_oopl_total['realization__amount_received__sum'])
                    if total1_oopl != None:
                        incs_first_month.append(total1_oopl)
                        center_first_month.append('OOPL')
                        if rt_cash_oopl_desc_first_month != '':
                            descs_first_month.append(rt_cash_oopl_desc_first_month)
                        else:
                            descs_first_month.append('RT CASH AMOUNT')
                if partial_cash_amount_first_month != '':
                    total2=partial_cash_amount_first_month
                    eles_kcc1.append(int(partial_cash_amount_first_month))
                    incs_first_month.append(total2)
                    center_first_month.append('KCC')
                    if partial_cash_desc_first_month != '':
                        descs_first_month.append(partial_cash_desc_first_month)
                    else:
                        descs_first_month.append('PARTIAL CASH AMOUNT')
                else:
                    total2=partial_cash_total1['realization__amount_received__sum']
                    eles_kcc1.append(partial_cash_total1['realization__amount_received__sum'])
                    if total2 != None:
                        incs_first_month.append(total2)
                        center_first_month.append('KCC')
                        if partial_cash_desc_first_month != '':
                            descs_first_month.append(partial_cash_desc_first_month)
                        else:
                            descs_first_month.append('PARTIAL CASH AMOUNT')
                if partial_cash_oopl_amount_first_month != '':
                    total2_oopl=partial_cash_oopl_amount_first_month
                    eles_oopl1.append(int(partial_cash_oopl_amount_first_month))
                    incs_first_month.append(total2_oopl)
                    center_first_month.append('OOPL')
                    if partial_cash_oopl_desc_first_month != '':
                        descs_first_month.append(partial_cash_oopl_desc_first_month)
                    else:
                        descs_first_month.append('PARTIAL CASH AMOUNT')
                else:
                    total2_oopl=partial_cash_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(partial_cash_oopl_total1['realization__amount_received__sum'])
                    if total2_oopl != None:
                        incs_first_month.append(total2_oopl)
                        center_first_month.append('OOPL')
                        if partial_cash_oopl_desc_first_month != '':
                            descs_first_month.append(partial_cash_oopl_desc_first_month)
                        else:
                            descs_first_month.append('PARTIAL CASH AMOUNT')
                if mjpjay_amount_first_month != '':
                    total3=mjpjay_amount_first_month
                    eles_kcc1.append(int(mjpjay_amount_first_month))
                    incs_first_month.append(total3)
                    center_first_month.append('KCC')
                    if mjpjay_desc_first_month != '':
                        descs_first_month.append(mjpjay_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year4))
                else:
                    total3=mjpjay_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(mjpjay_realized_total1['realization__amount_received__sum'])
                    if total3 != None:
                        incs_first_month.append(total3)
                        center_first_month.append('KCC')
                        if mjpjay_desc_first_month != '':
                            descs_first_month.append(mjpjay_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year4))
                if mjpjay_oopl_amount_first_month != '':
                    total3_oopl=mjpjay_oopl_amount_first_month
                    eles_oopl1.append(int(mjpjay_oopl_amount_first_month))
                    incs_first_month.append(total3_oopl)
                    center_first_month.append('OOPL')
                    if mjpjay_oopl_desc_first_month != '':
                        descs_first_month.append(mjpjay_oopl_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year4))
                else:
                    total3_oopl=mjpjay_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(mjpjay_realized_oopl_total1['realization__amount_received__sum'])
                    if total3_oopl !=None:
                        incs_first_month.append(total3_oopl)
                        center_first_month.append('OOPL')
                        if mjpjay_oopl_desc_first_month != '':
                            descs_first_month.append(mjpjay_oopl_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year4))
                if pmjay_amount_first_month != '':
                    total4=pmjay_amount_first_month
                    eles_kcc1.append(int(pmjay_amount_first_month))
                    incs_first_month.append(total4)
                    center_first_month.append('KCC')
                    if pmjay_desc_first_month != '':
                        descs_first_month.append(pmjay_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year4))
                else:
                    total4=pmjay_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(pmjay_realized_total1['realization__amount_received__sum'])
                    if total4 != None:
                        incs_first_month.append(total4)
                        center_first_month.append('KCC')
                        if pmjay_desc_first_month != '':
                            descs_first_month.append(pmjay_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year4))
                if pmjay_oopl_amount_first_month != '':
                    total4_oopl=pmjay_oopl_amount_first_month
                    eles_oopl1.append(int(pmjay_oopl_amount_first_month))
                    incs_first_month.append(total4_oopl)
                    center_first_month.append('OOPL')
                    if pmjay_oopl_desc_first_month != '':
                        descs_first_month.append(pmjay_oopl_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year4))
                else:
                    total4_oopl=pmjay_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(pmjay_realized_oopl_total1['realization__amount_received__sum'])
                    if total4_oopl != None:
                        incs_first_month.append(total4_oopl)
                        center_first_month.append('OOPL')
                        if pmjay_oopl_desc_first_month != '':
                            descs_first_month.append(pmjay_oopl_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year4))
                if police_file_amount_first_month != '':
                    total7=police_file_amount_first_month
                    eles_kcc1.append(int(police_file_amount_first_month))
                    incs_first_month.append(total7)
                    center_first_month.append('KCC')
                    if police_file_desc_first_month != '':
                        descs_first_month.append(police_file_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year4))
                else:
                    total7=police_file_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(police_file_realized_total1['realization__amount_received__sum'])
                    if total7 != None:
                        incs_first_month.append(total7)
                        center_first_month.append('KCC')
                        if police_file_desc_first_month != '':
                            descs_first_month.append(police_file_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year4))
                if police_file_oopl_amount_first_month != '':
                    total7_oopl=police_file_oopl_amount_first_month
                    eles_oopl1.append(int(police_file_oopl_amount_first_month))
                    incs_first_month.append(total7_oopl)
                    center_first_month.append('OOPL')
                    if police_file_oopl_desc_first_month != '':
                        descs_first_month.append(police_file_oopl_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year4))
                else:
                    total7_oopl=police_file_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(police_file_realized_oopl_total1['realization__amount_received__sum'])
                    if total7_oopl != None:
                        incs_first_month.append(total7_oopl)
                        center_first_month.append('OOPL')
                        if police_file_oopl_desc_first_month != '':
                            descs_first_month.append(police_file_oopl_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year4))
                if insurance_amount_first_month != '':
                    total8=insurance_amount_first_month
                    eles_kcc1.append(int(insurance_amount_first_month))
                    incs_first_month.append(total8)
                    center_first_month.append('KCC')
                    if insurance_desc_first_month != '':
                        descs_first_month.append(insurance_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN DECEMBER, ', year4))
                else:
                    total8=insurance_realized_total1['realization__amount_received__sum']
                    eles_kcc1.append(insurance_realized_total1['realization__amount_received__sum'])
                    if total8 != None:
                        incs_first_month.append(total8)
                        center_first_month.append('KCC')
                        if insurance_desc_first_month != '':
                            descs_first_month.append(insurance_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN DECEMBER, ', year4))
                if insurance_oopl_amount_first_month != '':
                    total8_oopl=insurance_oopl_amount_first_month
                    eles_oopl1.append(int(insurance_oopl_amount_first_month))
                    incs_first_month.append(total8_oopl)
                    center_first_month.append('OOPL')
                    if insurance_oopl_desc_first_month != '':
                        descs_first_month.append(insurance_oopl_desc_first_month)
                    else:
                        if month2 == '01':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JANUARY, ', year4))
                        elif month2 == '02':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN FEBRUARY, ', year4))
                        elif month2 == '03':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MARCH, ', year4))
                        elif month2 == '04':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN APRIL, ', year4))
                        elif month2 == '05':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MAY, ', year4))
                        elif month2 == '06':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JUNE, ', year4))
                        elif month2 == '07':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JULY, ', year4))
                        elif month2 == '08':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN AUGUST, ', year4))
                        elif month2 == '09':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN SEPTEMBER, ', year4))
                        elif month2 == '10':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN OCTOBER, ', year4))
                        elif month2 == '11':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN NOVEMBER, ', year4))
                        elif month2 == '12':
                            descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN DECEMBER, ', year4))
                else:
                    total8_oopl=insurance_realized_oopl_total1['realization__amount_received__sum']
                    eles_oopl1.append(insurance_realized_oopl_total1['realization__amount_received__sum'])
                    if total8_oopl != None:
                        incs_first_month.append(total8_oopl)
                        center_first_month.append('OOPL')
                        if insurance_oopl_desc_first_month != '':
                            descs_first_month.append(insurance_oopl_desc_first_month)
                        else:
                            if month2 == '01':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JANUARY, ', year4))
                            elif month2 == '02':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN FEBRUARY, ', year4))
                            elif month2 == '03':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MARCH, ', year4))
                            elif month2 == '04':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN APRIL, ', year4))
                            elif month2 == '05':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN MAY, ', year4))
                            elif month2 == '06':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JUNE, ', year4))
                            elif month2 == '07':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN JULY, ', year4))
                            elif month2 == '08':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN AUGUST, ', year4))
                            elif month2 == '09':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN SEPTEMBER, ', year4))
                            elif month2 == '10':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN OCTOBER, ', year4))
                            elif month2 == '11':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN NOVEMBER, ', year4))
                            elif month2 == '12':
                                descs_first_month.append("{}{}".format('CREDIT REALISED AMOUNT INSURANCE IN DECEMBER, ', year4))
                if other_income_amount_first_month != '':
                    total13=other_income_amount_first_month
                    eles_kcc1.append(int(other_income_amount_first_month))
                    incs_first_month.append(total13)
                    center_first_month.append('KCC')
                    if other_income_desc_first_month != '':
                        descs_first_month.append(other_income_desc_first_month)
                    else:
                        descs_first_month.append('Other Income')
                else:
                    total13=other_income_total1['amount__sum']
                    eles_kcc1.append(other_income_total1['amount__sum'])
                    if total13 != None:
                        incs_first_month.append(total13)
                        center_first_month.append('KCC')
                        if other_income_desc_first_month != '':
                            descs_first_month.append(other_income_desc_first_month)
                        else:
                            descs_first_month.append('Other Income')
                if other_income_oopl_amount_first_month != '':
                    total13_oopl=other_income_oopl_amount_first_month
                    eles_oopl1.append(int(other_income_oopl_amount_first_month))
                    incs_first_month.append(total13_oopl)
                    center_first_month.append('OOPL')
                    if other_income_oopl_desc_first_month != '':
                        descs_first_month.append(other_income_oopl_desc_first_month)
                    else:
                        descs_first_month.append('Other Income')
                else:
                    total13_oopl=other_income_oopl_total1['amount__sum']
                    eles_oopl1.append(other_income_oopl_total1['amount__sum'])
                    if total13_oopl != None:
                        incs_first_month.append(total13_oopl)
                        center_first_month.append('OOPL')
                        if other_income_oopl_desc_first_month != '':
                            descs_first_month.append(other_income_oopl_desc_first_month)
                        else:
                            descs_first_month.append('Other Income')
                if ct_kcc_amount_first_month != '':
                    total6=ct_kcc_amount_first_month
                    kcc_total_exp1.append(int(ct_kcc_amount_first_month))
                    exps_first_month.append(total6)
                    center1_first_month.append('KCC')
                    if ct_kcc_desc_first_month != '':
                        descs1_first_month.append(ct_kcc_desc_first_month)
                    else:
                        descs1_first_month.append('CT BILL')
                else:
                    total6=ct_kcc_total1['amount__sum']
                    kcc_total_exp1.append(ct_kcc_total1['amount__sum'])
                    if total6 != None:
                        exps_first_month.append(total6)
                        center1_first_month.append('KCC')
                        if ct_kcc_desc_first_month != '':
                            descs1_first_month.append(ct_kcc_desc_first_month)
                        else:
                            descs1_first_month.append('CT BILL')
                if ct_oopl_amount_first_month != '':
                    total11=ct_oopl_amount_first_month
                    oopl_total_exp1.append(int(ct_oopl_amount_first_month))
                    exps_first_month.append(total11)
                    center1_first_month.append('OOPL')
                    if ct_oopl_desc_first_month != '':
                        descs1_first_month.append(ct_oopl_desc_first_month)
                    else:
                        descs1_first_month.append('CT BILL')
                else:
                    total11=ct_oopl_total1['amount__sum']
                    oopl_total_exp1.append(ct_oopl_total1['amount__sum'])
                    if total11 != None:
                        exps_first_month.append(total11)
                        center1_first_month.append('OOPL')
                        if ct_oopl_desc_first_month != '':
                            descs1_first_month.append(ct_oopl_desc_first_month)
                        else:
                            descs1_first_month.append('CT BILL')
                if mould_oopl_amount_first_month != '':
                    total5=mould_oopl_amount_first_month
                    oopl_total_exp1.append(int(mould_oopl_amount_first_month))
                    exps_first_month.append(total5)
                    center1_first_month.append('OOPL')
                    if mould_oopl_desc_first_month != '':
                        descs1_first_month.append(mould_oopl_desc_first_month)
                    else:
                        descs1_first_month.append('MOULD BILL')
                else:
                    total5=mould_oopl_total1['amount__sum']
                    oopl_total_exp1.append(mould_oopl_total1['amount__sum'])
                    if total5 != None:
                        exps_first_month.append(total5)
                        center1_first_month.append('OOPL')
                        if mould_oopl_desc_first_month != '':
                            descs1_first_month.append(mould_oopl_desc_first_month)
                        else:
                            descs1_first_month.append('MOULD BILL')
                if mould_kcc_amount_first_month != '':
                    total12=mould_kcc_amount_first_month
                    kcc_total_exp1.append(int(mould_kcc_amount_first_month))
                    exps_first_month.append(total12)
                    center1_first_month.append('KCC')
                    if mould_kcc_desc_first_month != '':
                        descs1_first_month.append(mould_kcc_desc_first_month)
                    else:
                        descs1_first_month.append('MOULD BILL')
                else:
                    total12=mould_kcc_total1['amount__sum']
                    kcc_total_exp1.append(mould_kcc_total1['amount__sum'])
                    if total12 != None:
                        exps_first_month.append(total12)
                        center1_first_month.append('KCC')
                        if mould_kcc_desc_first_month != '':
                            descs1_first_month.append(mould_kcc_desc_first_month)
                        else:
                            descs1_first_month.append('MOULD BILL') 
                if com_exp_kcc1: #Common Expenses KCC
                    kcc_total_exp1.append(com_exp_kcc_total1['amount__sum'])
                if com_exp_oopl1: #Common Expenses OOPL
                    oopl_total_exp1.append(com_exp_oopl_total1['amount__sum'])
                if kcc_share_add_in1_first_month != '':
                    if additional_income_total1['amount__sum']:
                        k_kcc=int(kcc_share_add_in1_first_month)
                        o_kcc=100-k_kcc
                        kcc_add_in_kcc=additional_income_total1['amount__sum']*k_kcc/100
                        print('1. kcc_add_in_kcc ka value: ', kcc_add_in_kcc)
                        oopl_add_in_kcc=additional_income_total1['amount__sum']*o_kcc/100
                        print('1. oopl_add_in_kcc ka value: ', oopl_add_in_kcc)
                else:
                    if additional_income_total1['amount__sum']:
                        kcc_add_in_kcc=additional_income_total1['amount__sum']*50/100
                        print('2. kcc_add_in_kcc ka value: ', kcc_add_in_kcc)
                        oopl_add_in_kcc=additional_income_total1['amount__sum']*50/100
                        print('2. oopl_add_in_kcc ka value: ', oopl_add_in_kcc)
                if kcc_share_add_in2_first_month != '':
                    if additional_income_oopl_total1['amount__sum']:
                        k_oopl=int(kcc_share_add_in2_first_month)
                        o_oopl=100-k_oopl
                        kcc_add_in_oopl=additional_income_oopl_total1['amount__sum']*k_oopl/100
                        print('1. kcc_add_in_oopl ka value: ', kcc_add_in_oopl)
                        oopl_add_in_oopl=additional_income_oopl_total1['amount__sum']*o_oopl/100
                        print('1. oopl_add_in_oopl ka value: ', oopl_add_in_oopl)
                else:
                    if additional_income_oopl_total1['amount__sum']:
                        kcc_add_in_oopl=additional_income_oopl_total1['amount__sum']*50/100
                        print('2. kcc_add_in_oopl ka value: ', kcc_add_in_oopl)
                        oopl_add_in_oopl=additional_income_oopl_total1['amount__sum']*50/100
                        print('2. oopl_add_in_oopl ka value: ', oopl_add_in_oopl)
                if kcc_share_other_expenses1_first_month != '':
                    if other_expenses_total1['amount__sum']:
                        k_kcc_ot=int(kcc_share_other_expenses1_first_month)
                        o_kcc_ot=100-k_kcc_ot
                        kcc_ot_exp_kcc=other_expenses_total1['amount__sum']*k_kcc_ot/100
                        print('1. kcc_ot_exp_kcc ka value: ', kcc_ot_exp_kcc)
                        oopl_ot_exp_kcc=other_expenses_total1['amount__sum']*o_kcc_ot/100
                        print('1. oopl_ot_exp_kcc ka value: ', oopl_ot_exp_kcc)
                else:
                    if other_expenses_total1['amount__sum']:
                        kcc_ot_exp_kcc=other_expenses_total1['amount__sum']*50/100
                        print('2. kcc_ot_exp_kcc ka value: ', kcc_ot_exp_kcc)
                        oopl_ot_exp_kcc=other_expenses_total1['amount__sum']*50/100
                        print('2. oopl_ot_exp_kcc ka value: ', oopl_ot_exp_kcc)
                if kcc_share_other_expenses2_first_month != '':
                    if other_expenses_oopl_total1['amount__sum']:
                        k_oopl_ot=int(kcc_share_other_expenses2_first_month)
                        o_oopl_ot=100-k_oopl_ot
                        kcc_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*k_oopl_ot/100
                        print('1. kcc_ot_exp_oopl ka value: ', kcc_ot_exp_oopl)
                        oopl_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*o_oopl_ot/100
                        print('1. oopl_ot_exp_oopl ka value: ', oopl_ot_exp_oopl)
                else:
                    if other_expenses_oopl_total1['amount__sum']:
                        kcc_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*50/100
                        print('2. kcc_ot_exp_oopl ka value: ', kcc_ot_exp_oopl)
                        oopl_ot_exp_oopl=other_expenses_oopl_total1['amount__sum']*50/100
                        print('2. oopl_ot_exp_oopl ka value: ', oopl_ot_exp_oopl)
                #2nd Month
                if rt_cash_amount_second_month != '':
                    total1_second=rt_cash_amount_second_month
                    eles_kcc2.append(int(rt_cash_amount_second_month))
                    incs_second_month.append(total1_second)
                    center_second_month.append('KCC')
                    if rt_cash_desc_second_month != '':
                        descs_second_month.append(rt_cash_desc_second_month)
                    else:
                        descs_second_month.append('RT CASH AMOUNT')
                else:
                    total1_second=rt_cash_total2['realization__amount_received__sum']
                    eles_kcc2.append(rt_cash_total2['realization__amount_received__sum'])
                    if total1_second != None:
                        incs_second_month.append(total1_second)
                        center_second_month.append('KCC')
                        if rt_cash_desc_second_month != '':
                            descs_second_month.append(rt_cash_desc_second_month)
                        else:
                            descs_second_month.append('RT CASH AMOUNT')
                if rt_cash_oopl_amount_second_month != '':
                    total1_oopl_second=rt_cash_oopl_amount_second_month
                    eles_oopl2.append(int(rt_cash_oopl_amount_second_month))
                    incs_second_month.append(total1_oopl_second)
                    center_second_month.append('OOPL')
                    if rt_cash_oopl_desc_second_month != '':
                        descs_second_month.append(rt_cash_oopl_desc_second_month)
                    else:
                        descs_second_month.append('RT CASH AMOUNT')
                else:
                    total1_oopl_second=rt_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl2.append(rt_cash_oopl_total['realization__amount_received__sum'])
                    if total1_oopl_second != None:
                        incs_second_month.append(total1_oopl_second)
                        center_second_month.append('OOPL')
                        if rt_cash_oopl_desc_second_month != '':
                            descs_second_month.append(rt_cash_oopl_desc_second_month)
                        else:
                            descs_second_month.append('RT CASH AMOUNT')
                if partial_cash_amount_second_month != '':
                    total2_second=partial_cash_amount_second_month
                    eles_kcc2.append(int(partial_cash_amount_second_month))
                    incs_second_month.append(total2_second)
                    center_second_month.append('KCC')
                    if partial_cash_desc_second_month != '':
                        descs_second_month.append(partial_cash_desc_second_month)
                    else:
                        descs_second_month.append('PARTIAL CASH AMOUNT')
                else:
                    total2_second=partial_cash_total2['realization__amount_received__sum']
                    eles_kcc2.append(partial_cash_total2['realization__amount_received__sum'])
                    if total2_second != None:
                        incs_second_month.append(total2_second)
                        center_second_month.append('KCC')
                        if partial_cash_desc_second_month != '':
                            descs_second_month.append(partial_cash_desc_second_month)
                        else:
                            descs_second_month.append('PARTIAL CASH AMOUNT')
                if partial_cash_oopl_amount_second_month != '':
                    total2_oopl_second=partial_cash_oopl_amount_second_month
                    eles_oopl2.append(int(partial_cash_oopl_amount_second_month))
                    incs_second_month.append(total2_oopl_second)
                    center_second_month.append('OOPL')
                    if partial_cash_oopl_desc_second_month != '':
                        descs_second_month.append(partial_cash_oopl_desc_second_month)
                    else:
                        descs_second_month.append('PARTIAL CASH AMOUNT')
                else:
                    total2_oopl_second=partial_cash_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(partial_cash_oopl_total2['realization__amount_received__sum'])
                    if total2_oopl_second != None:
                        incs_second_month.append(total2_oopl_second)
                        center_second_month.append('OOPL')
                        if partial_cash_oopl_desc_second_month != '':
                            descs_second_month.append(partial_cash_oopl_desc_second_month)
                        else:
                            descs_second_month.append('PARTIAL CASH AMOUNT')
                if mjpjay_amount_second_month != '':
                    total3_second=mjpjay_amount_second_month
                    eles_kcc2.append(int(mjpjay_amount_second_month))
                    incs_second_month.append(total3_second)
                    center_second_month.append('KCC')
                    if mjpjay_desc_second_month != '':
                        descs_second_month.append(mjpjay_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year5))
                else:
                    total3_second=mjpjay_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(mjpjay_realized_total2['realization__amount_received__sum'])
                    if total3_second != None:
                        incs_second_month.append(total3_second)
                        center_second_month.append('KCC')
                        if mjpjay_desc_second_month != '':
                            descs_second_month.append(mjpjay_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year5))
                if mjpjay_oopl_amount_second_month != '':
                    total3_oopl_second=mjpjay_oopl_amount_second_month
                    eles_oopl2.append(int(mjpjay_oopl_amount_second_month))
                    incs_second_month.append(total3_oopl_second)
                    center_second_month.append('OOPL')
                    if mjpjay_oopl_desc_second_month != '':
                        descs_second_month.append(mjpjay_oopl_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year5))
                else:
                    total3_oopl_second=mjpjay_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(mjpjay_realized_oopl_total2['realization__amount_received__sum'])
                    if total3_oopl_second != None:
                        incs_second_month.append(total3_oopl_second)
                        center_second_month.append('OOPL')
                        if mjpjay_oopl_desc_second_month != '':
                            descs_second_month.append(mjpjay_oopl_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year5))
                if pmjay_amount_second_month != '':
                    total4_second=pmjay_amount_second_month
                    eles_kcc2.append(int(pmjay_amount_second_month))
                    incs_second_month.append(total4_second)
                    center_second_month.append('KCC')
                    if pmjay_desc_second_month != '':
                        descs_second_month.append(pmjay_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year5))
                else:
                    total4_second=pmjay_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(pmjay_realized_total2['realization__amount_received__sum'])
                    if total4_second != None:
                        incs_second_month.append(total4_second)
                        center_second_month.append('KCC')
                        if pmjay_desc_second_month != '':
                            descs_second_month.append(pmjay_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year5))
                if pmjay_oopl_amount_second_month != '':
                    total4_oopl_second=pmjay_oopl_amount_second_month
                    eles_oopl2.append(int(pmjay_oopl_amount_second_month))
                    incs_second_month.append(total4_oopl_second)
                    center_second_month.append('OOPL')
                    if pmjay_oopl_desc_second_month != '':
                        descs_second_month.append(pmjay_oopl_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year5))
                else:
                    total4_oopl_second=pmjay_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(pmjay_realized_oopl_total2['realization__amount_received__sum'])
                    if total4_oopl_second != None:
                        incs_second_month.append(total4_oopl_second)
                        center_second_month.append('OOPL')
                        if pmjay_oopl_desc_second_month != '':
                            descs_second_month.append(pmjay_oopl_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year5))
                if police_file_amount_second_month != '':
                    total7_second=police_file_amount_second_month
                    eles_kcc2.append(int(police_file_amount_second_month))
                    incs_second_month.append(total7_second)
                    center_second_month.append('KCC')
                    if police_file_desc_second_month != '':
                        descs_second_month.append(police_file_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year5))
                else:
                    total7_second=police_file_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(police_file_realized_total2['realization__amount_received__sum'])
                    if total7_second != None:
                        incs_second_month.append(total7_second)
                        center_second_month.append('KCC')
                        if police_file_desc_second_month != '':
                            descs_second_month.append(police_file_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year5))
                if police_file_oopl_amount_second_month != '':
                    total7_oopl_second=police_file_oopl_amount_second_month
                    eles_oopl2.append(int(police_file_oopl_amount_second_month))
                    incs_second_month.append(total7_oopl_second)
                    center_second_month.append('OOPL')
                    if police_file_oopl_desc_second_month != '':
                        descs_second_month.append(police_file_oopl_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year5))
                else:
                    total7_oopl_second=police_file_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(police_file_realized_oopl_total2['realization__amount_received__sum'])
                    if total7_oopl_second != None:
                        incs_second_month.append(total7_oopl_second)
                        center_second_month.append('OOPL')
                        if police_file_oopl_desc_second_month != '':
                            descs_second_month.append(police_file_oopl_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year5))
                if insurance_amount_second_month != '':
                    total8_second=insurance_amount_second_month
                    eles_kcc2.append(int(insurance_amount_second_month))
                    incs_second_month.append(total8_second)
                    center_second_month.append('KCC')
                    if insurance_desc_second_month != '':
                        descs_second_month.append(insurance_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year5))
                else:
                    total8_second=insurance_realized_total2['realization__amount_received__sum']
                    eles_kcc2.append(insurance_realized_total2['realization__amount_received__sum'])
                    if total8_second != None:
                        incs_second_month.append(total8_second)
                        center_second_month.append('KCC')
                        if insurance_desc_second_month != '':
                            descs_second_month.append(insurance_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year5))
                if insurance_oopl_amount_second_month != '':
                    total8_oopl_second=insurance_oopl_amount_second_month
                    eles_oopl2.append(int(insurance_oopl_amount_second_month))
                    incs_second_month.append(total8_oopl_second)
                    center_second_month.append('OOPL')
                    if insurance_oopl_desc_second_month != '':
                        descs_second_month.append(insurance_oopl_desc_second_month)
                    else:
                        if month3 == '01':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year5))
                        elif month3 == '02':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year5))
                        elif month3 == '03':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year5))
                        elif month3 == '04':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year5))
                        elif month3 == '05':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year5))
                        elif month3 == '06':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year5))
                        elif month3 == '07':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year5))
                        elif month3 == '08':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year5))
                        elif month3 == '09':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year5))
                        elif month3 == '10':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year5))
                        elif month3 == '11':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year5))
                        elif month3 == '12':
                            descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year5))
                else:
                    total8_oopl_second=insurance_realized_oopl_total2['realization__amount_received__sum']
                    eles_oopl2.append(insurance_realized_oopl_total2['realization__amount_received__sum'])
                    if total8_oopl_second != None:
                        incs_second_month.append(total8_oopl_second)
                        center_second_month.append('OOPL')
                        if insurance_oopl_desc_second_month != '':
                            descs_second_month.append(insurance_oopl_desc_second_month)
                        else:
                            if month3 == '01':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year5))
                            elif month3 == '02':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year5))
                            elif month3 == '03':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year5))
                            elif month3 == '04':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year5))
                            elif month3 == '05':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year5))
                            elif month3 == '06':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year5))
                            elif month3 == '07':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year5))
                            elif month3 == '08':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year5))
                            elif month3 == '09':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year5))
                            elif month3 == '10':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year5))
                            elif month3 == '11':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year5))
                            elif month3 == '12':
                                descs_second_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year5))
                if other_income_amount_second_month != '':
                    total13_second=other_income_amount_second_month
                    eles_kcc2.append(int(other_income_amount_second_month))
                    incs_second_month.append(total13_second)
                    center_second_month.append('KCC')
                    if other_income_desc_second_month != '':
                        descs_second_month.append(other_income_desc_second_month)
                    else:
                        descs_second_month.append('Other Income')
                else:
                    total13_second=other_income_total2['amount__sum']
                    eles_kcc2.append(other_income_total2['amount__sum'])
                    if total13_second != None:
                        incs_second_month.append(total13_second)
                        center_second_month.append('KCC')
                        if other_income_desc_second_month != '':
                            descs_second_month.append(other_income_desc_second_month)
                        else:
                            descs_second_month.append('Other Income')
                if other_income_oopl_amount_second_month != '':
                    total13_oopl_second=other_income_oopl_amount_second_month
                    eles_oopl2.append(int(other_income_oopl_amount_second_month))
                    incs_second_month.append(total13_oopl_second)
                    center_second_month.append('OOPL')
                    if other_income_oopl_desc_second_month != '':
                        descs_second_month.append(other_income_oopl_desc_second_month)
                    else:
                        descs_second_month.append('Other Income')
                else:
                    total13_oopl_second=other_income_oopl_total2['amount__sum']
                    eles_oopl2.append(other_income_oopl_total2['amount__sum'])
                    if total13_oopl_second != None:
                        incs_second_month.append(total13_oopl_second)
                        center_second_month.append('OOPL')
                        if other_income_oopl_desc_second_month != '':
                            descs_second_month.append(other_income_oopl_desc_second_month)
                        else:
                            descs_second_month.append('Other Income')
                if ct_kcc_amount_second_month != '':
                    total6_second=ct_kcc_amount_second_month
                    kcc_total_exp2.append(int(ct_kcc_amount_second_month))
                    exps_second_month.append(total6_second)
                    center1_second_month.append('KCC')
                    if ct_kcc_desc_second_month != '':
                        descs1_second_month.append(ct_kcc_desc_second_month)
                    else:
                        descs1_second_month.append('CT BILL')
                else:
                    total6_second=ct_kcc_total2['amount__sum']
                    kcc_total_exp2.append(ct_kcc_total2['amount__sum'])
                    if total6_second != None:
                        exps_second_month.append(total6_second)
                        center1_second_month.append('KCC')
                        if ct_kcc_desc_second_month != '':
                            descs1_second_month.append(ct_kcc_desc_second_month)
                        else:
                            descs1_second_month.append('CT BILL')
                if ct_oopl_amount_second_month != '':
                    total11_second=ct_oopl_amount_second_month
                    oopl_total_exp2.append(int(ct_oopl_amount_second_month))
                    exps_second_month.append(total11_second)
                    center1_second_month.append('OOPL')
                    if ct_oopl_desc_second_month != '':
                        descs1_second_month.append(ct_oopl_desc_second_month)
                    else:
                        descs1_second_month.append('CT BILL')
                else:
                    total11_second=ct_oopl_total2['amount__sum']
                    oopl_total_exp2.append(ct_oopl_total2['amount__sum'])
                    if total11_second != None:
                        exps_second_month.append(total11_second)
                        center1_second_month.append('OOPL')
                        if ct_oopl_desc_second_month != '':
                            descs1_second_month.append(ct_oopl_desc_second_month)
                        else:
                            descs1_second_month.append('CT BILL')
                if mould_oopl_amount_second_month != '':
                    total5_second=mould_oopl_amount_second_month
                    oopl_total_exp2.append(int(mould_oopl_amount_second_month))
                    exps_second_month.append(total5_second)
                    center1_second_month.append('OOPL')
                    if mould_oopl_desc_second_month != '':
                        descs1_second_month.append(mould_oopl_desc_second_month)
                    else:
                        descs1_second_month.append('MOULD BILL')
                else:
                    total5_second=mould_oopl_total2['amount__sum']
                    oopl_total_exp2.append(mould_oopl_total2['amount__sum'])
                    if total5_second != None:
                        exps_second_month.append(total5_second)
                        center1_second_month.append('OOPL')
                        if mould_oopl_desc_second_month != '':
                            descs1_second_month.append(mould_oopl_desc_second_month)
                        else:
                            descs1_second_month.append('MOULD BILL')
                if mould_kcc_amount_second_month != '':
                    total12_second=mould_kcc_amount_second_month
                    kcc_total_exp2.append(int(mould_kcc_amount_second_month))
                    exps_second_month.append(total12_second)
                    center1_second_month.append('KCC')
                    if mould_kcc_desc_second_month != '':
                        descs1_second_month.append(mould_kcc_desc_second_month)
                    else:
                        descs1_second_month.append('MOULD BILL')
                else:
                    total12_second=mould_kcc_total2['amount__sum']
                    kcc_total_exp2.append(mould_kcc_total2['amount__sum'])
                    if total12_second != None:
                        exps_second_month.append(total12_second)
                        center1_second_month.append('KCC')
                        if mould_kcc_desc_second_month != '':
                            descs1_second_month.append(mould_kcc_desc_second_month)
                        else:
                            descs1_second_month.append('MOULD BILL')
                if com_exp_kcc2: #Common Expenses KCC
                    kcc_total_exp2.append(com_exp_kcc_total2['amount__sum'])
                if com_exp_oopl2: #Common Expenses OOPL
                    oopl_total_exp2.append(com_exp_oopl_total2['amount__sum'])
                if kcc_share_add_in1_second_month != '':
                    if additional_income_total2['amount__sum']:
                        k_kcc_second=int(kcc_share_add_in1_second_month)
                        o_kcc_second=100-k_kcc_second
                        kcc_add_in_kcc_second=additional_income_total2['amount__sum']*k_kcc_second/100
                        print('1. kcc_add_in_kcc_second ka value: ', kcc_add_in_kcc_second)
                        oopl_add_in_kcc_second=additional_income_total2['amount__sum']*o_kcc_second/100
                        print('1. oopl_add_in_kcc_second ka value: ', oopl_add_in_kcc_second)
                else:
                    if additional_income_total2['amount__sum']:
                        kcc_add_in_kcc_second=additional_income_total2['amount__sum']*50/100
                        print('2. kcc_add_in_kcc_second ka value: ', kcc_add_in_kcc_second)
                        oopl_add_in_kcc_second=additional_income_total2['amount__sum']*50/100
                        print('2. oopl_add_in_kcc_second ka value: ', oopl_add_in_kcc_second)
                if kcc_share_add_in2_second_month != '':
                    if additional_income_oopl_total2['amount__sum']:
                        k_oopl_second=int(kcc_share_add_in2_second_month)
                        o_oopl_second=100-k_oopl_second
                        kcc_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*k_oopl_second/100
                        print('1. kcc_add_in_oopl_second ka value: ', kcc_add_in_oopl_second)
                        oopl_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*o_oopl_second/100
                        print('1. oopl_add_in_oopl_second ka value: ', oopl_add_in_oopl_second)
                else:
                    if additional_income_oopl_total2['amount__sum']:
                        kcc_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*50/100
                        print('2. kcc_add_in_oopl_second ka value: ', kcc_add_in_oopl_second)
                        oopl_add_in_oopl_second=additional_income_oopl_total2['amount__sum']*50/100
                        print('2. oopl_add_in_oopl_second ka value: ', oopl_add_in_oopl_second)
                if kcc_share_other_expenses1_second_month != '':
                    if other_expenses_total2['amount__sum']:
                        k_kcc_second_ot_second=int(kcc_share_other_expenses1_second_month)
                        o_kcc_second_ot_second=100-k_kcc_second_ot_second
                        kcc_ot_exp_kcc_second=other_expenses_total2['amount__sum']*k_kcc_second_ot_second/100
                        print('1. kcc_ot_exp_kcc_second ka value: ', kcc_ot_exp_kcc_second)
                        oopl_ot_exp_kcc_second=other_expenses_total2['amount__sum']*o_kcc_second_ot_second/100
                        print('1. oopl_ot_exp_kcc_second ka value: ', oopl_ot_exp_kcc_second)
                else:
                    if other_expenses_total2['amount__sum']:
                        kcc_ot_exp_kcc_second=other_expenses_total2['amount__sum']*50/100
                        print('2. kcc_ot_exp_kcc_second ka value: ', kcc_ot_exp_kcc_second)
                        oopl_ot_exp_kcc_second=other_expenses_total2['amount__sum']*50/100
                        print('2. oopl_ot_exp_kcc_second ka value: ', oopl_ot_exp_kcc_second)
                if kcc_share_other_expenses2_second_month != '':
                    if other_expenses_oopl_total2['amount__sum']:
                        k_oopl_second_ot_second=int(kcc_share_other_expenses2_second_month)
                        o_oopl_second_ot_second=100-k_oopl_second_ot_second
                        kcc_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*k_oopl_second_ot_second/100
                        print('1. kcc_ot_exp_oopl_second ka value: ', kcc_ot_exp_oopl_second)
                        oopl_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*o_oopl_second_ot_second/100
                        print('1. oopl_ot_exp_oopl_second ka value: ', oopl_ot_exp_oopl_second)
                else:
                    if other_expenses_oopl_total2['amount__sum']:
                        kcc_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*50/100
                        print('2. kcc_ot_exp_oopl_second ka value: ', kcc_ot_exp_oopl_second)
                        oopl_ot_exp_oopl_second=other_expenses_oopl_total2['amount__sum']*50/100
                        print('2. oopl_ot_exp_oopl_second ka value: ', oopl_ot_exp_oopl_second)
                #3rd Month
                if rt_cash_amount_third_month != '':
                    total1_third=rt_cash_amount_third_month
                    eles_kcc3.append(int(rt_cash_amount_third_month))
                    incs_third_month.append(total1_third)
                    center_third_month.append('KCC')
                    if rt_cash_desc_third_month != '':
                        descs_third_month.append(rt_cash_desc_third_month)
                    else:
                        descs_third_month.append('RT CASH AMOUNT')
                else:
                    total1_third=rt_cash_total3['realization__amount_received__sum']
                    eles_kcc3.append(rt_cash_total3['realization__amount_received__sum'])
                    if total1_third != None:
                        incs_third_month.append(total1_third)
                        center_third_month.append('KCC')
                        if rt_cash_desc_third_month != '':
                            descs_third_month.append(rt_cash_desc_third_month)
                        else:
                            descs_third_month.append('RT CASH AMOUNT')
                if rt_cash_oopl_amount_third_month != '':
                    total1_oopl_third=rt_cash_oopl_amount_third_month
                    eles_oopl3.append(int(rt_cash_oopl_amount_third_month))
                    incs_third_month.append(total1_oopl_third)
                    center_third_month.append('OOPL')
                    if rt_cash_oopl_desc_third_month != '':
                        descs_third_month.append(rt_cash_oopl_desc_third_month)
                    else:
                        descs_third_month.append('RT CASH AMOUNT')
                else:
                    total1_oopl_third=rt_cash_oopl_total['realization__amount_received__sum']
                    eles_oopl3.append(rt_cash_oopl_total['realization__amount_received__sum'])
                    if total1_oopl_third != None:
                        incs_third_month.append(total1_oopl_third)
                        center_third_month.append('OOPL')
                        if rt_cash_oopl_desc_third_month != '':
                            descs_third_month.append(rt_cash_oopl_desc_third_month)
                        else:
                            descs_third_month.append('RT CASH AMOUNT')
                if partial_cash_amount_third_month != '':
                    total2_third=partial_cash_amount_third_month
                    eles_kcc3.append(int(partial_cash_amount_third_month))
                    incs_third_month.append(total2_third)
                    center_third_month.append('KCC')
                    if partial_cash_desc_third_month != '':
                        descs_third_month.append(partial_cash_desc_third_month)
                    else:
                        descs_third_month.append('PARTIAL CASH AMOUNT')
                else:
                    total2_third=partial_cash_total3['realization__amount_received__sum']
                    eles_kcc3.append(partial_cash_total3['realization__amount_received__sum'])
                    if total2_third != None:
                        incs_third_month.append(total2_third)
                        center_third_month.append('KCC')
                        if partial_cash_desc_third_month != '':
                            descs_third_month.append(partial_cash_desc_third_month)
                        else:
                            descs_third_month.append('PARTIAL CASH AMOUNT')
                if partial_cash_oopl_amount_third_month != '':
                    total2_oopl_third=partial_cash_oopl_amount_third_month
                    eles_oopl3.append(int(partial_cash_oopl_amount_third_month))
                    incs_third_month.append(total2_oopl_third)
                    center_third_month.append('OOPL')
                    if partial_cash_oopl_desc_third_month != '':
                        descs_third_month.append(partial_cash_oopl_desc_third_month)
                    else:
                        descs_third_month.append('PARTIAL CASH AMOUNT')
                else:
                    total2_oopl_third=partial_cash_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(partial_cash_oopl_total3['realization__amount_received__sum'])
                    if total2_oopl_third != None:
                        incs_third_month.append(total2_oopl_third)
                        center_third_month.append('OOPL')
                        if partial_cash_oopl_desc_third_month != '':
                            descs_third_month.append(partial_cash_oopl_desc_third_month)
                        else:
                            descs_third_month.append('PARTIAL CASH AMOUNT')
                if mjpjay_amount_third_month != '':
                    total3_third=mjpjay_amount_third_month
                    eles_kcc3.append(int(mjpjay_amount_third_month))
                    incs_third_month.append(total3_third)
                    center_third_month.append('KCC')
                    if mjpjay_desc_third_month != '':
                        descs_third_month.append(mjpjay_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year6))
                else:
                    total3_third=mjpjay_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(mjpjay_realized_total3['realization__amount_received__sum'])
                    if total3_third != None:
                        incs_third_month.append(total3_third)
                        center_third_month.append('KCC')
                        if mjpjay_desc_third_month != '':
                            descs_third_month.append(mjpjay_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year6))
                if mjpjay_oopl_amount_third_month != '':
                    total3_oopl_third=mjpjay_oopl_amount_third_month
                    eles_oopl3.append(int(mjpjay_oopl_amount_third_month))
                    incs_third_month.append(total3_oopl_third)
                    center_third_month.append('OOPL')
                    if mjpjay_oopl_desc_third_month != '':
                        descs_third_month.append(mjpjay_oopl_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year6))
                else:
                    total3_oopl_third=mjpjay_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(mjpjay_realized_oopl_total3['realization__amount_received__sum'])
                    if total3_oopl_third != None:
                        incs_third_month.append(total3_oopl_third)
                        center_third_month.append('OOPL')
                        if mjpjay_oopl_desc_third_month != '':
                            descs_third_month.append(mjpjay_oopl_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER MJPJAY IN DECEMBER, ', year6))
                if pmjay_amount_third_month != '':
                    total4_third=pmjay_amount_third_month
                    eles_kcc3.append(int(pmjay_amount_third_month))
                    incs_third_month.append(total4_third)
                    center_third_month.append('KCC')
                    if pmjay_desc_third_month != '':
                        descs_third_month.append(pmjay_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year6))
                else:
                    total4_third=pmjay_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(pmjay_realized_total3['realization__amount_received__sum'])
                    if total4_third != None:
                        incs_third_month.append(total4_third)
                        center_third_month.append('KCC')
                        if pmjay_desc_third_month != '':
                            descs_third_month.append(pmjay_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year6))
                if pmjay_oopl_amount_third_month != '':
                    total4_oopl_third=pmjay_oopl_amount_third_month
                    eles_oopl3.append(int(pmjay_oopl_amount_third_month))
                    incs_third_month.append(total4_oopl_third)
                    center_third_month.append('OOPL')
                    if pmjay_oopl_desc_third_month != '':
                        descs_third_month.append(pmjay_oopl_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year6))
                else:
                    total4_oopl_third=pmjay_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(pmjay_realized_oopl_total3['realization__amount_received__sum'])
                    if total4_oopl_third != None:
                        incs_third_month.append(total4_oopl_third)
                        center_third_month.append('OOPL')
                        if pmjay_oopl_desc_third_month != '':
                            descs_third_month.append(pmjay_oopl_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER PMJAY IN DECEMBER, ', year6))
                if police_file_amount_third_month != '':
                    total7_third=police_file_amount_third_month
                    eles_kcc3.append(int(police_file_amount_third_month))
                    incs_third_month.append(total7_third)
                    center_third_month.append('KCC')
                    if police_file_desc_third_month != '':
                        descs_third_month.append(police_file_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year6))
                else:
                    total7_third=police_file_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(police_file_realized_total3['realization__amount_received__sum'])
                    if total7_third != None:
                        incs_third_month.append(total7_third)
                        center_third_month.append('KCC')
                        if police_file_desc_third_month != '':
                            descs_third_month.append(police_file_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year6))
                if police_file_oopl_amount_third_month != '':
                    total7_oopl_third=police_file_oopl_amount_third_month
                    eles_oopl3.append(int(police_file_oopl_amount_third_month))
                    incs_third_month.append(total7_oopl_third)
                    center_third_month.append('OOPL')
                    if police_file_oopl_desc_third_month != '':
                        descs_third_month.append(police_file_oopl_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year6))
                else:
                    total7_oopl_third=police_file_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(police_file_realized_oopl_total3['realization__amount_received__sum'])
                    if total7_oopl_third != None:
                        incs_third_month.append(total7_oopl_third)
                        center_third_month.append('OOPL')
                        if police_file_oopl_desc_third_month != '':
                            descs_third_month.append(police_file_oopl_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER POLICE FILE IN DECEMBER, ', year6))
                if insurance_amount_third_month != '':
                    total8_third=insurance_amount_third_month
                    eles_kcc3.append(int(insurance_amount_third_month))
                    incs_third_month.append(total8_third)
                    center_third_month.append('KCC')
                    if insurance_desc_third_month != '':
                        descs_third_month.append(insurance_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year6))
                else:
                    total8_third=insurance_realized_total3['realization__amount_received__sum']
                    eles_kcc3.append(insurance_realized_total3['realization__amount_received__sum'])
                    if total8_third != None:
                        incs_third_month.append(total8_third)
                        center_third_month.append('KCC')
                        if insurance_desc_third_month != '':
                            descs_third_month.append(insurance_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year6))
                if insurance_oopl_amount_third_month != '':
                    total8_oopl_third=insurance_oopl_amount_third_month
                    eles_oopl3.append(int(insurance_oopl_amount_third_month))
                    incs_third_month.append(total8_oopl_third)
                    center_third_month.append('OOPL')
                    if insurance_oopl_desc_third_month != '':
                        descs_third_month.append(insurance_oopl_desc_third_month)
                    else:
                        if month4 == '01':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year6))
                        elif month4 == '02':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year6))
                        elif month4 == '03':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year6))
                        elif month4 == '04':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year6))
                        elif month4 == '05':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year6))
                        elif month4 == '06':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year6))
                        elif month4 == '07':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year6))
                        elif month4 == '08':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year6))
                        elif month4 == '09':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year6))
                        elif month4 == '10':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year6))
                        elif month4 == '11':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year6))
                        elif month4 == '12':
                            descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year6))
                else:
                    total8_oopl_third=insurance_realized_oopl_total3['realization__amount_received__sum']
                    eles_oopl3.append(insurance_realized_oopl_total3['realization__amount_received__sum'])
                    if total8_oopl_third != None:
                        incs_third_month.append(total8_oopl_third)
                        center_third_month.append('OOPL')
                        if insurance_oopl_desc_third_month != '':
                            descs_third_month.append(insurance_oopl_desc_third_month)
                        else:
                            if month4 == '01':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JANUARY, ', year6))
                            elif month4 == '02':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN FEBRUARY, ', year6))
                            elif month4 == '03':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MARCH, ', year6))
                            elif month4 == '04':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN APRIL, ', year6))
                            elif month4 == '05':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN MAY, ', year6))
                            elif month4 == '06':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JUNE, ', year6))
                            elif month4 == '07':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN JULY, ', year6))
                            elif month4 == '08':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN AUGUST, ', year6))
                            elif month4 == '09':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN SEPTEMBER, ', year6))
                            elif month4 == '10':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN OCTOBER, ', year6))
                            elif month4 == '11':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN NOVEMBER, ', year6))
                            elif month4 == '12':
                                descs_third_month.append("{}{}".format('CREDIT REALISED AMOUNT UNDER INSURANCE IN DECEMBER, ', year6))
                if other_income_amount_third_month != '':
                    total13_third=other_income_amount_third_month
                    eles_kcc3.append(int(other_income_amount_third_month))
                    incs_third_month.append(total13_third)
                    center_third_month.append('KCC')
                    if other_income_desc_third_month != '':
                        descs_third_month.append(other_income_desc_third_month)
                    else:
                        descs_third_month.append('Other Income')
                else:
                    total13_third=other_income_total3['amount__sum']
                    eles_kcc3.append(other_income_total3['amount__sum'])
                    if total13_third != None:
                        incs_third_month.append(total13_third)
                        center_third_month.append('KCC')
                        if other_income_desc_third_month != '':
                            descs_third_month.append(other_income_desc_third_month)
                        else:
                            descs_third_month.append('Other Income')
                if other_income_oopl_amount_third_month != '':
                    total13_oopl_third=other_income_oopl_amount_third_month
                    eles_oopl3.append(int(other_income_oopl_amount_third_month))
                    incs_third_month.append(total13_oopl_third)
                    center_third_month.append('OOPL')
                    if other_income_oopl_desc_third_month != '':
                        descs_third_month.append(other_income_oopl_desc_third_month)
                    else:
                        descs_third_month.append('Other Income')
                else:
                    total13_oopl_third=other_income_oopl_total3['amount__sum']
                    eles_oopl3.append(other_income_oopl_total3['amount__sum'])
                    if total13_oopl_third != None:
                        incs_third_month.append(total13_oopl_third)
                        center_third_month.append('OOPL')
                        if other_income_oopl_desc_third_month != '':
                            descs_third_month.append(other_income_oopl_desc_third_month)
                        else:
                            descs_third_month.append('Other Income')
                if ct_kcc_amount_third_month != '':
                    total6_third=ct_kcc_amount_third_month
                    kcc_total_exp3.append(int(ct_kcc_amount_third_month))
                    exps_third_month.append(total6_third)
                    center1_third_month.append('KCC')
                    if ct_kcc_desc_third_month != '':
                        descs1_third_month.append(ct_kcc_desc_third_month)
                    else:
                        descs1_third_month.append('CT BILL')
                else:
                    total6_third=ct_kcc_total3['amount__sum']
                    kcc_total_exp3.append(ct_kcc_total3['amount__sum'])
                    if total6_third != None:
                        exps_third_month.append(total6_third)
                        center1_third_month.append('KCC')
                        if ct_kcc_desc_third_month != '':
                            descs1_third_month.append(ct_kcc_desc_third_month)
                        else:
                            descs1_third_month.append('CT BILL')
                if ct_oopl_amount_third_month != '':
                    total11_third=ct_oopl_amount_third_month
                    oopl_total_exp3.append(int(ct_oopl_amount_third_month))
                    exps_third_month.append(total11_third)
                    center1_third_month.append('OOPL')
                    if ct_oopl_desc_third_month != '':
                        descs1_third_month.append(ct_oopl_desc_third_month)
                    else:
                        descs1_third_month.append('CT BILL')
                else:
                    total11_third=ct_oopl_total3['amount__sum']
                    oopl_total_exp3.append(ct_oopl_total3['amount__sum'])
                    if total11_third != None:
                        exps_third_month.append(total11_third)
                        center1_third_month.append('OOPL')
                        if ct_oopl_desc_third_month != '':
                            descs1_third_month.append(ct_oopl_desc_third_month)
                        else:
                            descs1_third_month.append('CT BILL')
                if mould_oopl_amount_third_month != '':
                    total5_third=mould_oopl_amount_third_month
                    oopl_total_exp3.append(int(mould_oopl_amount_third_month))
                    exps_third_month.append(total5_third)
                    center1_third_month.append('OOPL')
                    if mould_oopl_desc_third_month != '':
                        descs1_third_month.append(mould_oopl_desc_third_month)
                    else:
                        descs1_third_month.append('MOULD BILL')
                else:
                    total5_third=mould_oopl_total3['amount__sum']
                    oopl_total_exp3.append(mould_oopl_total3['amount__sum'])
                    if total5_third != None:
                        exps_third_month.append(total5_third)
                        center1_third_month.append('OOPL')
                        if mould_oopl_desc_third_month != '':
                            descs1_third_month.append(mould_oopl_desc_third_month)
                        else:
                            descs1_third_month.append('MOULD BILL')
                if mould_kcc_amount_third_month != '':
                    total12_third=mould_kcc_amount_third_month
                    kcc_total_exp3.append(int(mould_kcc_amount_third_month))
                    exps_third_month.append(total12_third)
                    center1_third_month.append('KCC')
                    if mould_kcc_desc_third_month != '':
                        descs1_third_month.append(mould_kcc_desc_third_month)
                    else:
                        descs1_third_month.append('MOULD BILL')
                else:
                    total12_third=mould_kcc_total3['amount__sum']
                    kcc_total_exp3.append(mould_kcc_total3['amount__sum'])
                    if total12_third != None:
                        exps_third_month.append(total12_third)
                        center1_third_month.append('KCC')
                        if mould_kcc_desc_third_month != '':
                            descs1_third_month.append(mould_kcc_desc_third_month)
                        else:
                            descs1_third_month.append('MOULD BILL')
                if com_exp_kcc3: #Common Expenses KCC
                    kcc_total_exp3.append(com_exp_kcc_total3['amount__sum'])
                if com_exp_oopl3: #Common Expenses OOPL
                    oopl_total_exp3.append(com_exp_oopl_total3['amount__sum'])
                if kcc_share_add_in1_third_month != '':
                    if additional_income_total3['amount__sum']:
                        k_kcc_third=int(kcc_share_add_in1_third_month)
                        o_kcc_third=100-k_kcc_third
                        kcc_add_in_kcc_third=additional_income_total3['amount__sum']*k_kcc_third/100
                        print('1. kcc_add_in_kcc_third ka value: ', kcc_add_in_kcc_third)
                        oopl_add_in_kcc_third=additional_income_total3['amount__sum']*o_kcc_third/100
                        print('1. oopl_add_in_kcc_third ka value: ', oopl_add_in_kcc_third)
                else:
                    if additional_income_total3['amount__sum']:
                        kcc_add_in_kcc_third=additional_income_total3['amount__sum']*50/100
                        print('2. kcc_add_in_kcc_third ka value: ', kcc_add_in_kcc_third)
                        oopl_add_in_kcc_third=additional_income_total3['amount__sum']*50/100
                        print('2. oopl_add_in_kcc_third ka value: ', oopl_add_in_kcc_third)
                if kcc_share_add_in2_third_month != '':
                    if additional_income_oopl_total3['amount__sum']:
                        k_oopl_third=int(kcc_share_add_in2_third_month)
                        o_oopl_third=100-k_oopl_third
                        kcc_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*k_oopl_third/100
                        print('1. kcc_add_in_oopl_third ka value: ', kcc_add_in_oopl_third)
                        oopl_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*o_oopl_third/100
                        print('1. oopl_add_in_oopl_third ka value: ', oopl_add_in_oopl_third)
                else:
                    if additional_income_oopl_total3['amount__sum']:
                        kcc_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*50/100
                        print('2. kcc_add_in_oopl_third ka value: ', kcc_add_in_oopl_third)
                        oopl_add_in_oopl_third=additional_income_oopl_total3['amount__sum']*50/100
                        print('2. oopl_add_in_oopl_third ka value: ', oopl_add_in_oopl_third)
                if kcc_share_other_expenses1_third_month != '':
                    if other_expenses_total3['amount__sum']:
                        k_kcc_third_ot_third=int(kcc_share_other_expenses1_third_month)
                        o_kcc_third_ot_third=100-k_kcc_third_ot_third
                        kcc_ot_exp_kcc_third=other_expenses_total3['amount__sum']*k_kcc_third_ot_third/100
                        print('1. kcc_ot_exp_kcc_third ka value: ', kcc_ot_exp_kcc_third)
                        oopl_ot_exp_kcc_third=other_expenses_total3['amount__sum']*o_kcc_third_ot_third/100
                        print('1. oopl_ot_exp_kcc_third ka value: ', oopl_ot_exp_kcc_third)
                else:
                    if other_expenses_total3['amount__sum']:
                        kcc_ot_exp_kcc_third=other_expenses_total3['amount__sum']*50/100
                        print('2. kcc_ot_exp_kcc_third ka value: ', kcc_ot_exp_kcc_third)
                        oopl_ot_exp_kcc_third=other_expenses_total3['amount__sum']*50/100
                        print('2. oopl_ot_exp_kcc_third ka value: ', oopl_ot_exp_kcc_third)
                if kcc_share_other_expenses2_third_month != '':
                    if other_expenses_oopl_total3['amount__sum']:
                        k_oopl_third_ot_third=int(kcc_share_other_expenses2_third_month)
                        o_oopl_third_ot_third=100-k_oopl_third_ot_third
                        kcc_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*k_oopl_third_ot_third/100
                        print('1. kcc_ot_exp_oopl_third ka value: ', kcc_ot_exp_oopl_third)
                        oopl_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*o_oopl_third_ot_third/100
                        print('1. oopl_ot_exp_oopl_third ka value: ', oopl_ot_exp_oopl_third)
                else:
                    if other_expenses_oopl_total3['amount__sum']:
                        kcc_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*50/100
                        print('2. kcc_ot_exp_oopl_third ka value: ', kcc_ot_exp_oopl_third)
                        oopl_ot_exp_oopl_third=other_expenses_oopl_total3['amount__sum']*50/100
                        print('2. oopl_ot_exp_oopl_third ka value: ', oopl_ot_exp_oopl_third)
                print()
                print('iska kya hoga1', eles_kcc1)
                print()
                print('aur iska bhi1', eles_oopl1)
                print()
                print('iska kya hoga2', eles_kcc2)
                print()
                print('aur iska bhi2', eles_oopl2)
                print()
                print('iska kya hoga3', eles_kcc3)
                print()
                print('aur iska bhi3', eles_oopl3)
                tot1=0
                for ele1 in eles_kcc1:
                    if ele1 is not None:
                        tot1+=ele1
                print('tot1 ka value: ', tot1)
                tot1_oopl1=0
                for ele1 in eles_oopl1:
                    if ele1 is not None:
                        tot1_oopl1+=ele1
                print('tot1_oopl1 ka value: ', tot1_oopl1)
                tot_comb1=tot1+tot1_oopl1
                print('tot comb1 ka value ', tot_comb1)
                tot7=0
                for kccexp1 in kcc_total_exp1:
                    if kccexp1 is not None:
                        tot7+=kccexp1
                print('tot7 ka value: ', tot7)
                tot8=0
                for ooplexp1 in oopl_total_exp1:
                    if ooplexp1 is not None:
                        tot8+=ooplexp1
                print('tot8 ka value: ', tot8)
                tot2=tot7+tot8
                print('tot2 ka value: ', tot2)
                tot3=tot_comb1-tot2
                print('tot3 ka value: ', tot3)
                if tot3>=2000000:
                    val1=2000000
                else:
                    val1=tot3
                print('val 1 ka value: ', val1)
                if tot3>=4000000:
                    val2=2000000
                else:
                    if tot3>=2000000:
                        val2=tot3-2000000
                    else:
                        val2=0
                print('val 2 ka value: ', val2)
                if tot3>=6000000:
                    val3=2000000
                else:
                    if tot3>=4000000:
                        val3=tot3-4000000
                    else:
                        val3=0
                print('val 3 ka value: ', val3)
                if tot3>=9000000:
                    val4=3000000
                else:
                    if tot3>=6000000:
                        val4=tot3-6000000
                    else:
                        val4=0
                print('val 4 ka value: ', val4)
                if tot3>=9000000:
                    val5=tot3-9000000
                else:
                    val5=0
                print('val 5 ka value: ', val5)
                tot4=val1+val2+val3+val4+val5
                print('tot4  ka value: ', tot4)
                print('tot4 ka type ka value: ', type(tot4))
                val6=Decimal(val1*10/100)
                val7=Decimal(val2*15/100)
                val8=Decimal(val3*20/100)
                val9=Decimal(val4*30/100)
                val10=Decimal(val5*38/100)
                print('val 6, 7, 8, 9, 10 ka value: ', val6, val7, val8, val9, val10)
                print('val6 ka type value:', type(val6))
                tot5=val6+val7+val8+val9+val10
                print('tot5  ka value: ', tot5)
                val11=val1-val6
                val12=val2-val7
                val13=val3-val8
                val14=val4-val9
                val15=val5-val10
                print('val 11, 12, 13, 14, 15 ka value: ', val11, val12, val13, val14, val15)
                tot6=val11+val12+val13+val14+val15
                print('tot6 ka value: ', tot6)
                tot9=tot5+tot7-tot1
                tot10=tot6+tot8-tot1_oopl1
                print('tot9 ka value: ', tot9)
                print('tot10 ka value: ', tot10)
                kcc_finals1=[]
                oopl_finals1=[]
                kcc_tot1=0
                oopl_tot1=0
                if additional_income_total1['amount__sum']:
                    tot11=tot9-oopl_add_in_kcc
                    tot12=tot10+oopl_add_in_kcc
                    print('1st time tot11 ka value: ', tot11)
                    print('1st time tot12 ka value: ', tot12)
                    kcc_tot1=tot11
                    oopl_tot1=tot12
                    kcc_finals1.append(tot11)
                    oopl_finals1.append(tot12)
                    print('kcc ka pehla total: ', kcc_tot1)
                    print('oopl ka pehla total: ', oopl_tot1)
                else:
                    tot11=tot9
                    tot12=tot10
                    print('1st time tot11 ka value: ', tot11)
                    print('1st time tot12 ka value: ', tot12)
                    kcc_tot1=tot11
                    oopl_tot1=tot12
                    kcc_finals1.append(tot11)
                    oopl_finals1.append(tot12)
                    print('kcc ka pehla total: ', kcc_tot1)
                    print('oopl ka pehla total: ', oopl_tot1)
                if additional_income_oopl_total1['amount__sum']:
                    tot13=tot11+kcc_add_in_oopl
                    tot14=tot12-kcc_add_in_oopl
                    print('1st time tot13 ka value: ', tot13)
                    print('1st time tot14 ka value: ', tot14)
                    kcc_tot1=tot13
                    oopl_tot1=tot14
                    kcc_finals1.append(tot13)
                    oopl_finals1.append(tot14)
                    print('kcc ka doosra total: ', kcc_tot1)
                    print('oopl ka doosra total: ', oopl_tot1)
                else:
                    tot13=tot11
                    tot14=tot12
                    print('1st time tot13 ka value: ', tot13)
                    print('1st time tot14 ka value: ', tot14)
                    kcc_tot1=tot13
                    oopl_tot1=tot14
                    kcc_finals1.append(tot13)
                    oopl_finals1.append(tot14)
                    print('kcc ka doosra total: ', kcc_tot1)
                    print('oopl ka doosra total: ', oopl_tot1)
                if other_expenses_total1['amount__sum']:
                    tot15=tot13+oopl_ot_exp_kcc
                    tot16=tot14-oopl_ot_exp_kcc
                    print('1st time tot15 ka value: ', tot15)
                    print('1st time tot16 ka value: ', tot16)
                    kcc_tot1=tot15
                    oopl_tot1=tot16
                    kcc_finals1.append(tot15)
                    oopl_finals1.append(tot16)
                    print('kcc ka chautha total: ', kcc_tot1)
                    print('oopl ka chautha total: ', oopl_tot1)
                else:
                    tot15=tot13
                    tot16=tot14
                    print('1st time tot15 ka value: ', tot15)
                    print('1st time tot16 ka value: ', tot16)
                    kcc_tot1=tot15
                    oopl_tot1=tot16
                    kcc_finals1.append(tot15)
                    oopl_finals1.append(tot16)
                    print('kcc ka chautha total: ', kcc_tot1)
                    print('oopl ka chautha total: ', oopl_tot1)
                if other_expenses_oopl_total1['amount__sum']:
                    tot17=tot15-kcc_ot_exp_oopl
                    tot18=tot16+kcc_ot_exp_oopl
                    print('1st time tot17 ka value: ', tot17)
                    print('1st time tot18 ka value: ', tot18)
                    kcc_tot1=tot17
                    oopl_tot1=tot18
                    kcc_finals1.append(tot17)
                    oopl_finals1.append(tot18)
                    print('kcc ka saatwaan total: ', kcc_tot1)
                    print('oopl ka saatwaan total: ', oopl_tot1)
                else:
                    tot17=tot15
                    tot18=tot16
                    print('1st time tot17 ka value: ', tot17)
                    print('1st time tot18 ka value: ', tot18)
                    kcc_tot1=tot17
                    oopl_tot1=tot18
                    kcc_finals1.append(tot17)
                    oopl_finals1.append(tot18)
                    print('kcc ka saatwaan total: ', kcc_tot1)
                    print('oopl ka saatwaan total: ', oopl_tot1)
                if opd1:
                    tot_opd1=opd_total1['opd__amount__sum']
                else:
                    tot_opd1=0
                print('tot_opd1 ka value: ', tot_opd1)
                tot_opd_kcc1=tot_opd1*20/100
                tot_opd_oopl1=tot_opd1-tot_opd_kcc1
                tot19=tot17-Decimal(tot_opd_oopl1)
                tot20=tot18+Decimal(tot_opd_oopl1)
                print('1st time tot19 ka value: ', tot19)
                print('1st time tot20 ka value: ', tot20)
                kcc_tot1=tot19
                oopl_tot1=tot20
                kcc_finals1.append(tot19)
                oopl_finals1.append(tot20)
                print('kcc1 ka gyaarahwaan total: ', kcc_tot1)
                print('oopl1 ka gyaarahwaan total: ', oopl_tot1)
                print('kcc finals1 ka value: ', kcc_finals1)
                print('oopl finals1 ka value: ', oopl_finals1)
                print('kcc_tot1 ka value: ', kcc_tot1)
                print('oopl_tot1 ka value: ', oopl_tot1)
                tds1=oopl_tot1*10/100
                net1=oopl_tot1-tds1
                final_amount1=net1-tot1_oopl1
                print('tot_opd1 kcc ka value: ', tot_opd_kcc1)
                print('tot_opd1 oopl ka value: ', tot_opd_oopl1)
                print('tds1 ka value: ', tds1)
                print('net1 ka value: ', net1)
                print('final_amount1 ka value: ', final_amount1)
                #2nd Month calculations
                tot31=0
                for ele31 in eles_kcc2:
                    if ele31 is not None:
                        tot31+=ele31
                print('tot31 ka value: ', tot31)
                tot1_oopl31=0
                for ele31 in eles_oopl2:
                    if ele31 is not None:
                        tot1_oopl31+=ele31
                print('tot1_oopl31 ka value: ', tot1_oopl31)
                tot_comb31=tot31+tot1_oopl31
                print('tot comb31 ka value ', tot_comb31)
                tot37=0
                for kccexp31 in kcc_total_exp2:
                    if kccexp31 is not None:
                        tot37+=kccexp31
                print('tot37 ka value: ', tot37)
                tot38=0
                for ooplexp31 in oopl_total_exp2:
                    if ooplexp31 is not None:
                        tot38+=ooplexp31
                print('tot38 ka value: ', tot38)
                tot32=tot37+tot38
                print('tot32 ka value: ', tot32)
                tot33=tot_comb31-tot32
                print('tot33 ka value: ', tot33)
                if tot33>=2000000:
                    val16=2000000
                else:
                    val16=tot33
                print('val 1 ka value: ', val16)
                if tot33>=4000000:
                    val17=2000000
                else:
                    if tot33>=2000000:
                        val17=tot33-2000000
                    else:
                        val17=0
                print('val 2 ka value: ', val17)
                if tot33>=6000000:
                    val18=2000000
                else:
                    if tot33>=4000000:
                        val18=tot33-4000000
                    else:
                        val18=0
                print('val 3 ka value: ', val18)
                if tot33>=9000000:
                    val19=3000000
                else:
                    if tot33>=6000000:
                        val19=tot33-6000000
                    else:
                        val19=0
                print('val 4 ka value: ', val19)
                if tot33>=9000000:
                    val20=tot33-9000000
                else:
                    val20=0
                print('val 5 ka value: ', val20)
                tot34=val16+val17+val18+val19+val20
                print('tot34  ka value: ', tot34)
                print('tot34 ka type ka value: ', type(tot34))
                val21=Decimal(val16*10/100)
                val22=Decimal(val17*15/100)
                val23=Decimal(val18*20/100)
                val24=Decimal(val19*30/100)
                val25=Decimal(val20*38/100)
                print('val 6, 7, 8, 9, 10 ka value: ', val21, val22, val23, val24, val25)
                print('val21 ka type value:', type(val21))
                tot35=val21+val22+val23+val24+val25
                print('tot35  ka value: ', tot35)
                val26=val16-val21
                val27=val17-val22
                val28=val18-val23
                val29=val19-val24
                val30=val20-val25
                print('val 11, 12, 13, 14, 15 ka value: ', val26, val27, val28, val29, val30)
                tot36=val26+val27+val28+val29+val30
                print('tot36 ka value: ', tot36)
                tot39=tot35+tot37-tot31
                tot40=tot36+tot38-tot1_oopl31
                print('tot39 ka value: ', tot39)
                print('tot40 ka value: ', tot40)
                kcc_finals31=[]
                oopl_finals31=[]
                kcc_tot31=0
                oopl_tot31=0
                if additional_income_total2['amount__sum']:
                    tot41=tot39-oopl_add_in_kcc_second
                    tot42=tot40+oopl_add_in_kcc_second
                    print('1st time tot41 ka value: ', tot41)
                    print('1st time tot42 ka value: ', tot42)
                    kcc_tot31=tot41
                    oopl_tot31=tot42
                    kcc_finals31.append(tot41)
                    oopl_finals31.append(tot42)
                    print('kcc ka pehla total: ', kcc_tot31)
                    print('oopl ka pehla total: ', oopl_tot31)
                else:
                    tot41=tot39
                    tot42=tot40
                    print('1st time tot41 ka value: ', tot41)
                    print('1st time tot42 ka value: ', tot42)
                    kcc_tot31=tot41
                    oopl_tot31=tot42
                    kcc_finals31.append(tot41)
                    oopl_finals31.append(tot42)
                    print('kcc ka pehla total: ', kcc_tot31)
                    print('oopl ka pehla total: ', oopl_tot31)
                if additional_income_oopl_total2['amount__sum']:
                    tot43=tot41+kcc_add_in_oopl_second
                    tot44=tot42-kcc_add_in_oopl_second
                    print('1st time tot43 ka value: ', tot43)
                    print('1st time tot44 ka value: ', tot44)
                    kcc_tot31=tot43
                    oopl_tot31=tot44
                    kcc_finals31.append(tot43)
                    oopl_finals31.append(tot44)
                    print('kcc ka doosra total: ', kcc_tot31)
                    print('oopl ka doosra total: ', oopl_tot31)
                else:
                    tot43=tot41
                    tot44=tot42
                    print('1st time tot43 ka value: ', tot43)
                    print('1st time tot44 ka value: ', tot44)
                    kcc_tot31=tot43
                    oopl_tot31=tot44
                    kcc_finals31.append(tot43)
                    oopl_finals31.append(tot44)
                    print('kcc ka doosra total: ', kcc_tot31)
                    print('oopl ka doosra total: ', oopl_tot31)
                if other_expenses_total2['amount__sum']:
                    tot45=tot43+oopl_ot_exp_kcc_second
                    tot46=tot44-oopl_ot_exp_kcc_second
                    print('1st time tot45 ka value: ', tot45)
                    print('1st time tot46 ka value: ', tot46)
                    kcc_tot31=tot45
                    oopl_tot31=tot46
                    kcc_finals31.append(tot45)
                    oopl_finals31.append(tot46)
                    print('kcc ka chautha total: ', kcc_tot31)
                    print('oopl ka chautha total: ', oopl_tot31)
                else:
                    tot45=tot43
                    tot46=tot44
                    print('1st time tot45 ka value: ', tot45)
                    print('1st time tot46 ka value: ', tot46)
                    kcc_tot31=tot45
                    oopl_tot31=tot46
                    kcc_finals31.append(tot45)
                    oopl_finals31.append(tot46)
                    print('kcc ka chautha total: ', kcc_tot31)
                    print('oopl ka chautha total: ', oopl_tot31)
                if other_expenses_oopl_total2['amount__sum']:
                    tot47=tot45-kcc_ot_exp_oopl_second
                    tot48=tot46+kcc_ot_exp_oopl_second
                    print('1st time tot47 ka value: ', tot47)
                    print('1st time tot48 ka value: ', tot48)
                    kcc_tot31=tot47
                    oopl_tot31=tot48
                    kcc_finals31.append(tot47)
                    oopl_finals31.append(tot48)
                    print('kcc ka saatwaan total: ', kcc_tot31)
                    print('oopl ka saatwaan total: ', oopl_tot31)
                else:
                    tot47=tot45
                    tot48=tot46
                    print('1st time tot47 ka value: ', tot47)
                    print('1st time tot48 ka value: ', tot48)
                    kcc_tot31=tot47
                    oopl_tot31=tot48
                    kcc_finals31.append(tot47)
                    oopl_finals31.append(tot48)
                    print('kcc ka saatwaan total: ', kcc_tot31)
                    print('oopl ka saatwaan total: ', oopl_tot31)
                if opd2:
                    tot_opd31=opd_total2['opd__amount__sum']
                else:
                    tot_opd31=0
                print('tot_opd31 ka value: ', tot_opd31)
                tot_opd_kcc31=tot_opd31*20/100
                tot_opd_oopl31=tot_opd31-tot_opd_kcc31
                tot49=tot47-Decimal(tot_opd_oopl31)
                tot50=tot48+Decimal(tot_opd_oopl31)
                print('1st time tot49 ka value: ', tot49)
                print('1st time tot50 ka value: ', tot50)
                kcc_tot31=tot49
                oopl_tot31=tot50
                kcc_finals31.append(tot49)
                oopl_finals31.append(tot50)
                print('kcc1 ka gyaarahwaan total: ', kcc_tot31)
                print('oopl1 ka gyaarahwaan total: ', oopl_tot31)
                print('kcc finals1 ka value: ', kcc_finals31)
                print('oopl finals1 ka value: ', oopl_finals31)
                print('kcc_tot31 ka value: ', kcc_tot31)
                print('oopl_tot31 ka value: ', oopl_tot31)
                tds31=oopl_tot31*10/100
                net31=oopl_tot31-tds31
                final_amount31=net31-tot1_oopl31
                print('tot_opd31 kcc ka value: ', tot_opd_kcc31)
                print('tot_opd31 oopl ka value: ', tot_opd_oopl31)
                print('tds31 ka value: ', tds31)
                print('net31 ka value: ', net31)
                print('final_amount31 ka value: ', final_amount31)
                #3rd Month calculations
                tot51=0
                for ele51 in eles_kcc3:
                    if ele51 is not None:
                        tot51+=ele51
                print('tot51 ka value: ', tot51)
                tot1_oopl51=0
                for ele51 in eles_oopl3:
                    if ele51 is not None:
                        tot1_oopl51+=ele51
                print('tot1_oopl51 ka value: ', tot1_oopl51)
                tot_comb51=tot51+tot1_oopl51
                print('tot comb51 ka value ', tot_comb51)
                tot57=0
                for kccexp51 in kcc_total_exp3:
                    if kccexp51 is not None:
                        tot57+=kccexp51
                print('tot57 ka value: ', tot57)
                tot58=0
                for ooplexp51 in oopl_total_exp3:
                    if ooplexp51 is not None:
                        tot58+=ooplexp51
                print('tot58 ka value: ', tot58)
                tot52=tot57+tot58
                print('tot52 ka value: ', tot52)
                tot53=tot_comb51-tot52
                print('tot53 ka value: ', tot53)
                if tot53>=2000000:
                    val31=2000000
                else:
                    val31=tot53
                print('val 31 ka value: ', val31)
                if tot53>=4000000:
                    val32=2000000
                else:
                    if tot53>=2000000:
                        val32=tot53-2000000
                    else:
                        val32=0
                print('val 32 ka value: ', val32)
                if tot53>=6000000:
                    val33=2000000
                else:
                    if tot53>=4000000:
                        val33=tot53-4000000
                    else:
                        val33=0
                print('val 33 ka value: ', val33)
                if tot53>=9000000:
                    val34=3000000
                else:
                    if tot53>=6000000:
                        val34=tot53-6000000
                    else:
                        val34=0
                print('val 34 ka value: ', val34)
                if tot53>=9000000:
                    val35=tot53-9000000
                else:
                    val35=0
                print('val 35 ka value: ', val35)
                tot54=val31+val32+val33+val34+val35
                print('tot54  ka value: ', tot54)
                print('tot54 ka type ka value: ', type(tot54))
                val36=Decimal(val31*10/100)
                val37=Decimal(val32*15/100)
                val38=Decimal(val33*20/100)
                val39=Decimal(val34*30/100)
                val40=Decimal(val35*38/100)
                print('val 36, 37, 38, 39, 40 ka value: ', val36, val37, val38, val39, val40)
                print('val36 ka type value:', type(val36))
                tot55=val36+val37+val38+val39+val40
                print('tot55  ka value: ', tot55)
                val41=val31-val36
                val42=val32-val37
                val43=val33-val38
                val44=val34-val39
                val45=val35-val40
                print('val 41, 42, 43, 44, 45 ka value: ', val41, val42, val43, val44, val45)
                tot56=val41+val42+val43+val44+val45
                print('tot56 ka value: ', tot56)
                tot59=tot55+tot57-tot51
                tot60=tot56+tot58-tot1_oopl51
                print('tot59 ka value: ', tot59)
                print('tot60 ka value: ', tot60)
                kcc_finals51=[]
                oopl_finals51=[]
                kcc_tot51=0
                oopl_tot51=0
                if additional_income_total3['amount__sum']:
                    tot61=tot59-oopl_add_in_kcc_third
                    tot62=tot60+oopl_add_in_kcc_third
                    print('1st time tot61 ka value: ', tot61)
                    print('1st time tot62 ka value: ', tot62)
                    kcc_tot51=tot61
                    oopl_tot51=tot62
                    kcc_finals51.append(tot61)
                    oopl_finals51.append(tot62)
                    print('kcc ka pehla total: ', kcc_tot51)
                    print('oopl ka pehla total: ', oopl_tot51)
                else:
                    tot61=tot59
                    tot62=tot60
                    print('1st time tot61 ka value: ', tot61)
                    print('1st time tot62 ka value: ', tot62)
                    kcc_tot51=tot61
                    oopl_tot51=tot62
                    kcc_finals51.append(tot61)
                    oopl_finals51.append(tot62)
                    print('kcc ka pehla total: ', kcc_tot51)
                    print('oopl ka pehla total: ', oopl_tot51)
                if additional_income_oopl_total3['amount__sum']:
                    tot63=tot61+kcc_add_in_oopl_third
                    tot64=tot62-kcc_add_in_oopl_third
                    print('1st time tot63 ka value: ', tot63)
                    print('1st time tot64 ka value: ', tot64)
                    kcc_tot51=tot63
                    oopl_tot51=tot64
                    kcc_finals51.append(tot63)
                    oopl_finals51.append(tot64)
                    print('kcc ka doosra total: ', kcc_tot51)
                    print('oopl ka doosra total: ', oopl_tot51)
                else:
                    tot63=tot61
                    tot64=tot62
                    print('1st time tot63 ka value: ', tot63)
                    print('1st time tot64 ka value: ', tot64)
                    kcc_tot51=tot63
                    oopl_tot51=tot64
                    kcc_finals51.append(tot63)
                    oopl_finals51.append(tot64)
                    print('kcc ka doosra total: ', kcc_tot51)
                    print('oopl ka doosra total: ', oopl_tot51)
                if other_expenses_total3['amount__sum']:
                    tot65=tot63+oopl_ot_exp_kcc_third
                    tot66=tot64-oopl_ot_exp_kcc_third
                    print('1st time tot65 ka value: ', tot65)
                    print('1st time tot66 ka value: ', tot66)
                    kcc_tot51=tot65
                    oopl_tot51=tot66
                    kcc_finals51.append(tot65)
                    oopl_finals51.append(tot66)
                    print('kcc ka chautha total: ', kcc_tot51)
                    print('oopl ka chautha total: ', oopl_tot51)
                else:
                    tot65=tot63
                    tot66=tot64
                    print('1st time tot65 ka value: ', tot65)
                    print('1st time tot66 ka value: ', tot66)
                    kcc_tot51=tot65
                    oopl_tot51=tot66
                    kcc_finals51.append(tot65)
                    oopl_finals51.append(tot66)
                    print('kcc ka chautha total: ', kcc_tot51)
                    print('oopl ka chautha total: ', oopl_tot51)
                if other_expenses_oopl_total3['amount__sum']:
                    tot67=tot65-kcc_ot_exp_oopl_third
                    tot68=tot66+kcc_ot_exp_oopl_third
                    print('1st time tot67 ka value: ', tot67)
                    print('1st time tot68 ka value: ', tot68)
                    kcc_tot51=tot67
                    oopl_tot51=tot68
                    kcc_finals51.append(tot67)
                    oopl_finals51.append(tot68)
                    print('kcc ka saatwaan total: ', kcc_tot51)
                    print('oopl ka saatwaan total: ', oopl_tot51)
                else:
                    tot67=tot65
                    tot68=tot66
                    print('1st time tot67 ka value: ', tot67)
                    print('1st time tot68 ka value: ', tot68)
                    kcc_tot51=tot67
                    oopl_tot51=tot68
                    kcc_finals51.append(tot67)
                    oopl_finals51.append(tot68)
                    print('kcc ka saatwaan total: ', kcc_tot51)
                    print('oopl ka saatwaan total: ', oopl_tot51)
                if opd3:
                    tot_opd51=opd_total3['opd__amount__sum']
                else:
                    tot_opd51=0
                print('tot_opd51 ka value: ', tot_opd51)
                tot_opd_kcc51=tot_opd51*20/100
                tot_opd_oopl51=tot_opd51-tot_opd_kcc51
                tot69=tot67-Decimal(tot_opd_oopl51)
                tot70=tot68+Decimal(tot_opd_oopl51)
                print('1st time tot69 ka value: ', tot69)
                print('1st time tot70 ka value: ', tot70)
                kcc_tot51=tot69
                oopl_tot51=tot70
                kcc_finals51.append(tot69)
                oopl_finals51.append(tot70)
                print('kcc1 ka gyaarahwaan total: ', kcc_tot51)
                print('oopl1 ka gyaarahwaan total: ', oopl_tot51)
                print('kcc finals1 ka value: ', kcc_finals51)
                print('oopl finals1 ka value: ', oopl_finals51)
                print('kcc_tot51 ka value: ', kcc_tot51)
                print('oopl_tot51 ka value: ', oopl_tot51)
                tds51=oopl_tot51*10/100
                net51=oopl_tot51-tds51
                final_amount51=net51-tot1_oopl51
                print('tot_opd51 kcc ka value: ', tot_opd_kcc51)
                print('tot_opd51 oopl ka value: ', tot_opd_oopl51)
                print('tds51 ka value: ', tds51)
                print('net51 ka value: ', net51)
                print('final_amount51 ka value: ', final_amount51)
                kcc_add_inc_final=[]
                oopl_add_inc_final=[]
                oopl_ot_exp_final=[]
                kcc_ot_exp_final=[]
                if additional_income_total1['amount__sum']:
                    kcc_add_inc_final.append(additional_income_total1['amount__sum'])
                if additional_income_total2['amount__sum']:
                    kcc_add_inc_final.append(additional_income_total2['amount__sum'])
                if additional_income_total3['amount__sum']:
                    kcc_add_inc_final.append(additional_income_total3['amount__sum'])
                if additional_income_oopl_total1['amount__sum']:
                    oopl_add_inc_final.append(additional_income_oopl_total1['amount__sum'])
                if additional_income_oopl_total2['amount__sum']:
                    oopl_add_inc_final.append(additional_income_oopl_total2['amount__sum'])
                if additional_income_oopl_total3['amount__sum']:
                    oopl_add_inc_final.append(additional_income_oopl_total3['amount__sum'])
                if other_expenses_total1['amount__sum']:
                    kcc_ot_exp_final.append(other_expenses_total1['amount__sum'])
                if other_expenses_total2['amount__sum']:
                    kcc_ot_exp_final.append(other_expenses_total2['amount__sum'])
                if other_expenses_total3['amount__sum']:
                    kcc_ot_exp_final.append(other_expenses_total3['amount__sum'])
                if other_expenses_oopl_total1['amount__sum']:
                    oopl_ot_exp_final.append(other_expenses_oopl_total1['amount__sum'])
                if other_expenses_oopl_total2['amount__sum']:
                    oopl_ot_exp_final.append(other_expenses_oopl_total2['amount__sum'])
                if other_expenses_oopl_total3['amount__sum']:
                    oopl_ot_exp_final.append(other_expenses_oopl_total3['amount__sum'])
                total_income=tot_comb1+tot_comb31+tot_comb51
                avg_total_income=Decimal(total_income/3)
                total_kcc_income=tot1+tot31+tot51
                avg_kcc_income=Decimal(total_kcc_income/3)
                total_oopl_income=tot1_oopl1+tot1_oopl31+tot1_oopl51
                avg_oopl_income=Decimal(total_oopl_income/3)
                total_kcc_expenses=tot7+tot37+tot57
                avg_kcc_expenses=Decimal(total_kcc_expenses/3)
                total_oopl_expenses=tot8+tot38+tot58
                avg_oopl_expenses=Decimal(total_oopl_expenses/3)
                total_avg_expenses1=avg_kcc_expenses+avg_oopl_expenses
                a_minus_b_income1=avg_total_income-total_avg_expenses1
                #1st revised bill
                if a_minus_b_income1>=2000000:
                    val46=2000000
                else:
                    val46=a_minus_b_income1
                print('val 46 ka value: ', val46)
                if a_minus_b_income1>=4000000:
                    val47=2000000
                else:
                    if a_minus_b_income1>=2000000:
                        val47=a_minus_b_income1-2000000
                    else:
                        val47=0
                print('val 47 ka value: ', val47)
                if a_minus_b_income1>=6000000:
                    val48=2000000
                else:
                    if a_minus_b_income1>=4000000:
                        val48=a_minus_b_income1-4000000
                    else:
                        val48=0
                print('val 48 ka value: ', val48)
                if a_minus_b_income1>=9000000:
                    val49=3000000
                else:
                    if a_minus_b_income1>=6000000:
                        val49=a_minus_b_income1-6000000
                    else:
                        val49=0
                print('val 49 ka value: ', val49)
                if a_minus_b_income1>=9000000:
                    val50=a_minus_b_income1-9000000
                else:
                    val50=0
                print('val 50 ka value: ', val50)
                tot71=val46+val47+val48+val49+val50
                print('tot71  ka value: ', tot71)
                print('tot71 ka type ka value: ', type(tot71))
                val51=Decimal(val46*10/100)
                val52=Decimal(val47*15/100)
                val53=Decimal(val48*20/100)
                val54=Decimal(val49*30/100)
                val55=Decimal(val50*38/100)
                print('val 51, 52, 53, 54, 55 ka value: ', val51, val52, val53, val54, val55)
                print('val6 ka type value:', type(val51))
                tot72=val51+val52+val53+val54+val55
                print('tot72  ka value: ', tot72)
                val56=val46-val51
                val57=val47-val52
                val58=val48-val53
                val59=val49-val54
                val60=val50-val55
                print('val 56, 57, 58, 59, 60 ka value: ', val56, val57, val58, val59, val60)
                tot73=val56+val57+val58+val59+val60
                print('tot73 ka value: ', tot73)
                tot74=tot72+avg_kcc_expenses-avg_kcc_income
                print('tot74 ka value: ', tot74)
                tot75=tot73+avg_oopl_expenses-avg_oopl_income
                print('tot75 ka value: ', tot75)
                #2nd revised bill
                if a_minus_b_income1>=2000000:
                    val61=2000000
                else:
                    val61=a_minus_b_income1
                print('val 61 ka value: ', val61)
                if a_minus_b_income1>=4000000:
                    val62=2000000
                else:
                    if a_minus_b_income1>=2000000:
                        val62=a_minus_b_income1-2000000
                    else:
                        val62=0
                print('val 62 ka value: ', val62)
                if a_minus_b_income1>=6000000:
                    val63=2000000
                else:
                    if a_minus_b_income1>=4000000:
                        val63=a_minus_b_income1-4000000
                    else:
                        val63=0
                print('val 63 ka value: ', val63)
                if a_minus_b_income1>=9000000:
                    val64=3000000
                else:
                    if a_minus_b_income1>=6000000:
                        val64=a_minus_b_income1-6000000
                    else:
                        val64=0
                print('val 64 ka value: ', val64)
                if a_minus_b_income1>=9000000:
                    val65=a_minus_b_income1-9000000
                else:
                    val65=0
                print('val 65 ka value: ', val65)
                tot76=val61+val62+val63+val64+val65
                print('tot76  ka value: ', tot76)
                print('tot76 ka type ka value: ', type(tot76))
                val66=Decimal(val61*10/100)
                val67=Decimal(val62*15/100)
                val68=Decimal(val63*20/100)
                val69=Decimal(val64*30/100)
                val70=Decimal(val65*38/100)
                print('val 66, 67, 68, 69, 70 ka value: ', val66, val67, val68, val69, val70)
                print('val6 ka type value:', type(val66))
                tot77=val66+val67+val68+val69+val70
                print('tot77  ka value: ', tot77)
                val71=val61-val66
                val72=val62-val67
                val73=val63-val68
                val74=val64-val69
                val75=val65-val70
                print('val 71, 72, 73, 74, 75 ka value: ', val71, val72, val73, val74, val75)
                tot78=val71+val72+val73+val74+val75
                print('tot78 ka value: ', tot78)
                tot79=tot77+avg_kcc_expenses-avg_kcc_income
                print('tot79 ka value: ', tot79)
                tot80=tot78+avg_oopl_expenses-avg_oopl_income
                print('tot80 ka value: ', tot80)
                #3rd revised bill
                if a_minus_b_income1>=2000000:
                    val76=2000000
                else:
                    val76=a_minus_b_income1
                print('val 76 ka value: ', val76)
                if a_minus_b_income1>=4000000:
                    val77=2000000
                else:
                    if a_minus_b_income1>=2000000:
                        val77=a_minus_b_income1-2000000
                    else:
                        val77=0
                print('val 77 ka value: ', val77)
                if a_minus_b_income1>=6000000:
                    val78=2000000
                else:
                    if a_minus_b_income1>=4000000:
                        val78=a_minus_b_income1-4000000
                    else:
                        val78=0
                print('val 78 ka value: ', val78)
                if a_minus_b_income1>=9000000:
                    val79=3000000
                else:
                    if a_minus_b_income1>=6000000:
                        val79=a_minus_b_income1-6000000
                    else:
                        val79=0
                print('val 79 ka value: ', val79)
                if a_minus_b_income1>=9000000:
                    val80=a_minus_b_income1-9000000
                else:
                    val80=0
                print('val 80 ka value: ', val80)
                tot81=val76+val77+val78+val79+val80
                print('tot81  ka value: ', tot81)
                print('tot81 ka type ka value: ', type(tot81))
                val81=Decimal(val76*10/100)
                val82=Decimal(val77*15/100)
                val83=Decimal(val78*20/100)
                val84=Decimal(val79*30/100)
                val85=Decimal(val80*38/100)
                print('val 81, 82, 83, 84, 85 ka value: ', val81, val82, val83, val84, val85)
                print('val6 ka type value:', type(val81))
                tot82=val81+val82+val83+val84+val85
                print('tot82  ka value: ', tot82)
                val86=val76-val81
                val87=val77-val82
                val88=val78-val83
                val89=val79-val84
                val90=val80-val85
                print('val 86, 87, 88, 89, 90 ka value: ', val86, val87, val88, val89, val90)
                tot83=val86+val87+val88+val89+val90
                print('tot83 ka value: ', tot83)
                tot84=tot82+avg_kcc_expenses-avg_kcc_income
                print('tot84 ka value: ', tot84)
                tot85=tot83+avg_oopl_expenses-avg_oopl_income
                print('tot85 ka value: ', tot85)
                tot86=0
                for kcc_tot_add_inc in kcc_add_inc_final:
                    if kcc_tot_add_inc is not None:
                        tot86+=kcc_tot_add_inc
                print('tot86 ka value: ', tot86)
                tot87=0
                for oopl_tot_add_inc in oopl_add_inc_final:
                    if oopl_tot_add_inc is not None:
                        tot87+=oopl_tot_add_inc
                tot88=0
                for oopl_tot_ot_exp in oopl_ot_exp_final:
                    if oopl_tot_ot_exp is not None:
                        tot88+=oopl_tot_ot_exp
                tot89=0
                for kcc_tot_ot_exp in kcc_ot_exp_final:
                    if kcc_tot_ot_exp is not None:
                        tot89+=kcc_tot_ot_exp
                total_before_opd_kcc=tot74+tot79+tot84
                print('total_before_opd_kcc ka value: ', total_before_opd_kcc)
                total_before_opd_oopl=tot75+tot80+tot85
                print('total_before_opd_oopl ka value: ', total_before_opd_oopl)
                total_opd=Decimal(tot_opd_oopl1)+Decimal(tot_opd_oopl31)+Decimal(tot_opd_oopl51)
                print('total_opd ka value: ', total_opd)
                total_after_opd_kcc=total_before_opd_kcc-total_opd
                print('total_after_opd_kcc ka value: ', total_after_opd_kcc)
                total_after_opd_oopl=total_before_opd_oopl+total_opd
                print('total_after_opd_oopl ka value: ', total_after_opd_oopl)
                if tot86>0:
                    tot90=total_after_opd_kcc-tot86
                    tot91=total_after_opd_oopl+tot86
                    print('tot90 ka value: ', tot90)
                    print('tot91 ka value: ', tot91)
                else:
                    tot90=total_after_opd_kcc
                    tot91=total_after_opd_oopl
                if tot87>0:
                    tot92=tot90+tot87
                    tot93=tot91-tot87
                else:
                    tot92=tot90
                    tot93=tot91
                if tot88>0:
                    tot94=tot92-tot88
                    tot95=tot93+tot88
                else:
                    tot94=tot92
                    tot95=tot93
                if tot89>0:
                    tot96=tot94+tot89
                    tot97=tot95-tot89
                else:
                    tot96=tot94
                    tot97=tot95
                if amount_credited_first_month != '':
                    first_month_bill=int(amount_credited_first_month)
                else:
                    first_month_bill=oopl_tot1
                if amount_credited_second_month != '':
                    second_month_bill=int(amount_credited_second_month)
                else:
                    second_month_bill=oopl_tot31
                amount_received_earlier=first_month_bill+second_month_bill
                payable_before_tds_kcc=tot96+amount_received_earlier
                payable_before_tds_oopl=tot97-amount_received_earlier
                tds4=payable_before_tds_oopl*10/100
                net4=payable_before_tds_oopl-tds4
                response=HttpResponse(content_type='application/ms-excel')
                print(response)
                response['Content-Disposition']='attachment; filename=Quarterly Bill-Dhule-'+quarter.upper()+' '+fin_year+'_'+' '+str(datetime.datetime.strptime(str(datetime.datetime.now().date()), '%Y-%m-%d').strftime("%d/%m/%Y"))+'.xlsx'
                wb=Workbook()
                ws=wb.create_sheet("Sheet1")
                ws.title="Provisional Bills"
                ws.sheet_properties.tabColor='FFD700'
                top1=Side(border_style='thick', color='000000')
                bottom1=Side(border_style='thick', color='000000')
                left1=Side(border_style='thick', color='000000')
                right1=Side(border_style='thick', color='000000')
                border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
                border5=Border(top=top1, bottom=bottom1)
                border6=Border(top=top1, right=right1, bottom=bottom1)
                contenido1=PatternFill(patternType='solid', fgColor='FFFFFF')
                contenido2=PatternFill(patternType='solid', fgColor='DCDCDC')
                total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
                alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=True, shrink_to_fit=False, indent=0)
                alignment1=Alignment(horizontal='center', vertical='center')
                alignment2=Alignment(horizontal='right', vertical='center')
                alignment3=Alignment(horizontal='left', vertical='center')
                top2=Side(border_style='thin', color='000000')
                bottom2=Side(border_style='thin', color='000000')
                left2=Side(border_style='thin', color='000000')
                right2=Side(border_style='thin', color='000000')
                border11=Border(right=right2)
                border12=Border(left=left2)
                border13=Border(bottom=bottom2)
                border17=Border(left=left2, right=right2, bottom=bottom2)
                border18=Border(left=left2, bottom=bottom2)
                border19=Border(right=right2, bottom=bottom2)
                ws.merge_cells('B3:G3')
                top_col1= ws['B3']
                if month2 == '01':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JANUARY, ', year4)
                elif month2 == '02':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF FEBRUARY, ', year4)
                elif month2 == '03':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MARCH, ', year4)
                elif month2 == '04':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF APRIL, ', year4)
                elif month2 == '05':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MAY, ', year4)
                elif month2 == '06':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JUNE, ', year4)
                elif month2 == '07':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JULY, ', year4)
                elif month2 == '08':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF AUGUST, ', year4)
                elif month2 == '09':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF SEPTEMBER, ', year4)
                elif month2 == '10':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF OCTOBER, ', year4)
                elif month2 == '11':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF NOVEMBER, ', year4)
                elif month2 == '12':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF DECEMBER, ', year4)
                top_col1.font=Font(bold=True)
                top_col1.border=border1
                top_col1.alignment=alignment1
                ws.column_dimensions['A'].width=5
                ws.column_dimensions['B'].width=20
                ws.column_dimensions['C'].width=20
                ws.column_dimensions['D'].width=15
                ws.column_dimensions['F'].width=18
                ws.column_dimensions['G'].width=15
                ws['C3'].border=border5
                ws['D3'].border=border5
                ws['E3'].border=border5
                ws['F3'].border=border5
                ws['G3'].border=border6
                ws.merge_cells('B4:G4')
                date_col1= ws['B4']
                date_col1.value="{}{}{}{}{}{}".format('DATE : ', day2, '/', month2, '/', year4)
                date_col1.border=border18
                date_col1.alignment=alignment2
                ws['C4'].border=border13
                ws['D4'].border=border13
                ws['E4'].border=border13
                ws['F4'].border=border13
                ws['G4'].border=border19
                ws.merge_cells('B5:G5')
                ref_col1= ws['B5']
                if month2 == '01':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1-1, '-', joined_year1, '/', '10')
                elif month2 == '02':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1-1, '-', joined_year1, '/', '11')
                elif month2 == '03':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1-1, '-', joined_year1, '/', '12')
                elif month2 == '04':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '01')
                elif month2 == '05':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '02')
                elif month2 == '06':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '03')
                elif month2 == '07':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '04')
                elif month2 == '08':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '05')
                elif month2 == '09':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '06')
                elif month2 == '10':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '07')
                elif month2 == '11':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '08')
                elif month2 == '12':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int1, '-', joined_year1+1, '/', '09')
                ref_col1.border=border18
                ref_col1.alignment=alignment2
                ws['C5'].border=border13
                ws['D5'].border=border13
                ws['E5'].border=border13
                ws['F5'].border=border13
                ws['G5'].border=border19
                ws.merge_cells('B6:G6')
                salutation_col1_1= ws['B6']
                salutation_col1_1.value='TO,'
                salutation_col1_1.font=Font(bold=True)
                salutation_col1_1.border=border12
                salutation_col1_1.fill=contenido1
                salutation_col1_1.alignment=alignment3
                ws['C6'].fill=contenido1
                ws['D6'].fill=contenido1
                ws['E6'].fill=contenido1
                ws['F6'].fill=contenido1
                ws['G6'].fill=contenido1
                ws['G6'].border=border11
                ws.merge_cells('B7:G7')
                salutation_col2_1= ws['B7']
                salutation_col2_1.value='THE DIRECTOR,'
                salutation_col2_1.font=Font(bold=True)
                salutation_col2_1.border=border12
                salutation_col2_1.fill=contenido1
                salutation_col2_1.alignment=alignment3
                ws['C7'].fill=contenido1
                ws['D7'].fill=contenido1
                ws['E7'].fill=contenido1
                ws['F7'].fill=contenido1
                ws['G7'].fill=contenido1
                ws['G7'].border=border11
                ws.merge_cells('B8:G8')
                salutation_col3_1= ws['B8']
                salutation_col3_1.value='KHANDESH CANCER CENTRE (OHRPL), DHULE.'
                salutation_col3_1.font=Font(bold=True)
                salutation_col3_1.border=border12
                salutation_col3_1.fill=contenido1
                salutation_col3_1.alignment=alignment3
                ws['C8'].fill=contenido1
                ws['D8'].fill=contenido1
                ws['E8'].fill=contenido1
                ws['F8'].fill=contenido1
                ws['G8'].fill=contenido1
                ws['G8'].border=border11
                ws.merge_cells('B9:G9')
                message_col4_1= ws['B9']
                message_col4_1.value='Dear Sir/Madam,'
                message_col4_1.font=Font(size=8)
                message_col4_1.border=border12
                message_col4_1.fill=contenido1
                message_col4_1.alignment=alignment3
                ws['C9'].fill=contenido1
                ws['D9'].fill=contenido1
                ws['E9'].fill=contenido1
                ws['F9'].fill=contenido1
                ws['G9'].fill=contenido1
                ws['G9'].border=border11
                ws.merge_cells('B10:G10')
                message_col_1= ws['B10']
                if month2 == '01':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of January, ', year4, '.')
                elif month2 == '02':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of February, ', year4, '.')
                elif month2 == '03':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of March, ', year4, '.')
                elif month2 == '04':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of April, ', year4, '.')
                elif month2 == '05':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of May, ', year4, '.')
                elif month2 == '06':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of June, ', year4, '.')
                elif month2 == '07':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of July, ', year4, '.')
                elif month2 == '08':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of August, ', year4, '.')
                elif month2 == '09':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of September, ', year4, '.')
                elif month2 == '10':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of October, ', year4, '.')
                elif month2 == '11':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of November, ', year4, '.')
                elif month2 == '12':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of December, ', year4, '.')
                message_col_1.font=Font(size=8)
                message_col_1.border=border12
                message_col_1.fill=contenido1
                message_col_1.alignment=alignment3
                ws['C10'].fill=contenido1
                ws['D10'].fill=contenido1
                ws['E10'].fill=contenido1
                ws['F10'].fill=contenido1
                ws['G10'].fill=contenido1
                ws['G10'].border=border11
                ws.merge_cells('B11:G11')
                message_col1_1= ws['B11']
                message_col1_1.value='Please settle the bill before the 10th of this month as agreed. Details of the bill and bank details are as follows.'
                message_col1_1.font=Font(size=8)
                message_col1_1.border=border18
                message_col1_1.fill=contenido1
                message_col1_1.alignment=alignment3
                ws['C11'].fill=contenido1
                ws['D11'].fill=contenido1
                ws['E11'].fill=contenido1
                ws['F11'].fill=contenido1
                ws['G11'].fill=contenido1
                ws['C11'].border=border13
                ws['D11'].border=border13
                ws['E11'].border=border13
                ws['F11'].border=border13
                ws['G11'].border=border19
                ws.merge_cells('B12:E12')
                head1_1= ws['B12']
                head1_1.value='PARTICULARS'
                ws['F12'].value='CASH & BANK WITH'
                ws['G12'].value='AMOUNT'
                head1_1.font=Font(bold=True)
                head1_1.border=border18
                head1_1.fill=contenido2
                head1_1.alignment=alignment3
                ws['F12'].border=border17
                ws['F12'].fill=contenido2
                ws['F12'].alignment=alignment1
                ws['F12'].font=Font(bold=True)
                ws['G12'].border=border19
                ws['G12'].fill=contenido2
                ws['G12'].alignment=alignment1
                ws['G12'].font=Font(bold=True)
                ws['C12'].border=border13
                ws['C12'].fill=contenido2
                ws['D12'].border=border13
                ws['D12'].fill=contenido2
                ws['E12'].border=border13
                ws['E12'].fill=contenido2
                row_1=13
                print()
                print('incs ka value_first_month: ', incs_first_month)
                print()
                print('descs ka value_first_month: ', descs_first_month)
                print()
                print('center ka value_first_month: ', center_first_month)
                for income_first_month in incs_first_month:
                    ws.merge_cells('B'+str(row_1)+':'+'E'+str(row_1))
                    income_item_1= ws['B'+str(row_1)]
                    x=incs_first_month.index(income_first_month)
                    income_item_1.value=descs_first_month[x]
                    ws['F'+str(row_1)].value=center_first_month[x]
                    ws['G'+str(row_1)].value=int(income_first_month)
                    income_item_1.font=Font(size=8, bold=True)
                    income_item_1.border=border18
                    income_item_1.alignment=alignment3
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=8, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].fill=total_figure
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=8, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['D'+str(row_1)].border=border13
                    ws['E'+str(row_1)].border=border13
                    row_1+=1
                print()
                print('row_1 ka value 1: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'E'+str(row_1))
                total_a_1= ws['B'+str(row_1)]
                total_a_1.value=''
                ws['F'+str(row_1)].value='TOTAL (A)'
                ws['G'+str(row_1)].value=tot_comb1
                total_a_1.font=Font(size=10, bold=True)
                total_a_1.border=border18
                total_a_1.alignment=alignment3
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(size=10, bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=10, bold=True)
                ws['C'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['E'+str(row_1)].border=border13
                row_1+=1
                print()
                print('row_1 ka value 2: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'E'+str(row_1))
                head2_1= ws['B'+str(row_1)]
                head2_1.value='COMMON EXPENSES'
                ws['F'+str(row_1)].value='PAID BY'
                ws['G'+str(row_1)].value=''
                head2_1.font=Font(bold=True)
                head2_1.border=border18
                head2_1.fill=contenido2
                head2_1.alignment=alignment3
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].fill=contenido2
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].fill=contenido2
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].fill=contenido2
                ws['D'+str(row_1)].border=border13
                ws['D'+str(row_1)].fill=contenido2
                ws['E'+str(row_1)].border=border13
                ws['E'+str(row_1)].fill=contenido2
                row_1+=1
                print()
                print('row_1 ka value 3: ', row_1)
                for expense_first_month in exps_first_month:
                    ws.merge_cells('B'+str(row_1)+':'+'E'+str(row_1))
                    expense_item_1= ws['B'+str(row_1)]
                    x=exps_first_month.index(expense_first_month)
                    expense_item_1.value=descs1_first_month[x]
                    ws['F'+str(row_1)].value=center1_first_month[x]
                    ws['G'+str(row_1)].value=int(expense_first_month)
                    expense_item_1.font=Font(size=8, bold=True)
                    expense_item_1.border=border18
                    expense_item_1.alignment=alignment3
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=8, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].fill=total_figure
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=8, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['D'+str(row_1)].border=border13
                    ws['E'+str(row_1)].border=border13
                    row_1+=1
                print()
                print('row_1 ka value 4: ', row_1)
                if com_exp_kcc1:
                    for kcc_exp in com_exp_kcc1:
                        ws.merge_cells('B'+str(row_1)+':'+'E'+str(row_1))
                        expense_item1_1= ws['B'+str(row_1)]
                        expense_item1_1.value=kcc_exp.particulars
                        ws['F'+str(row_1)].value='KCC'
                        ws['G'+str(row_1)].value=int(kcc_exp.amount)
                        expense_item1_1.font=Font(size=8, bold=True)
                        expense_item1_1.border=border18
                        expense_item1_1.alignment=alignment3
                        ws['F'+str(row_1)].border=border17
                        ws['F'+str(row_1)].alignment=alignment1
                        ws['F'+str(row_1)].font=Font(size=8, bold=True)
                        ws['G'+str(row_1)].border=border19
                        ws['G'+str(row_1)].fill=total_figure
                        ws['G'+str(row_1)].alignment=alignment1
                        ws['G'+str(row_1)].font=Font(size=8, bold=True)
                        ws['C'+str(row_1)].border=border13
                        ws['D'+str(row_1)].border=border13
                        ws['E'+str(row_1)].border=border13
                        row_1+=1
                print()
                print('row_1 ka value 5: ', row_1)
                if com_exp_oopl1:
                    for oopl_exp in com_exp_oopl1:
                        ws.merge_cells('B'+str(row_1)+':'+'E'+str(row_1))
                        expense_item2_1= ws['B'+str(row_1)]
                        expense_item2_1.value=oopl_exp.particulars
                        ws['F'+str(row_1)].value='OOPL'
                        ws['G'+str(row_1)].value=int(oopl_exp.amount)
                        expense_item2_1.font=Font(size=8, bold=True)
                        expense_item2_1.border=border18
                        expense_item2_1.alignment=alignment3
                        ws['F'+str(row_1)].border=border17
                        ws['F'+str(row_1)].alignment=alignment1
                        ws['F'+str(row_1)].font=Font(size=8, bold=True)
                        ws['G'+str(row_1)].border=border19
                        ws['G'+str(row_1)].fill=total_figure
                        ws['G'+str(row_1)].alignment=alignment1
                        ws['G'+str(row_1)].font=Font(size=8, bold=True)
                        ws['C'+str(row_1)].border=border13
                        ws['D'+str(row_1)].border=border13
                        ws['E'+str(row_1)].border=border13
                        row_1+=1
                print()
                print('row_1 ka value 6: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'E'+str(row_1))
                total_b_1= ws['B'+str(row_1)]
                total_b_1.value=''
                ws['F'+str(row_1)].value='TOTAL (B)'
                ws['G'+str(row_1)].value=tot2
                total_b_1.font=Font(size=10, bold=True)
                total_b_1.border=border18
                total_b_1.alignment=alignment3
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(size=10, bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=10, bold=True)
                ws['C'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['E'+str(row_1)].border=border13
                row_1+=1
                print()
                print('row_1 ka value 7: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'F'+str(row_1))
                total_a_b_1= ws['B'+str(row_1)]
                total_a_b_1.value='TOTAL AMOUNT AFTER COMMON EXPENSES (A-B)'
                ws['G'+str(row_1)].value=tot3
                total_a_b_1.font=Font(bold=True)
                total_a_b_1.border=border18
                total_a_b_1.alignment=alignment1
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                ws['C'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['E'+str(row_1)].border=border13
                row_1+=1
                print()
                print('row_1 ka value 8: ', row_1)
                ws['B'+str(row_1)].value=''
                ws['C'+str(row_1)].value='SLAB'
                ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                head3_1= ws['D'+str(row_1)]
                head3_1.value='FINAL % (KCC)'
                head3_1.font=Font(bold=True)
                head3_1.border=border18
                head3_1.fill=contenido2
                head3_1.alignment=alignment1
                ws['F'+str(row_1)].value='KCC'
                ws['G'+str(row_1)].value='OOPL'
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].fill=contenido2
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(bold=True)
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].fill=contenido2
                ws['C'+str(row_1)].alignment=alignment1
                ws['C'+str(row_1)].font=Font(bold=True)
                ws['E'+str(row_1)].border=border13
                ws['E'+str(row_1)].fill=contenido2
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].fill=contenido2
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].fill=contenido2
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                row_1+=1
                print()
                print('row_1 ka value 9: ', row_1)
                ws['B'+str(row_1)].value=val1
                ws['C'+str(row_1)].value='Upto 20 Lacs'
                ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                dist1_1= ws['D'+str(row_1)]
                dist1_1.value=10
                dist1_1.font=Font(size=9, bold=True)
                dist1_1.border=border18
                dist1_1.alignment=alignment1
                ws['F'+str(row_1)].value=val6
                ws['G'+str(row_1)].value=val11
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(size=9)
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].alignment=alignment1
                ws['C'+str(row_1)].font=Font(size=9)
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(size=9)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=9)
                row_1+=1
                print()
                print('row_1 ka value 10: ', row_1)
                ws['B'+str(row_1)].value=val2
                ws['C'+str(row_1)].value='20 Lacs - 40 Lacs'
                ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                dist2_1= ws['D'+str(row_1)]
                dist2_1.value=15
                dist2_1.font=Font(size=9, bold=True)
                dist2_1.border=border18
                dist2_1.alignment=alignment1
                ws['F'+str(row_1)].value=val7
                ws['G'+str(row_1)].value=val12
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(size=9)
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].alignment=alignment1
                ws['C'+str(row_1)].font=Font(size=9)
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(size=9)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=9)
                row_1+=1
                print()
                print('row_1 ka value 11: ', row_1)
                ws['B'+str(row_1)].value=val3
                ws['C'+str(row_1)].value='40 Lacs - 60 Lacs'
                ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                dist3_1= ws['D'+str(row_1)]
                dist3_1.value=20
                dist3_1.font=Font(size=9, bold=True)
                dist3_1.border=border18
                dist3_1.alignment=alignment1
                ws['F'+str(row_1)].value=val8
                ws['G'+str(row_1)].value=val13
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(size=9)
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].alignment=alignment1
                ws['C'+str(row_1)].font=Font(size=9)
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(size=9)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=9)
                row_1+=1
                print()
                print('row_1 ka value 12: ', row_1)
                ws['B'+str(row_1)].value=val4
                ws['C'+str(row_1)].value='60 Lacs - 90 Lacs'
                ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                dist4_1= ws['D'+str(row_1)]
                dist4_1.value=30
                dist4_1.font=Font(size=9, bold=True)
                dist4_1.border=border18
                dist4_1.alignment=alignment1
                ws['F'+str(row_1)].value=val9
                ws['G'+str(row_1)].value=val14
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(size=9)
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].alignment=alignment1
                ws['C'+str(row_1)].font=Font(size=9)
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(size=9)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=9)
                row_1+=1
                print()
                print('row_1 ka value 13: ', row_1)
                ws['B'+str(row_1)].value=val5
                ws['C'+str(row_1)].value='Above 90 Lacs'
                ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                dist5_1= ws['D'+str(row_1)]
                dist5_1.value=38
                dist5_1.font=Font(size=9, bold=True)
                dist5_1.border=border18
                dist5_1.alignment=alignment1
                ws['F'+str(row_1)].value=val10
                ws['G'+str(row_1)].value=val15
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(size=9)
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].alignment=alignment1
                ws['C'+str(row_1)].font=Font(size=9)
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(size=9)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=9)
                row_1+=1
                print()
                print('row_1 ka value 14: ', row_1)
                ws['B'+str(row_1)].value=tot4
                ws.merge_cells('C'+str(row_1)+':'+'E'+str(row_1))
                dist_tot_1= ws['C'+str(row_1)]
                dist_tot_1.value=''
                dist_tot_1.font=Font(bold=True)
                dist_tot_1.border=border18
                dist_tot_1.alignment=alignment1
                ws['F'+str(row_1)].value=tot5
                ws['G'+str(row_1)].value=tot6
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(bold=True)
                ws['E'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                row_1+=1
                print()
                print('row_1 ka value 15: ', row_1)
                ws['B'+str(row_1)].value='ADD'
                ws.merge_cells('C'+str(row_1)+':'+'E'+str(row_1))
                addition_1_1= ws['C'+str(row_1)]
                addition_1_1.value='COMMON EXPENSES PAID BY KCC AND OOPL RESP.'
                addition_1_1.font=Font(bold=True)
                addition_1_1.border=border18
                addition_1_1.alignment=alignment1
                ws['F'+str(row_1)].value=tot7
                ws['G'+str(row_1)].value=tot8
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(bold=True)
                ws['E'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                row_1+=1
                print()
                print('row_1 ka value 16: ', row_1)
                ws['B'+str(row_1)].value='LESS'
                ws.merge_cells('C'+str(row_1)+':'+'E'+str(row_1))
                subtraction_1_1= ws['C'+str(row_1)]
                subtraction_1_1.value='ADVANCE RECEIVED BY KCC AND OOPL RESP.'
                subtraction_1_1.font=Font(bold=True)
                subtraction_1_1.border=border18
                subtraction_1_1.alignment=alignment1
                ws['F'+str(row_1)].value=tot1
                ws['G'+str(row_1)].value=tot1_oopl1
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(bold=True)
                ws['E'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                row_1+=1
                print()
                print('row_1 ka value 17: ', row_1)
                ws['B'+str(row_1)].value=''
                ws.merge_cells('C'+str(row_1)+':'+'E'+str(row_1))
                sannaata_1_1= ws['C'+str(row_1)]
                sannaata_1_1.value=''
                sannaata_1_1.font=Font(bold=True)
                sannaata_1_1.border=border18
                sannaata_1_1.alignment=alignment1
                ws['F'+str(row_1)].value=tot9
                ws['G'+str(row_1)].value=tot10
                ws['B'+str(row_1)].border=border17
                ws['B'+str(row_1)].alignment=alignment1
                ws['B'+str(row_1)].font=Font(bold=True)
                ws['E'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border17
                ws['F'+str(row_1)].alignment=alignment1
                ws['F'+str(row_1)].font=Font(bold=True)
                ws['G'+str(row_1)].border=border19
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                row_1+=1
                print()
                print('row_1 ka value 18: ', row_1)
                if additional_income_total1['amount__sum']:
                    if additional_income_desc_first_month != '':
                        ws['B'+str(row_1)].value=additional_income_desc_first_month
                    else:
                        ws['B'+str(row_1)].value='Additional Income (KCC)'
                    if kcc_share_add_in1_first_month != '':
                        ws['C'+str(row_1)].value="{}{}{}".format('KCC-', k_kcc, '%')
                    else:
                        ws['C'+str(row_1)].value='KCC-50%'
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras1_1= ws['D'+str(row_1)]
                    if kcc_share_add_in1_first_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_kcc, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if oopl_add_in_kcc:
                        ws['F'+str(row_1)].value=oopl_add_in_kcc
                        ws['G'+str(row_1)].value=oopl_add_in_kcc
                    else:
                        ws['F'+str(row_1)].value=0
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 19: ', row_1)
                    ws['B'+str(row_1)].value=additional_income_total1['amount__sum']
                    if kcc_add_in_kcc:
                        ws['C'+str(row_1)].value=kcc_add_in_kcc
                    else:
                        ws['C'+str(row_1)].value=0
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras2_1= ws['D'+str(row_1)]
                    if oopl_add_in_kcc:
                        extras2_1.value=oopl_add_in_kcc
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot11:
                        ws['F'+str(row_1)].value=tot11
                    else:
                        ws['F'+str(row_1)].value=0
                    if tot12:
                        ws['G'+str(row_1)].value=tot12
                    else:
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].fill=total_figure
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 20: ', row_1)
                if additional_income_oopl_total1['amount__sum']:
                    if additional_income_oopl_desc_first_month != '':
                        ws['B'+str(row_1)].value=additional_income_oopl_desc_first_month
                    else:
                        ws['B'+str(row_1)].value='Additional Income (OOPL)'
                    if kcc_share_add_in2_first_month != '':
                        ws['C'+str(row_1)].value="{}{}{}".format('KCC-', k_oopl, '%')
                    else:
                        ws['C'+str(row_1)].value='KCC-50%'
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras1_1= ws['D'+str(row_1)]
                    if kcc_share_add_in2_first_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_oopl, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if kcc_add_in_oopl:
                        ws['F'+str(row_1)].value=kcc_add_in_oopl
                        ws['G'+str(row_1)].value=kcc_add_in_oopl
                    else:
                        ws['F'+str(row_1)].value=0
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 21: ', row_1)
                    ws['B'+str(row_1)].value=additional_income_oopl_total1['amount__sum']
                    if kcc_add_in_oopl:
                        ws['C'+str(row_1)].value=kcc_add_in_oopl
                    else:
                        ws['C'+str(row_1)].value=0
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras2_1= ws['D'+str(row_1)]
                    if oopl_add_in_oopl:
                        extras2_1.value=oopl_add_in_oopl
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot13:
                        ws['F'+str(row_1)].value=tot13
                    elif tot11:
                        ws['F'+str(row_1)].value=tot11
                    else:
                        ws['F'+str(row_1)].value=0
                    if tot14:
                        ws['G'+str(row_1)].value=tot14
                    elif tot12:
                        ws['G'+str(row_1)].value=tot12
                    else:
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].fill=total_figure
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 22: ', row_1)
                if other_expenses_total1['amount__sum']:
                    if other_expenses_desc_first_month != '':
                        ws['B'+str(row_1)].value=other_expenses_desc_first_month
                    else:
                        ws['B'+str(row_1)].value='Other Expenses (KCC)'
                    if kcc_share_other_expenses1_first_month != '':
                        ws['C'+str(row_1)].value="{}{}{}".format('KCC-', k_kcc_ot, '%')
                    else:
                        ws['C'+str(row_1)].value='KCC-50%'
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras1_1= ws['D'+str(row_1)]
                    if kcc_share_other_expenses1_first_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_kcc_ot, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if oopl_ot_exp_kcc:
                        ws['F'+str(row_1)].value=oopl_ot_exp_kcc
                        ws['G'+str(row_1)].value=oopl_ot_exp_kcc
                    else:
                        ws['F'+str(row_1)].value=0
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 23: ', row_1)
                    ws['B'+str(row_1)].value=other_expenses_total1['amount__sum']
                    if kcc_ot_exp_kcc:
                        ws['C'+str(row_1)].value=kcc_ot_exp_kcc
                    else:
                        ws['C'+str(row_1)].value=0
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras2_1= ws['D'+str(row_1)]
                    if oopl_ot_exp_kcc:
                        extras2_1.value=oopl_ot_exp_kcc
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot15:
                        ws['F'+str(row_1)].value=tot15
                    elif tot13:
                        ws['F'+str(row_1)].value=tot13
                    elif tot11:
                        ws['F'+str(row_1)].value=tot11
                    else:
                        ws['F'+str(row_1)].value=0
                    if tot16:
                        ws['G'+str(row_1)].value=tot16
                    elif tot14:
                        ws['G'+str(row_1)].value=tot14
                    elif tot12:
                        ws['G'+str(row_1)].value=tot12
                    else:
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].fill=total_figure
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 24: ', row_1)
                if other_expenses_oopl_total1['amount__sum']:
                    if other_expenses_oopl_desc_first_month != '':
                        ws['B'+str(row_1)].value=other_expenses_oopl_desc_first_month
                    else:
                        ws['B'+str(row_1)].value='Other Expenses (OOPL)'
                    if kcc_share_other_expenses2_first_month != '':
                        ws['C'+str(row_1)].value="{}{}{}".format('KCC-', k_oopl_ot, '%')
                    else:
                        ws['C'+str(row_1)].value='KCC-50%'
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras1_1= ws['D'+str(row_1)]
                    if kcc_share_other_expenses2_first_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_oopl_ot, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if kcc_ot_exp_oopl:
                        ws['F'+str(row_1)].value=kcc_ot_exp_oopl
                        ws['G'+str(row_1)].value=kcc_ot_exp_oopl
                    else:
                        ws['F'+str(row_1)].value=0
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 25: ', row_1)
                    ws['B'+str(row_1)].value=other_expenses_oopl_total1['amount__sum']
                    if kcc_ot_exp_oopl:
                        ws['C'+str(row_1)].value=kcc_ot_exp_oopl
                    else:
                        ws['C'+str(row_1)].value=0
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras2_1= ws['D'+str(row_1)]
                    if oopl_ot_exp_oopl:
                        extras2_1.value=oopl_ot_exp_oopl
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot17:
                        ws['F'+str(row_1)].value=tot17
                    elif tot15:
                        ws['F'+str(row_1)].value=tot15
                    elif tot13:
                        ws['F'+str(row_1)].value=tot13
                    elif tot11:
                        ws['F'+str(row_1)].value=tot11
                    else:
                        ws['F'+str(row_1)].value=0
                    if tot18:
                        ws['G'+str(row_1)].value=tot18
                    elif tot16:
                        ws['G'+str(row_1)].value=tot16
                    elif tot14:
                        ws['G'+str(row_1)].value=tot14
                    elif tot12:
                        ws['G'+str(row_1)].value=tot12
                    else:
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].fill=total_figure
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 26: ', row_1)
                if tot_opd1:
                    ws['B'+str(row_1)].value='OPD WITH KCC'
                    ws['C'+str(row_1)].value='KCC-20%'
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras1_1= ws['D'+str(row_1)]
                    extras1_1.value='OOPL-80%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if tot_opd_oopl1:
                        ws['F'+str(row_1)].value=tot_opd_oopl1
                        ws['G'+str(row_1)].value=tot_opd_oopl1
                    else:
                        ws['F'+str(row_1)].value=0
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 27: ', row_1)
                    ws['B'+str(row_1)].value=tot_opd1
                    if tot_opd_kcc1:
                        ws['C'+str(row_1)].value=tot_opd_kcc1
                    else:
                        ws['C'+str(row_1)].value=0
                    ws.merge_cells('D'+str(row_1)+':'+'E'+str(row_1))
                    extras2_1= ws['D'+str(row_1)]
                    if tot_opd_oopl1:
                        extras2_1.value=tot_opd_oopl1
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot19:
                        ws['F'+str(row_1)].value=tot19
                    elif tot17:
                        ws['F'+str(row_1)].value=tot17
                    elif tot15:
                        ws['F'+str(row_1)].value=tot15
                    elif tot13:
                        ws['F'+str(row_1)].value=tot13
                    elif tot11:
                        ws['F'+str(row_1)].value=tot11
                    else:
                        ws['F'+str(row_1)].value=0
                    if tot20:
                        ws['G'+str(row_1)].value=tot20
                    elif tot18:
                        ws['G'+str(row_1)].value=tot18
                    elif tot16:
                        ws['G'+str(row_1)].value=tot16
                    elif tot14:
                        ws['G'+str(row_1)].value=tot14
                    elif tot12:
                        ws['G'+str(row_1)].value=tot12
                    else:
                        ws['G'+str(row_1)].value=0
                    ws['B'+str(row_1)].border=border17
                    ws['B'+str(row_1)].fill=total_figure
                    ws['B'+str(row_1)].alignment=alignment1
                    ws['B'+str(row_1)].font=Font(size=9, bold=True)
                    ws['C'+str(row_1)].border=border13
                    ws['C'+str(row_1)].alignment=alignment1
                    ws['C'+str(row_1)].font=Font(size=9, bold=True)
                    ws['E'+str(row_1)].border=border13
                    ws['F'+str(row_1)].border=border17
                    ws['F'+str(row_1)].alignment=alignment1
                    ws['F'+str(row_1)].font=Font(size=9, bold=True)
                    ws['G'+str(row_1)].border=border19
                    ws['G'+str(row_1)].alignment=alignment1
                    ws['G'+str(row_1)].font=Font(size=9, bold=True)
                    row_1+=1
                    print()
                    print('row_1 ka value 28: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'F'+str(row_1))
                finals1=ws['B'+str(row_1)]
                finals1.value='TDS [10%]'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if tds1:
                    ws['G'+str(row_1)].value=tds1
                else:
                    ws['G'+str(row_1)].value=0
                ws['C'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border13
                ws['G'+str(row_1)].border=border17
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=10, bold=True)
                row_1+=1
                print()
                print('row_1 ka value 29: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'F'+str(row_1))
                finals1=ws['B'+str(row_1)]
                finals1.value='NET PAYABLE AFTER TDS'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if net1:
                    ws['G'+str(row_1)].value=net1
                else:
                    ws['G'+str(row_1)].value=0
                ws['C'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border13
                ws['G'+str(row_1)].border=border17
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=10, bold=True)
                row_1+=1
                print()
                print('row_1 ka value 30: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'F'+str(row_1))
                finals1=ws['B'+str(row_1)]
                finals1.value='ADVANCE RECEIVED BY OOPL'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if tot1_oopl1:
                    ws['G'+str(row_1)].value=tot1_oopl1
                else:
                    ws['G'+str(row_1)].value=0
                ws['C'+str(row_1)].border=border13
                ws['D'+str(row_1)].border=border13
                ws['E'+str(row_1)].border=border13
                ws['F'+str(row_1)].border=border13
                ws['G'+str(row_1)].border=border17
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(size=10, bold=True)
                row_1+=1
                print()
                print('row_1 ka value 31: ', row_1)
                ws.merge_cells('B'+str(row_1)+':'+'F'+str(row_1))
                finals1=ws['B'+str(row_1)]
                finals1.value='PAYABLE AMOUNT (AFTER TDS AND ADVANCES)'
                finals1.font=Font(bold=True)
                finals1.border=border18
                finals1.fill=contenido2
                finals1.alignment=alignment1
                if final_amount1:
                    ws['G'+str(row_1)].value=final_amount1
                else:
                    ws['G'+str(row_1)].value=0
                ws['C'+str(row_1)].border=border13
                ws['C'+str(row_1)].fill=contenido2
                ws['D'+str(row_1)].border=border13
                ws['D'+str(row_1)].fill=contenido2
                ws['E'+str(row_1)].border=border13
                ws['E'+str(row_1)].fill=contenido2
                ws['F'+str(row_1)].border=border13
                ws['F'+str(row_1)].fill=contenido2
                ws['G'+str(row_1)].border=border17
                ws['G'+str(row_1)].fill=contenido2
                ws['G'+str(row_1)].alignment=alignment1
                ws['G'+str(row_1)].font=Font(bold=True)
                row_1+=1
                print()
                print('row_1 ka value 32: ', row_1)
                ws.merge_cells('I3:N3')
                top_col1= ws['I3']
                if month3 == '01':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JANUARY, ', year5)
                elif month3 == '02':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF FEBRUARY, ', year5)
                elif month3 == '03':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MARCH, ', year5)
                elif month3 == '04':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF APRIL, ', year5)
                elif month3 == '05':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MAY, ', year5)
                elif month3 == '06':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JUNE, ', year5)
                elif month3 == '07':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JULY, ', year5)
                elif month3 == '08':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF AUGUST, ', year5)
                elif month3 == '09':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF SEPTEMBER, ', year5)
                elif month3 == '10':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF OCTOBER, ', year5)
                elif month3 == '11':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF NOVEMBER, ', year5)
                elif month3 == '12':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF DECEMBER, ', year5)
                top_col1.font=Font(bold=True)
                top_col1.border=border1
                top_col1.alignment=alignment1
                ws.column_dimensions['I'].width=20
                ws.column_dimensions['J'].width=20
                ws.column_dimensions['K'].width=15
                ws.column_dimensions['M'].width=18
                ws.column_dimensions['N'].width=15
                ws['J3'].border=border5
                ws['K3'].border=border5
                ws['L3'].border=border5
                ws['M3'].border=border5
                ws['N3'].border=border6
                ws.merge_cells('I4:N4')
                date_col1= ws['I4']
                date_col1.value="{}{}{}{}{}{}".format('DATE : ', day3, '/', month3, '/', year5)
                date_col1.border=border18
                date_col1.alignment=alignment2
                ws['J4'].border=border13
                ws['K4'].border=border13
                ws['L4'].border=border13
                ws['M4'].border=border13
                ws['N4'].border=border19
                ws.merge_cells('I5:N5')
                ref_col1= ws['I5']
                if month3 == '01':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2-1, '-', joined_year2, '/', '10')
                elif month3 == '02':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2-1, '-', joined_year2, '/', '11')
                elif month3 == '03':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2-1, '-', joined_year2, '/', '12')
                elif month3 == '04':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '01')
                elif month3 == '05':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '02')
                elif month3 == '06':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '03')
                elif month3 == '07':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '04')
                elif month3 == '08':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '05')
                elif month3 == '09':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '06')
                elif month3 == '10':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '07')
                elif month3 == '11':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '08')
                elif month3 == '12':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int2, '-', joined_year2+1, '/', '09')
                ref_col1.border=border18
                ref_col1.alignment=alignment2
                ws['J5'].border=border13
                ws['K5'].border=border13
                ws['L5'].border=border13
                ws['M5'].border=border13
                ws['N5'].border=border19
                ws.merge_cells('I6:N6')
                salutation_col1_1= ws['I6']
                salutation_col1_1.value='TO,'
                salutation_col1_1.font=Font(bold=True)
                salutation_col1_1.border=border12
                salutation_col1_1.fill=contenido1
                salutation_col1_1.alignment=alignment3
                ws['J6'].fill=contenido1
                ws['K6'].fill=contenido1
                ws['L6'].fill=contenido1
                ws['M6'].fill=contenido1
                ws['N6'].fill=contenido1
                ws['N6'].border=border11
                ws.merge_cells('I7:N7')
                salutation_col2_1= ws['I7']
                salutation_col2_1.value='THE DIRECTOR,'
                salutation_col2_1.font=Font(bold=True)
                salutation_col2_1.border=border12
                salutation_col2_1.fill=contenido1
                salutation_col2_1.alignment=alignment3
                ws['J7'].fill=contenido1
                ws['K7'].fill=contenido1
                ws['L7'].fill=contenido1
                ws['M7'].fill=contenido1
                ws['N7'].fill=contenido1
                ws['N7'].border=border11
                ws.merge_cells('I8:N8')
                salutation_col3_1= ws['I8']
                salutation_col3_1.value='KHANDESH CANCER CENTRE (OHRPL), DHULE.'
                salutation_col3_1.font=Font(bold=True)
                salutation_col3_1.border=border12
                salutation_col3_1.fill=contenido1
                salutation_col3_1.alignment=alignment3
                ws['J8'].fill=contenido1
                ws['K8'].fill=contenido1
                ws['L8'].fill=contenido1
                ws['M8'].fill=contenido1
                ws['N8'].fill=contenido1
                ws['N8'].border=border11
                ws.merge_cells('I9:N9')
                message_col4_1= ws['I9']
                message_col4_1.value='Dear Sir/Madam,'
                message_col4_1.font=Font(size=8)
                message_col4_1.border=border12
                message_col4_1.fill=contenido1
                message_col4_1.alignment=alignment3
                ws['J9'].fill=contenido1
                ws['K9'].fill=contenido1
                ws['L9'].fill=contenido1
                ws['M9'].fill=contenido1
                ws['N9'].fill=contenido1
                ws['N9'].border=border11
                ws.merge_cells('I10:N10')
                message_col_1= ws['I10']
                if month3 == '01':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of January, ', year5, '.')
                elif month3 == '02':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of February, ', year5, '.')
                elif month3 == '03':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of March, ', year5, '.')
                elif month3 == '04':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of April, ', year5, '.')
                elif month3 == '05':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of May, ', year5, '.')
                elif month3 == '06':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of June, ', year5, '.')
                elif month3 == '07':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of July, ', year5, '.')
                elif month3 == '08':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of August, ', year5, '.')
                elif month3 == '09':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of September, ', year5, '.')
                elif month3 == '10':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of October, ', year5, '.')
                elif month3 == '11':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of November, ', year5, '.')
                elif month3 == '12':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of December, ', year5, '.')
                message_col_1.font=Font(size=8)
                message_col_1.border=border12
                message_col_1.fill=contenido1
                message_col_1.alignment=alignment3
                ws['J10'].fill=contenido1
                ws['K10'].fill=contenido1
                ws['L10'].fill=contenido1
                ws['M10'].fill=contenido1
                ws['N10'].fill=contenido1
                ws['N10'].border=border11
                ws.merge_cells('I11:N11')
                message_col1_1= ws['I11']
                message_col1_1.value='Please settle the bill before the 10th of this month as agreed. Details of the bill and bank details are as follows.'
                message_col1_1.font=Font(size=8)
                message_col1_1.border=border18
                message_col1_1.fill=contenido1
                message_col1_1.alignment=alignment3
                ws['J11'].fill=contenido1
                ws['K11'].fill=contenido1
                ws['L11'].fill=contenido1
                ws['M11'].fill=contenido1
                ws['N11'].fill=contenido1
                ws['J11'].border=border13
                ws['K11'].border=border13
                ws['L11'].border=border13
                ws['M11'].border=border13
                ws['N11'].border=border19
                ws.merge_cells('I12:L12')
                head1_1= ws['I12']
                head1_1.value='PARTICULARS'
                ws['M12'].value='CASH & BANK WITH'
                ws['N12'].value='AMOUNT'
                head1_1.font=Font(bold=True)
                head1_1.border=border18
                head1_1.fill=contenido2
                head1_1.alignment=alignment3
                ws['M12'].border=border17
                ws['M12'].fill=contenido2
                ws['M12'].alignment=alignment1
                ws['M12'].font=Font(bold=True)
                ws['N12'].border=border19
                ws['N12'].fill=contenido2
                ws['N12'].alignment=alignment1
                ws['N12'].font=Font(bold=True)
                ws['J12'].border=border13
                ws['J12'].fill=contenido2
                ws['K12'].border=border13
                ws['K12'].fill=contenido2
                ws['L12'].border=border13
                ws['L12'].fill=contenido2
                row_2=13
                print()
                print('incs ka value_second_month: ', incs_second_month)
                print()
                print('descs ka value_second_month: ', descs_second_month)
                print()
                print('center ka value_second_month: ', center_second_month)
                for income_second_month in incs_second_month:
                    ws.merge_cells('I'+str(row_2)+':'+'L'+str(row_2))
                    income_item_1= ws['I'+str(row_2)]
                    x=incs_second_month.index(income_second_month)
                    income_item_1.value=descs_second_month[x]
                    ws['M'+str(row_2)].value=center_second_month[x]
                    ws['N'+str(row_2)].value=int(income_second_month)
                    income_item_1.font=Font(size=8, bold=True)
                    income_item_1.border=border18
                    income_item_1.alignment=alignment3
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=8, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].fill=total_figure
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=8, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['K'+str(row_2)].border=border13
                    ws['L'+str(row_2)].border=border13
                    row_2+=1
                print()
                print('row_2 ka value 1: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'L'+str(row_2))
                total_a_1= ws['I'+str(row_2)]
                total_a_1.value=''
                ws['M'+str(row_2)].value='TOTAL (A)'
                ws['N'+str(row_2)].value=tot_comb31
                total_a_1.font=Font(size=10, bold=True)
                total_a_1.border=border18
                total_a_1.alignment=alignment3
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(size=10, bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=10, bold=True)
                ws['J'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['L'+str(row_2)].border=border13
                row_2+=1
                print()
                print('row_2 ka value 2: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'L'+str(row_2))
                head2_1= ws['I'+str(row_2)]
                head2_1.value='COMMON EXPENSES'
                ws['M'+str(row_2)].value='PAID BY'
                ws['N'+str(row_2)].value=''
                head2_1.font=Font(bold=True)
                head2_1.border=border18
                head2_1.fill=contenido2
                head2_1.alignment=alignment3
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].fill=contenido2
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].fill=contenido2
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].fill=contenido2
                ws['K'+str(row_2)].border=border13
                ws['K'+str(row_2)].fill=contenido2
                ws['L'+str(row_2)].border=border13
                ws['L'+str(row_2)].fill=contenido2
                row_2+=1
                print()
                print('row_2 ka value 3: ', row_2)
                for expense_second_month in exps_second_month:
                    ws.merge_cells('I'+str(row_2)+':'+'L'+str(row_2))
                    expense_item_1= ws['I'+str(row_2)]
                    x=exps_second_month.index(expense_second_month)
                    expense_item_1.value=descs1_second_month[x]
                    ws['M'+str(row_2)].value=center1_second_month[x]
                    ws['N'+str(row_2)].value=int(expense_second_month)
                    expense_item_1.font=Font(size=8, bold=True)
                    expense_item_1.border=border18
                    expense_item_1.alignment=alignment3
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=8, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].fill=total_figure
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=8, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['K'+str(row_2)].border=border13
                    ws['L'+str(row_2)].border=border13
                    row_2+=1
                print()
                print('row_2 ka value 4: ', row_2)
                if com_exp_kcc2:
                    for kcc_exp in com_exp_kcc2:
                        ws.merge_cells('I'+str(row_2)+':'+'L'+str(row_2))
                        expense_item1_1= ws['I'+str(row_2)]
                        expense_item1_1.value=kcc_exp.particulars
                        ws['M'+str(row_2)].value='KCC'
                        ws['N'+str(row_2)].value=int(kcc_exp.amount)
                        expense_item1_1.font=Font(size=8, bold=True)
                        expense_item1_1.border=border18
                        expense_item1_1.alignment=alignment3
                        ws['M'+str(row_2)].border=border17
                        ws['M'+str(row_2)].alignment=alignment1
                        ws['M'+str(row_2)].font=Font(size=8, bold=True)
                        ws['N'+str(row_2)].border=border19
                        ws['N'+str(row_2)].fill=total_figure
                        ws['N'+str(row_2)].alignment=alignment1
                        ws['N'+str(row_2)].font=Font(size=8, bold=True)
                        ws['J'+str(row_2)].border=border13
                        ws['K'+str(row_2)].border=border13
                        ws['L'+str(row_2)].border=border13
                        row_2+=1
                print()
                print('row_2 ka value 5: ', row_2)
                if com_exp_oopl2:
                    for oopl_exp in com_exp_oopl2:
                        ws.merge_cells('I'+str(row_2)+':'+'L'+str(row_2))
                        expense_item2_1= ws['I'+str(row_2)]
                        expense_item2_1.value=oopl_exp.particulars
                        ws['M'+str(row_2)].value='OOPL'
                        ws['N'+str(row_2)].value=int(oopl_exp.amount)
                        expense_item2_1.font=Font(size=8, bold=True)
                        expense_item2_1.border=border18
                        expense_item2_1.alignment=alignment3
                        ws['M'+str(row_2)].border=border17
                        ws['M'+str(row_2)].alignment=alignment1
                        ws['M'+str(row_2)].font=Font(size=8, bold=True)
                        ws['N'+str(row_2)].border=border19
                        ws['N'+str(row_2)].fill=total_figure
                        ws['N'+str(row_2)].alignment=alignment1
                        ws['N'+str(row_2)].font=Font(size=8, bold=True)
                        ws['J'+str(row_2)].border=border13
                        ws['K'+str(row_2)].border=border13
                        ws['L'+str(row_2)].border=border13
                        row_2+=1
                print()
                print('row_2 ka value 6: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'L'+str(row_2))
                total_b_1= ws['I'+str(row_2)]
                total_b_1.value=''
                ws['M'+str(row_2)].value='TOTAL (B)'
                ws['N'+str(row_2)].value=tot32
                total_b_1.font=Font(size=10, bold=True)
                total_b_1.border=border18
                total_b_1.alignment=alignment3
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(size=10, bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=10, bold=True)
                ws['J'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['L'+str(row_2)].border=border13
                row_2+=1
                print()
                print('row_2 ka value 7: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'M'+str(row_2))
                total_a_b_1= ws['I'+str(row_2)]
                total_a_b_1.value='TOTAL AMOUNT AFTER COMMON EXPENSES (A-B)'
                ws['N'+str(row_2)].value=tot33
                total_a_b_1.font=Font(bold=True)
                total_a_b_1.border=border18
                total_a_b_1.alignment=alignment1
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                ws['J'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['L'+str(row_2)].border=border13
                row_2+=1
                print()
                print('row_2 ka value 8: ', row_2)
                ws['I'+str(row_2)].value=''
                ws['J'+str(row_2)].value='SLAB'
                ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                head3_1= ws['K'+str(row_2)]
                head3_1.value='FINAL % (KCC)'
                head3_1.font=Font(bold=True)
                head3_1.border=border18
                head3_1.fill=contenido2
                head3_1.alignment=alignment1
                ws['M'+str(row_2)].value='KCC'
                ws['N'+str(row_2)].value='OOPL'
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].fill=contenido2
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(bold=True)
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].fill=contenido2
                ws['J'+str(row_2)].alignment=alignment1
                ws['J'+str(row_2)].font=Font(bold=True)
                ws['L'+str(row_2)].border=border13
                ws['L'+str(row_2)].fill=contenido2
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].fill=contenido2
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].fill=contenido2
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                row_2+=1
                print()
                print('row_2 ka value 9: ', row_2)
                ws['I'+str(row_2)].value=val16
                ws['J'+str(row_2)].value='Upto 20 Lacs'
                ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                dist1_1= ws['K'+str(row_2)]
                dist1_1.value=10
                dist1_1.font=Font(size=9, bold=True)
                dist1_1.border=border18
                dist1_1.alignment=alignment1
                ws['M'+str(row_2)].value=val21
                ws['N'+str(row_2)].value=val26
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(size=9)
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].alignment=alignment1
                ws['J'+str(row_2)].font=Font(size=9)
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(size=9)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=9)
                row_2+=1
                print()
                print('row_2 ka value 10: ', row_2)
                ws['I'+str(row_2)].value=val17
                ws['J'+str(row_2)].value='20 Lacs - 40 Lacs'
                ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                dist2_1= ws['K'+str(row_2)]
                dist2_1.value=15
                dist2_1.font=Font(size=9, bold=True)
                dist2_1.border=border18
                dist2_1.alignment=alignment1
                ws['M'+str(row_2)].value=val22
                ws['N'+str(row_2)].value=val27
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(size=9)
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].alignment=alignment1
                ws['J'+str(row_2)].font=Font(size=9)
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(size=9)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=9)
                row_2+=1
                print()
                print('row_2 ka value 11: ', row_2)
                ws['I'+str(row_2)].value=val18
                ws['J'+str(row_2)].value='40 Lacs - 60 Lacs'
                ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                dist3_1= ws['K'+str(row_2)]
                dist3_1.value=20
                dist3_1.font=Font(size=9, bold=True)
                dist3_1.border=border18
                dist3_1.alignment=alignment1
                ws['M'+str(row_2)].value=val23
                ws['N'+str(row_2)].value=val28
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(size=9)
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].alignment=alignment1
                ws['J'+str(row_2)].font=Font(size=9)
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(size=9)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=9)
                row_2+=1
                print()
                print('row_2 ka value 12: ', row_2)
                ws['I'+str(row_2)].value=val19
                ws['J'+str(row_2)].value='60 Lacs - 90 Lacs'
                ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                dist4_1= ws['K'+str(row_2)]
                dist4_1.value=30
                dist4_1.font=Font(size=9, bold=True)
                dist4_1.border=border18
                dist4_1.alignment=alignment1
                ws['M'+str(row_2)].value=val24
                ws['N'+str(row_2)].value=val29
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(size=9)
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].alignment=alignment1
                ws['J'+str(row_2)].font=Font(size=9)
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(size=9)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=9)
                row_2+=1
                print()
                print('row_2 ka value 13: ', row_2)
                ws['I'+str(row_2)].value=val20
                ws['J'+str(row_2)].value='Above 90 Lacs'
                ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                dist5_1= ws['K'+str(row_2)]
                dist5_1.value=38
                dist5_1.font=Font(size=9, bold=True)
                dist5_1.border=border18
                dist5_1.alignment=alignment1
                ws['M'+str(row_2)].value=val25
                ws['N'+str(row_2)].value=val30
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(size=9)
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].alignment=alignment1
                ws['J'+str(row_2)].font=Font(size=9)
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(size=9)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=9)
                row_2+=1
                print()
                print('row_2 ka value 14: ', row_2)
                ws['I'+str(row_2)].value=tot34
                ws.merge_cells('J'+str(row_2)+':'+'L'+str(row_2))
                dist_tot_1= ws['J'+str(row_2)]
                dist_tot_1.value=''
                dist_tot_1.font=Font(bold=True)
                dist_tot_1.border=border18
                dist_tot_1.alignment=alignment1
                ws['M'+str(row_2)].value=tot35
                ws['N'+str(row_2)].value=tot36
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(bold=True)
                ws['L'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                row_2+=1
                print()
                print('row_2 ka value 15: ', row_2)
                ws['I'+str(row_2)].value='ADD'
                ws.merge_cells('J'+str(row_2)+':'+'L'+str(row_2))
                addition_1_1= ws['J'+str(row_2)]
                addition_1_1.value='COMMON EXPENSES PAID BY KCC AND OOPL RESP.'
                addition_1_1.font=Font(bold=True)
                addition_1_1.border=border18
                addition_1_1.alignment=alignment1
                ws['M'+str(row_2)].value=tot37
                ws['N'+str(row_2)].value=tot38
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(bold=True)
                ws['L'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                row_2+=1
                print()
                print('row_2 ka value 16: ', row_2)
                ws['I'+str(row_2)].value='LESS'
                ws.merge_cells('J'+str(row_2)+':'+'L'+str(row_2))
                subtraction_1_1= ws['J'+str(row_2)]
                subtraction_1_1.value='ADVANCE RECEIVED BY KCC AND OOPL RESP.'
                subtraction_1_1.font=Font(bold=True)
                subtraction_1_1.border=border18
                subtraction_1_1.alignment=alignment1
                ws['M'+str(row_2)].value=tot31
                ws['N'+str(row_2)].value=tot1_oopl31
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(bold=True)
                ws['L'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                row_2+=1
                print()
                print('row_2 ka value 17: ', row_2)
                ws['I'+str(row_2)].value=''
                ws.merge_cells('J'+str(row_2)+':'+'L'+str(row_2))
                sannaata_1_1= ws['J'+str(row_2)]
                sannaata_1_1.value=''
                sannaata_1_1.font=Font(bold=True)
                sannaata_1_1.border=border18
                sannaata_1_1.alignment=alignment1
                ws['M'+str(row_2)].value=tot39
                ws['N'+str(row_2)].value=tot40
                ws['I'+str(row_2)].border=border17
                ws['I'+str(row_2)].alignment=alignment1
                ws['I'+str(row_2)].font=Font(bold=True)
                ws['L'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border17
                ws['M'+str(row_2)].alignment=alignment1
                ws['M'+str(row_2)].font=Font(bold=True)
                ws['N'+str(row_2)].border=border19
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                row_2+=1
                print()
                print('row_2 ka value 18: ', row_2)
                if additional_income_total2['amount__sum']:
                    if additional_income_desc_second_month != '':
                        ws['I'+str(row_2)].value=additional_income_desc_second_month
                    else:
                        ws['I'+str(row_2)].value='Additional Income (KCC)'
                    if kcc_share_add_in1_second_month != '':
                        ws['J'+str(row_2)].value="{}{}{}".format('KCC-', k_kcc_second, '%')
                    else:
                        ws['J'+str(row_2)].value='KCC-50%'
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras1_1= ws['K'+str(row_2)]
                    if kcc_share_add_in1_second_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_kcc_second, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if oopl_add_in_kcc_second:
                        ws['M'+str(row_2)].value=oopl_add_in_kcc_second
                        ws['N'+str(row_2)].value=oopl_add_in_kcc_second
                    else:
                        ws['M'+str(row_2)].value=0
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 19: ', row_2)
                    ws['I'+str(row_2)].value=additional_income_total2['amount__sum']
                    if kcc_add_in_kcc_second:
                        ws['J'+str(row_2)].value=kcc_add_in_kcc_second
                    else:
                        ws['J'+str(row_2)].value=0
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras2_1= ws['K'+str(row_2)]
                    if oopl_add_in_kcc_second:
                        extras2_1.value=oopl_add_in_kcc_second
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot41:
                        ws['M'+str(row_2)].value=tot41
                    else:
                        ws['M'+str(row_2)].value=0
                    if tot42:
                        ws['N'+str(row_2)].value=tot42
                    else:
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].fill=total_figure
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 20: ', row_2)
                if additional_income_oopl_total2['amount__sum']:
                    if additional_income_oopl_desc_second_month != '':
                        ws['I'+str(row_2)].value=additional_income_oopl_desc_second_month
                    else:
                        ws['I'+str(row_2)].value='Additional Income (OOPL)'
                    if kcc_share_add_in2_second_month != '':
                        ws['J'+str(row_2)].value="{}{}{}".format('KCC-', k_oopl_second, '%')
                    else:
                        ws['J'+str(row_2)].value='KCC-50%'
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras1_1= ws['K'+str(row_2)]
                    if kcc_share_add_in2_second_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_oopl_second, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if kcc_add_in_oopl_second:
                        ws['M'+str(row_2)].value=kcc_add_in_oopl_second
                        ws['N'+str(row_2)].value=kcc_add_in_oopl_second
                    else:
                        ws['M'+str(row_2)].value=0
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 21: ', row_2)
                    ws['I'+str(row_2)].value=additional_income_oopl_total2['amount__sum']
                    if kcc_add_in_oopl_second:
                        ws['J'+str(row_2)].value=kcc_add_in_oopl_second
                    else:
                        ws['J'+str(row_2)].value=0
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras2_1= ws['K'+str(row_2)]
                    if oopl_add_in_oopl_second:
                        extras2_1.value=oopl_add_in_oopl_second
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot43:
                        ws['M'+str(row_2)].value=tot43
                    elif tot41:
                        ws['M'+str(row_2)].value=tot41
                    else:
                        ws['M'+str(row_2)].value=0
                    if tot44:
                        ws['N'+str(row_2)].value=tot44
                    elif tot42:
                        ws['N'+str(row_2)].value=tot42
                    else:
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].fill=total_figure
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 22: ', row_2)
                if other_expenses_total2['amount__sum']:
                    if other_expenses_desc_second_month != '':
                        ws['I'+str(row_2)].value=other_expenses_desc_second_month
                    else:
                        ws['I'+str(row_2)].value='Other Expenses (KCC)'
                    if kcc_share_other_expenses1_second_month != '':
                        ws['J'+str(row_2)].value="{}{}{}".format('KCC-', k_kcc_second_ot_second, '%')
                    else:
                        ws['J'+str(row_2)].value='KCC-50%'
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras1_1= ws['K'+str(row_2)]
                    if kcc_share_other_expenses1_second_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_kcc_second_ot_second, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if oopl_ot_exp_kcc_second:
                        ws['M'+str(row_2)].value=oopl_ot_exp_kcc_second
                        ws['N'+str(row_2)].value=oopl_ot_exp_kcc_second
                    else:
                        ws['M'+str(row_2)].value=0
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 23: ', row_2)
                    ws['I'+str(row_2)].value=other_expenses_total2['amount__sum']
                    if kcc_ot_exp_kcc_second:
                        ws['J'+str(row_2)].value=kcc_ot_exp_kcc_second
                    else:
                        ws['J'+str(row_2)].value=0
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras2_1= ws['K'+str(row_2)]
                    if oopl_ot_exp_kcc_second:
                        extras2_1.value=oopl_ot_exp_kcc_second
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot45:
                        ws['M'+str(row_2)].value=tot45
                    elif tot43:
                        ws['M'+str(row_2)].value=tot43
                    elif tot41:
                        ws['M'+str(row_2)].value=tot41
                    else:
                        ws['M'+str(row_2)].value=0
                    if tot46:
                        ws['N'+str(row_2)].value=tot46
                    elif tot44:
                        ws['N'+str(row_2)].value=tot44
                    elif tot42:
                        ws['N'+str(row_2)].value=tot42
                    else:
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].fill=total_figure
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 24: ', row_2)
                if other_expenses_oopl_total2['amount__sum']:
                    if other_expenses_oopl_desc_second_month != '':
                        ws['I'+str(row_2)].value=other_expenses_oopl_desc_second_month
                    else:
                        ws['I'+str(row_2)].value='Other Expenses (OOPL)'
                    if kcc_share_other_expenses2_second_month != '':
                        ws['J'+str(row_2)].value="{}{}{}".format('KCC-', k_oopl_second_ot_second, '%')
                    else:
                        ws['J'+str(row_2)].value='KCC-50%'
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras1_1= ws['K'+str(row_2)]
                    if kcc_share_other_expenses2_second_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_oopl_second_ot_second, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if kcc_ot_exp_oopl_second:
                        ws['M'+str(row_2)].value=kcc_ot_exp_oopl_second
                        ws['N'+str(row_2)].value=kcc_ot_exp_oopl_second
                    else:
                        ws['M'+str(row_2)].value=0
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 25: ', row_2)
                    ws['I'+str(row_2)].value=other_expenses_oopl_total2['amount__sum']
                    if kcc_ot_exp_oopl_second:
                        ws['J'+str(row_2)].value=kcc_ot_exp_oopl_second
                    else:
                        ws['J'+str(row_2)].value=0
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras2_1= ws['K'+str(row_2)]
                    if oopl_ot_exp_oopl_second:
                        extras2_1.value=oopl_ot_exp_oopl_second
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot47:
                        ws['M'+str(row_2)].value=tot47
                    elif tot45:
                        ws['M'+str(row_2)].value=tot45
                    elif tot43:
                        ws['M'+str(row_2)].value=tot43
                    elif tot41:
                        ws['M'+str(row_2)].value=tot41
                    else:
                        ws['M'+str(row_2)].value=0
                    if tot48:
                        ws['N'+str(row_2)].value=tot48
                    elif tot46:
                        ws['N'+str(row_2)].value=tot46
                    elif tot44:
                        ws['N'+str(row_2)].value=tot44
                    elif tot42:
                        ws['N'+str(row_2)].value=tot42
                    else:
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].fill=total_figure
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 26: ', row_2)
                if tot_opd31:
                    ws['I'+str(row_2)].value='OPD WITH KCC'
                    ws['J'+str(row_2)].value='KCC-20%'
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras1_1= ws['K'+str(row_2)]
                    extras1_1.value='OOPL-80%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if tot_opd_oopl31:
                        ws['M'+str(row_2)].value=tot_opd_oopl31
                        ws['N'+str(row_2)].value=tot_opd_oopl31
                    else:
                        ws['M'+str(row_2)].value=0
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 27: ', row_2)
                    ws['I'+str(row_2)].value=tot_opd31
                    if tot_opd_kcc31:
                        ws['J'+str(row_2)].value=tot_opd_kcc31
                    else:
                        ws['J'+str(row_2)].value=0
                    ws.merge_cells('K'+str(row_2)+':'+'L'+str(row_2))
                    extras2_1= ws['K'+str(row_2)]
                    if tot_opd_oopl31:
                        extras2_1.value=tot_opd_oopl31
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot49:
                        ws['M'+str(row_2)].value=tot49
                    elif tot47:
                        ws['M'+str(row_2)].value=tot47
                    elif tot45:
                        ws['M'+str(row_2)].value=tot45
                    elif tot43:
                        ws['M'+str(row_2)].value=tot43
                    elif tot41:
                        ws['M'+str(row_2)].value=tot41
                    else:
                        ws['M'+str(row_2)].value=0
                    if tot50:
                        ws['N'+str(row_2)].value=tot50
                    elif tot48:
                        ws['N'+str(row_2)].value=tot48
                    elif tot46:
                        ws['N'+str(row_2)].value=tot46
                    elif tot44:
                        ws['N'+str(row_2)].value=tot44
                    elif tot42:
                        ws['N'+str(row_2)].value=tot42
                    else:
                        ws['N'+str(row_2)].value=0
                    ws['I'+str(row_2)].border=border17
                    ws['I'+str(row_2)].fill=total_figure
                    ws['I'+str(row_2)].alignment=alignment1
                    ws['I'+str(row_2)].font=Font(size=9, bold=True)
                    ws['J'+str(row_2)].border=border13
                    ws['J'+str(row_2)].alignment=alignment1
                    ws['J'+str(row_2)].font=Font(size=9, bold=True)
                    ws['L'+str(row_2)].border=border13
                    ws['M'+str(row_2)].border=border17
                    ws['M'+str(row_2)].alignment=alignment1
                    ws['M'+str(row_2)].font=Font(size=9, bold=True)
                    ws['N'+str(row_2)].border=border19
                    ws['N'+str(row_2)].alignment=alignment1
                    ws['N'+str(row_2)].font=Font(size=9, bold=True)
                    row_2+=1
                    print()
                    print('row_2 ka value 28: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'M'+str(row_2))
                finals1=ws['I'+str(row_2)]
                finals1.value='TDS [10%]'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if tds31:
                    ws['N'+str(row_2)].value=tds31
                else:
                    ws['N'+str(row_2)].value=0
                ws['J'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border13
                ws['N'+str(row_2)].border=border17
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=10, bold=True)
                row_2+=1
                print()
                print('row_2 ka value 29: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'M'+str(row_2))
                finals1=ws['I'+str(row_2)]
                finals1.value='NET PAYABLE AFTER TDS'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if net31:
                    ws['N'+str(row_2)].value=net31
                else:
                    ws['N'+str(row_2)].value=0
                ws['J'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border13
                ws['N'+str(row_2)].border=border17
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=10, bold=True)
                row_2+=1
                print()
                print('row_2 ka value 30: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'M'+str(row_2))
                finals1=ws['I'+str(row_2)]
                finals1.value='ADVANCE RECEIVED BY OOPL'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if tot1_oopl31:
                    ws['N'+str(row_2)].value=tot1_oopl31
                else:
                    ws['N'+str(row_2)].value=0
                ws['J'+str(row_2)].border=border13
                ws['K'+str(row_2)].border=border13
                ws['L'+str(row_2)].border=border13
                ws['M'+str(row_2)].border=border13
                ws['N'+str(row_2)].border=border17
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(size=10, bold=True)
                row_2+=1
                print()
                print('row_2 ka value 31: ', row_2)
                ws.merge_cells('I'+str(row_2)+':'+'M'+str(row_2))
                finals1=ws['I'+str(row_2)]
                finals1.value='PAYABLE AMOUNT (AFTER TDS AND ADVANCES)'
                finals1.font=Font(bold=True)
                finals1.border=border18
                finals1.fill=contenido2
                finals1.alignment=alignment1
                if final_amount31:
                    ws['N'+str(row_2)].value=final_amount31
                else:
                    ws['N'+str(row_2)].value=0
                ws['J'+str(row_2)].border=border13
                ws['J'+str(row_2)].fill=contenido2
                ws['K'+str(row_2)].border=border13
                ws['K'+str(row_2)].fill=contenido2
                ws['L'+str(row_2)].border=border13
                ws['L'+str(row_2)].fill=contenido2
                ws['M'+str(row_2)].border=border13
                ws['M'+str(row_2)].fill=contenido2
                ws['N'+str(row_2)].border=border17
                ws['N'+str(row_2)].fill=contenido2
                ws['N'+str(row_2)].alignment=alignment1
                ws['N'+str(row_2)].font=Font(bold=True)
                row_2+=1
                print()
                print('row_2 ka value 32: ', row_2)
                ws.merge_cells('P3:U3')
                top_col1= ws['P3']
                if month4 == '01':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JANUARY, ', year6)
                elif month4 == '02':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF FEBRUARY, ', year6)
                elif month4 == '03':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MARCH, ', year6)
                elif month4 == '04':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF APRIL, ', year6)
                elif month4 == '05':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF MAY, ', year6)
                elif month4 == '06':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JUNE, ', year6)
                elif month4 == '07':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF JULY, ', year6)
                elif month4 == '08':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF AUGUST, ', year6)
                elif month4 == '09':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF SEPTEMBER, ', year6)
                elif month4 == '10':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF OCTOBER, ', year6)
                elif month4 == '11':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF NOVEMBER, ', year6)
                elif month4 == '12':
                    top_col1.value="{}{}".format('PROVISIONAL BILL FOR THE MONTH OF DECEMBER, ', year6)
                top_col1.font=Font(bold=True)
                top_col1.border=border1
                top_col1.alignment=alignment1
                ws.column_dimensions['P'].width=20
                ws.column_dimensions['Q'].width=20
                ws.column_dimensions['R'].width=15
                ws.column_dimensions['T'].width=18
                ws.column_dimensions['U'].width=15
                ws['Q3'].border=border5
                ws['R3'].border=border5
                ws['S3'].border=border5
                ws['T3'].border=border5
                ws['U3'].border=border6
                ws.merge_cells('P4:U4')
                date_col1= ws['P4']
                date_col1.value="{}{}{}{}{}{}".format('DATE : ', day4, '/', month4, '/', year6)
                date_col1.border=border18
                date_col1.alignment=alignment2
                ws['Q4'].border=border13
                ws['R4'].border=border13
                ws['S4'].border=border13
                ws['T4'].border=border13
                ws['U4'].border=border19
                ws.merge_cells('P5:U5')
                ref_col1= ws['P5']
                if month4 == '01':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3-1, '-', joined_year3, '/', '10')
                elif month4 == '02':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3-1, '-', joined_year3, '/', '11')
                elif month4 == '03':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3-1, '-', joined_year3, '/', '12')
                elif month4 == '04':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '01')
                elif month4 == '05':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '02')
                elif month4 == '06':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '03')
                elif month4 == '07':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '04')
                elif month4 == '08':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '05')
                elif month4 == '09':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '06')
                elif month4 == '10':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '07')
                elif month4 == '11':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '08')
                elif month4 == '12':
                    ref_col1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', '09')
                ref_col1.border=border18
                ref_col1.alignment=alignment2
                ws['Q5'].border=border13
                ws['R5'].border=border13
                ws['S5'].border=border13
                ws['T5'].border=border13
                ws['U5'].border=border19
                ws.merge_cells('P6:U6')
                salutation_col1_1= ws['P6']
                salutation_col1_1.value='TO,'
                salutation_col1_1.font=Font(bold=True)
                salutation_col1_1.border=border12
                salutation_col1_1.fill=contenido1
                salutation_col1_1.alignment=alignment3
                ws['Q6'].fill=contenido1
                ws['R6'].fill=contenido1
                ws['S6'].fill=contenido1
                ws['T6'].fill=contenido1
                ws['U6'].fill=contenido1
                ws['U6'].border=border11
                ws.merge_cells('P7:U7')
                salutation_col2_1= ws['P7']
                salutation_col2_1.value='THE DIRECTOR,'
                salutation_col2_1.font=Font(bold=True)
                salutation_col2_1.border=border12
                salutation_col2_1.fill=contenido1
                salutation_col2_1.alignment=alignment3
                ws['Q7'].fill=contenido1
                ws['R7'].fill=contenido1
                ws['S7'].fill=contenido1
                ws['T7'].fill=contenido1
                ws['U7'].fill=contenido1
                ws['U7'].border=border11
                ws.merge_cells('P8:U8')
                salutation_col3_1= ws['P8']
                salutation_col3_1.value='KHANDESH CANCER CENTRE (OHRPL), DHULE.'
                salutation_col3_1.font=Font(bold=True)
                salutation_col3_1.border=border12
                salutation_col3_1.fill=contenido1
                salutation_col3_1.alignment=alignment3
                ws['Q8'].fill=contenido1
                ws['R8'].fill=contenido1
                ws['S8'].fill=contenido1
                ws['T8'].fill=contenido1
                ws['U8'].fill=contenido1
                ws['U8'].border=border11
                ws.merge_cells('P9:U9')
                message_col4_1= ws['P9']
                message_col4_1.value='Dear Sir/Madam,'
                message_col4_1.font=Font(size=8)
                message_col4_1.border=border12
                message_col4_1.fill=contenido1
                message_col4_1.alignment=alignment3
                ws['Q9'].fill=contenido1
                ws['R9'].fill=contenido1
                ws['S9'].fill=contenido1
                ws['T9'].fill=contenido1
                ws['U9'].fill=contenido1
                ws['U9'].border=border11
                ws.merge_cells('P10:U10')
                message_col_1= ws['P10']
                if month4 == '01':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of January, ', year6, '.')
                elif month4 == '02':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of February, ', year6, '.')
                elif month4 == '03':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of March, ', year6, '.')
                elif month4 == '04':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of April, ', year6, '.')
                elif month4 == '05':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of May, ', year6, '.')
                elif month4 == '06':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of June, ', year6, '.')
                elif month4 == '07':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of July, ', year6, '.')
                elif month4 == '08':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of August, ', year6, '.')
                elif month4 == '09':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of September, ', year6, '.')
                elif month4 == '10':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of October, ', year6, '.')
                elif month4 == '11':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of November, ', year6, '.')
                elif month4 == '12':
                    message_col_1.value="{}{}{}".format('We, herewith, send you the bill for Radiotherapy Services for the month of December, ', year6, '.')
                message_col_1.font=Font(size=8)
                message_col_1.border=border12
                message_col_1.fill=contenido1
                message_col_1.alignment=alignment3
                ws['Q10'].fill=contenido1
                ws['R10'].fill=contenido1
                ws['S10'].fill=contenido1
                ws['T10'].fill=contenido1
                ws['U10'].fill=contenido1
                ws['U10'].border=border11
                ws.merge_cells('P11:U11')
                message_col1_1= ws['P11']
                message_col1_1.value='Please settle the bill before the 10th of this month as agreed. Details of the bill and bank details are as follows.'
                message_col1_1.font=Font(size=8)
                message_col1_1.border=border18
                message_col1_1.fill=contenido1
                message_col1_1.alignment=alignment3
                ws['Q11'].fill=contenido1
                ws['R11'].fill=contenido1
                ws['S11'].fill=contenido1
                ws['T11'].fill=contenido1
                ws['U11'].fill=contenido1
                ws['Q11'].border=border13
                ws['R11'].border=border13
                ws['S11'].border=border13
                ws['T11'].border=border13
                ws['U11'].border=border19
                ws.merge_cells('P12:S12')
                head1_1= ws['P12']
                head1_1.value='PARTICULARS'
                ws['T12'].value='CASH & BANK WITH'
                ws['U12'].value='AMOUNT'
                head1_1.font=Font(bold=True)
                head1_1.border=border18
                head1_1.fill=contenido2
                head1_1.alignment=alignment3
                ws['T12'].border=border17
                ws['T12'].fill=contenido2
                ws['T12'].alignment=alignment1
                ws['T12'].font=Font(bold=True)
                ws['U12'].border=border19
                ws['U12'].fill=contenido2
                ws['U12'].alignment=alignment1
                ws['U12'].font=Font(bold=True)
                ws['Q12'].border=border13
                ws['Q12'].fill=contenido2
                ws['R12'].border=border13
                ws['R12'].fill=contenido2
                ws['S12'].border=border13
                ws['S12'].fill=contenido2
                row_3=13
                print()
                print('incs ka value_third_month: ', incs_third_month)
                print()
                print('descs ka value_third_month: ', descs_third_month)
                print()
                print('center ka value_third_month: ', center_third_month)
                for income_third_month in incs_third_month:
                    ws.merge_cells('P'+str(row_3)+':'+'S'+str(row_3))
                    income_item_1= ws['P'+str(row_3)]
                    x=incs_third_month.index(income_third_month)
                    income_item_1.value=descs_third_month[x]
                    ws['T'+str(row_3)].value=center_third_month[x]
                    ws['U'+str(row_3)].value=int(income_third_month)
                    income_item_1.font=Font(size=8, bold=True)
                    income_item_1.border=border18
                    income_item_1.alignment=alignment3
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=8, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].fill=total_figure
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=8, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['R'+str(row_3)].border=border13
                    ws['S'+str(row_3)].border=border13
                    row_3+=1
                print()
                print('row_3 ka value 1: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'S'+str(row_3))
                total_a_1= ws['P'+str(row_3)]
                total_a_1.value=''
                ws['T'+str(row_3)].value='TOTAL (A)'
                ws['U'+str(row_3)].value=tot_comb51
                total_a_1.font=Font(size=10, bold=True)
                total_a_1.border=border18
                total_a_1.alignment=alignment3
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(size=10, bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=10, bold=True)
                ws['Q'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['S'+str(row_3)].border=border13
                row_3+=1
                print()
                print('row_3 ka value 2: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'S'+str(row_3))
                head2_1= ws['P'+str(row_3)]
                head2_1.value='COMMON EXPENSES'
                ws['T'+str(row_3)].value='PAID BY'
                ws['U'+str(row_3)].value=''
                head2_1.font=Font(bold=True)
                head2_1.border=border18
                head2_1.fill=contenido2
                head2_1.alignment=alignment3
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].fill=contenido2
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].fill=contenido2
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].fill=contenido2
                ws['R'+str(row_3)].border=border13
                ws['R'+str(row_3)].fill=contenido2
                ws['S'+str(row_3)].border=border13
                ws['S'+str(row_3)].fill=contenido2
                row_3+=1
                print()
                print('row_3 ka value 3: ', row_3)
                for expense_third_month in exps_third_month:
                    ws.merge_cells('P'+str(row_3)+':'+'S'+str(row_3))
                    expense_item_1= ws['P'+str(row_3)]
                    x=exps_third_month.index(expense_third_month)
                    expense_item_1.value=descs1_third_month[x]
                    ws['T'+str(row_3)].value=center1_third_month[x]
                    ws['U'+str(row_3)].value=int(expense_third_month)
                    expense_item_1.font=Font(size=8, bold=True)
                    expense_item_1.border=border18
                    expense_item_1.alignment=alignment3
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=8, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].fill=total_figure
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=8, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['R'+str(row_3)].border=border13
                    ws['S'+str(row_3)].border=border13
                    row_3+=1
                print()
                print('row_3 ka value 4: ', row_3)
                if com_exp_kcc3:
                    for kcc_exp in com_exp_kcc3:
                        ws.merge_cells('P'+str(row_3)+':'+'S'+str(row_3))
                        expense_item1_1= ws['P'+str(row_3)]
                        expense_item1_1.value=kcc_exp.particulars
                        ws['T'+str(row_3)].value='KCC'
                        ws['U'+str(row_3)].value=int(kcc_exp.amount)
                        expense_item1_1.font=Font(size=8, bold=True)
                        expense_item1_1.border=border18
                        expense_item1_1.alignment=alignment3
                        ws['T'+str(row_3)].border=border17
                        ws['T'+str(row_3)].alignment=alignment1
                        ws['T'+str(row_3)].font=Font(size=8, bold=True)
                        ws['U'+str(row_3)].border=border19
                        ws['U'+str(row_3)].fill=total_figure
                        ws['U'+str(row_3)].alignment=alignment1
                        ws['U'+str(row_3)].font=Font(size=8, bold=True)
                        ws['Q'+str(row_3)].border=border13
                        ws['R'+str(row_3)].border=border13
                        ws['S'+str(row_3)].border=border13
                        row_3+=1
                print()
                print('row_3 ka value 5: ', row_3)
                if com_exp_oopl3:
                    for oopl_exp in com_exp_oopl3:
                        ws.merge_cells('P'+str(row_3)+':'+'S'+str(row_3))
                        expense_item2_1= ws['P'+str(row_3)]
                        expense_item2_1.value=oopl_exp.particulars
                        ws['T'+str(row_3)].value='OOPL'
                        ws['U'+str(row_3)].value=int(oopl_exp.amount)
                        expense_item2_1.font=Font(size=8, bold=True)
                        expense_item2_1.border=border18
                        expense_item2_1.alignment=alignment3
                        ws['T'+str(row_3)].border=border17
                        ws['T'+str(row_3)].alignment=alignment1
                        ws['T'+str(row_3)].font=Font(size=8, bold=True)
                        ws['U'+str(row_3)].border=border19
                        ws['U'+str(row_3)].fill=total_figure
                        ws['U'+str(row_3)].alignment=alignment1
                        ws['U'+str(row_3)].font=Font(size=8, bold=True)
                        ws['Q'+str(row_3)].border=border13
                        ws['R'+str(row_3)].border=border13
                        ws['S'+str(row_3)].border=border13
                        row_3+=1
                print()
                print('row_3 ka value 6: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'S'+str(row_3))
                total_b_1= ws['P'+str(row_3)]
                total_b_1.value=''
                ws['T'+str(row_3)].value='TOTAL (B)'
                ws['U'+str(row_3)].value=tot52
                total_b_1.font=Font(size=10, bold=True)
                total_b_1.border=border18
                total_b_1.alignment=alignment3
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(size=10, bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=10, bold=True)
                ws['Q'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['S'+str(row_3)].border=border13
                row_3+=1
                print()
                print('row_3 ka value 7: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'T'+str(row_3))
                total_a_b_1= ws['P'+str(row_3)]
                total_a_b_1.value='TOTAL AMOUNT AFTER COMMON EXPENSES (A-B)'
                ws['U'+str(row_3)].value=tot53
                total_a_b_1.font=Font(bold=True)
                total_a_b_1.border=border18
                total_a_b_1.alignment=alignment1
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                ws['Q'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['S'+str(row_3)].border=border13
                row_3+=1
                print()
                print('row_3 ka value 8: ', row_3)
                ws['P'+str(row_3)].value=''
                ws['Q'+str(row_3)].value='SLAB'
                ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                head3_1= ws['R'+str(row_3)]
                head3_1.value='FINAL % (KCC)'
                head3_1.font=Font(bold=True)
                head3_1.border=border18
                head3_1.fill=contenido2
                head3_1.alignment=alignment1
                ws['T'+str(row_3)].value='KCC'
                ws['U'+str(row_3)].value='OOPL'
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].fill=contenido2
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(bold=True)
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].fill=contenido2
                ws['Q'+str(row_3)].alignment=alignment1
                ws['Q'+str(row_3)].font=Font(bold=True)
                ws['S'+str(row_3)].border=border13
                ws['S'+str(row_3)].fill=contenido2
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].fill=contenido2
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].fill=contenido2
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                row_3+=1
                print()
                print('row_3 ka value 9: ', row_3)
                ws['P'+str(row_3)].value=val31
                ws['Q'+str(row_3)].value='Upto 20 Lacs'
                ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                dist1_1= ws['R'+str(row_3)]
                dist1_1.value=10
                dist1_1.font=Font(size=9, bold=True)
                dist1_1.border=border18
                dist1_1.alignment=alignment1
                ws['T'+str(row_3)].value=val36
                ws['U'+str(row_3)].value=val41
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(size=9)
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].alignment=alignment1
                ws['Q'+str(row_3)].font=Font(size=9)
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(size=9)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=9)
                row_3+=1
                print()
                print('row_3 ka value 10: ', row_3)
                ws['P'+str(row_3)].value=val32
                ws['Q'+str(row_3)].value='20 Lacs - 40 Lacs'
                ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                dist2_1= ws['R'+str(row_3)]
                dist2_1.value=15
                dist2_1.font=Font(size=9, bold=True)
                dist2_1.border=border18
                dist2_1.alignment=alignment1
                ws['T'+str(row_3)].value=val37
                ws['U'+str(row_3)].value=val42
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(size=9)
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].alignment=alignment1
                ws['Q'+str(row_3)].font=Font(size=9)
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(size=9)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=9)
                row_3+=1
                print()
                print('row_3 ka value 11: ', row_3)
                ws['P'+str(row_3)].value=val33
                ws['Q'+str(row_3)].value='40 Lacs - 60 Lacs'
                ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                dist3_1= ws['R'+str(row_3)]
                dist3_1.value=20
                dist3_1.font=Font(size=9, bold=True)
                dist3_1.border=border18
                dist3_1.alignment=alignment1
                ws['T'+str(row_3)].value=val38
                ws['U'+str(row_3)].value=val43
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(size=9)
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].alignment=alignment1
                ws['Q'+str(row_3)].font=Font(size=9)
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(size=9)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=9)
                row_3+=1
                print()
                print('row_3 ka value 12: ', row_3)
                ws['P'+str(row_3)].value=val3
                ws['Q'+str(row_3)].value='60 Lacs - 90 Lacs'
                ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                dist4_1= ws['R'+str(row_3)]
                dist4_1.value=30
                dist4_1.font=Font(size=9, bold=True)
                dist4_1.border=border18
                dist4_1.alignment=alignment1
                ws['T'+str(row_3)].value=val39
                ws['U'+str(row_3)].value=val44
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(size=9)
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].alignment=alignment1
                ws['Q'+str(row_3)].font=Font(size=9)
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(size=9)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=9)
                row_3+=1
                print()
                print('row_3 ka value 13: ', row_3)
                ws['P'+str(row_3)].value=val35
                ws['Q'+str(row_3)].value='Above 90 Lacs'
                ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                dist5_1= ws['R'+str(row_3)]
                dist5_1.value=38
                dist5_1.font=Font(size=9, bold=True)
                dist5_1.border=border18
                dist5_1.alignment=alignment1
                ws['T'+str(row_3)].value=val40
                ws['U'+str(row_3)].value=val45
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(size=9)
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].alignment=alignment1
                ws['Q'+str(row_3)].font=Font(size=9)
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(size=9)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=9)
                row_3+=1
                print()
                print('row_3 ka value 14: ', row_3)
                ws['P'+str(row_3)].value=tot54
                ws.merge_cells('Q'+str(row_3)+':'+'S'+str(row_3))
                dist_tot_1= ws['Q'+str(row_3)]
                dist_tot_1.value=''
                dist_tot_1.font=Font(bold=True)
                dist_tot_1.border=border18
                dist_tot_1.alignment=alignment1
                ws['T'+str(row_3)].value=tot55
                ws['U'+str(row_3)].value=tot56
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(bold=True)
                ws['S'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                row_3+=1
                print()
                print('row_3 ka value 15: ', row_3)
                ws['P'+str(row_3)].value='ADD'
                ws.merge_cells('Q'+str(row_3)+':'+'S'+str(row_3))
                addition_1_1= ws['Q'+str(row_3)]
                addition_1_1.value='COMMON EXPENSES PAID BY KCC AND OOPL RESP.'
                addition_1_1.font=Font(bold=True)
                addition_1_1.border=border18
                addition_1_1.alignment=alignment1
                ws['T'+str(row_3)].value=tot57
                ws['U'+str(row_3)].value=tot58
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(bold=True)
                ws['S'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                row_3+=1
                print()
                print('row_3 ka value 16: ', row_3)
                ws['P'+str(row_3)].value='LESS'
                ws.merge_cells('Q'+str(row_3)+':'+'S'+str(row_3))
                subtraction_1_1= ws['Q'+str(row_3)]
                subtraction_1_1.value='ADVANCE RECEIVED BY KCC AND OOPL RESP.'
                subtraction_1_1.font=Font(bold=True)
                subtraction_1_1.border=border18
                subtraction_1_1.alignment=alignment1
                ws['T'+str(row_3)].value=tot51
                ws['U'+str(row_3)].value=tot1_oopl51
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(bold=True)
                ws['S'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                row_3+=1
                print()
                print('row_3 ka value 17: ', row_3)
                ws['P'+str(row_3)].value=''
                ws.merge_cells('Q'+str(row_3)+':'+'S'+str(row_3))
                sannaata_1_1= ws['Q'+str(row_3)]
                sannaata_1_1.value=''
                sannaata_1_1.font=Font(bold=True)
                sannaata_1_1.border=border18
                sannaata_1_1.alignment=alignment1
                ws['T'+str(row_3)].value=tot59
                ws['U'+str(row_3)].value=tot60
                ws['P'+str(row_3)].border=border17
                ws['P'+str(row_3)].alignment=alignment1
                ws['P'+str(row_3)].font=Font(bold=True)
                ws['S'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border17
                ws['T'+str(row_3)].alignment=alignment1
                ws['T'+str(row_3)].font=Font(bold=True)
                ws['U'+str(row_3)].border=border19
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                row_3+=1
                print()
                print('row_3 ka value 18: ', row_3)
                if additional_income_total3['amount__sum']:
                    if additional_income_desc_third_month != '':
                        ws['P'+str(row_3)].value=additional_income_desc_third_month
                    else:
                        ws['P'+str(row_3)].value='Additional Income (KCC)'
                    if kcc_share_add_in1_third_month != '':
                        ws['Q'+str(row_3)].value="{}{}{}".format('KCC-', k_kcc_third, '%')
                    else:
                        ws['Q'+str(row_3)].value='KCC-50%'
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras1_1= ws['R'+str(row_3)]
                    if kcc_share_add_in1_third_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_kcc_third, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if oopl_add_in_kcc_third:
                        ws['T'+str(row_3)].value=oopl_add_in_kcc_third
                        ws['U'+str(row_3)].value=oopl_add_in_kcc_third
                    else:
                        ws['T'+str(row_3)].value=0
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 19: ', row_3)
                    ws['P'+str(row_3)].value=additional_income_total3['amount__sum']
                    if kcc_add_in_kcc_third:
                        ws['Q'+str(row_3)].value=kcc_add_in_kcc_third
                    else:
                        ws['Q'+str(row_3)].value=0
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras2_1= ws['R'+str(row_3)]
                    if oopl_add_in_kcc_third:
                        extras2_1.value=oopl_add_in_kcc_third
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot61:
                        ws['T'+str(row_3)].value=tot61
                    else:
                        ws['T'+str(row_3)].value=0
                    if tot62:
                        ws['U'+str(row_3)].value=tot62
                    else:
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].fill=total_figure
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 20: ', row_3)
                if additional_income_oopl_total3['amount__sum']:
                    if additional_income_oopl_desc_third_month != '':
                        ws['P'+str(row_3)].value=additional_income_oopl_desc_third_month
                    else:
                        ws['P'+str(row_3)].value='Additional Income (OOPL)'
                    if kcc_share_add_in2_third_month != '':
                        ws['Q'+str(row_3)].value="{}{}{}".format('KCC-', k_oopl_third, '%')
                    else:
                        ws['Q'+str(row_3)].value='KCC-50%'
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras1_1= ws['R'+str(row_3)]
                    if kcc_share_add_in2_third_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_oopl_third, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if kcc_add_in_oopl_third:
                        ws['T'+str(row_3)].value=kcc_add_in_oopl_third
                        ws['U'+str(row_3)].value=kcc_add_in_oopl_third
                    else:
                        ws['T'+str(row_3)].value=0
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 21: ', row_3)
                    ws['P'+str(row_3)].value=additional_income_oopl_total3['amount__sum']
                    if kcc_add_in_oopl_third:
                        ws['Q'+str(row_3)].value=kcc_add_in_oopl_third
                    else:
                        ws['Q'+str(row_3)].value=0
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras2_1= ws['R'+str(row_3)]
                    if oopl_add_in_oopl_third:
                        extras2_1.value=oopl_add_in_oopl_third
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot63:
                        ws['T'+str(row_3)].value=tot63
                    elif tot61:
                        ws['T'+str(row_3)].value=tot61
                    else:
                        ws['T'+str(row_3)].value=0
                    if tot64:
                        ws['U'+str(row_3)].value=tot64
                    elif tot62:
                        ws['U'+str(row_3)].value=tot62
                    else:
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].fill=total_figure
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 22: ', row_3)
                if other_expenses_total3['amount__sum']:
                    if other_expenses_desc_third_month != '':
                        ws['P'+str(row_3)].value=other_expenses_desc_third_month
                    else:
                        ws['P'+str(row_3)].value='Other Expenses (KCC)'
                    if kcc_share_other_expenses1_third_month != '':
                        ws['Q'+str(row_3)].value="{}{}{}".format('KCC-', k_kcc_third_ot_third, '%')
                    else:
                        ws['Q'+str(row_3)].value='KCC-50%'
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras1_1= ws['R'+str(row_3)]
                    if kcc_share_other_expenses1_third_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_kcc_third_ot_third, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if oopl_ot_exp_kcc_third:
                        ws['T'+str(row_3)].value=oopl_ot_exp_kcc_third
                        ws['U'+str(row_3)].value=oopl_ot_exp_kcc_third
                    else:
                        ws['T'+str(row_3)].value=0
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 23: ', row_3)
                    ws['P'+str(row_3)].value=other_expenses_total3['amount__sum']
                    if kcc_ot_exp_kcc_third:
                        ws['Q'+str(row_3)].value=kcc_ot_exp_kcc_third
                    else:
                        ws['Q'+str(row_3)].value=0
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras2_1= ws['R'+str(row_3)]
                    if oopl_ot_exp_kcc_third:
                        extras2_1.value=oopl_ot_exp_kcc_third
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot65:
                        ws['T'+str(row_3)].value=tot65
                    elif tot63:
                        ws['T'+str(row_3)].value=tot63
                    elif tot61:
                        ws['T'+str(row_3)].value=tot61
                    else:
                        ws['T'+str(row_3)].value=0
                    if tot66:
                        ws['U'+str(row_3)].value=tot66
                    elif tot64:
                        ws['U'+str(row_3)].value=tot64
                    elif tot62:
                        ws['U'+str(row_3)].value=tot62
                    else:
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].fill=total_figure
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 24: ', row_3)
                if other_expenses_oopl_total3['amount__sum']:
                    if other_expenses_oopl_desc_third_month != '':
                        ws['P'+str(row_3)].value=other_expenses_oopl_desc_third_month
                    else:
                        ws['P'+str(row_3)].value='Other Expenses (OOPL)'
                    if kcc_share_other_expenses2_third_month != '':
                        ws['Q'+str(row_3)].value="{}{}{}".format('KCC-', k_oopl_third_ot_third, '%')
                    else:
                        ws['Q'+str(row_3)].value='KCC-50%'
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras1_1= ws['R'+str(row_3)]
                    if kcc_share_other_expenses2_third_month != '':
                        extras1_1.value="{}{}{}".format('OOPL-', o_oopl_third_ot_third, '%')
                    else:
                        extras1_1.value='OOPL-50%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if kcc_ot_exp_oopl_third:
                        ws['T'+str(row_3)].value=kcc_ot_exp_oopl_third
                        ws['U'+str(row_3)].value=kcc_ot_exp_oopl_third
                    else:
                        ws['T'+str(row_3)].value=0
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 25: ', row_3)
                    ws['P'+str(row_3)].value=other_expenses_oopl_total3['amount__sum']
                    if kcc_ot_exp_oopl_third:
                        ws['Q'+str(row_3)].value=kcc_ot_exp_oopl_third
                    else:
                        ws['Q'+str(row_3)].value=0
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras2_1= ws['R'+str(row_3)]
                    if oopl_ot_exp_oopl_third:
                        extras2_1.value=oopl_ot_exp_oopl_third
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot67:
                        ws['T'+str(row_3)].value=tot67
                    elif tot65:
                        ws['T'+str(row_3)].value=tot65
                    elif tot63:
                        ws['T'+str(row_3)].value=tot63
                    elif tot61:
                        ws['T'+str(row_3)].value=tot61
                    else:
                        ws['T'+str(row_3)].value=0
                    if tot68:
                        ws['U'+str(row_3)].value=tot68
                    elif tot66:
                        ws['U'+str(row_3)].value=tot66
                    elif tot64:
                        ws['U'+str(row_3)].value=tot64
                    elif tot62:
                        ws['U'+str(row_3)].value=tot62
                    else:
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].fill=total_figure
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 26: ', row_3)
                if tot_opd51:
                    ws['P'+str(row_3)].value='OPD WITH KCC'
                    ws['Q'+str(row_3)].value='KCC-20%'
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras1_1= ws['R'+str(row_3)]
                    extras1_1.value='OOPL-80%'
                    extras1_1.font=Font(size=9, bold=True)
                    extras1_1.border=border18
                    extras1_1.alignment=alignment1
                    if tot_opd_oopl51:
                        ws['T'+str(row_3)].value=tot_opd_oopl51
                        ws['U'+str(row_3)].value=tot_opd_oopl51
                    else:
                        ws['T'+str(row_3)].value=0
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 27: ', row_3)
                    ws['P'+str(row_3)].value=tot_opd51
                    if tot_opd_kcc51:
                        ws['Q'+str(row_3)].value=tot_opd_kcc51
                    else:
                        ws['Q'+str(row_3)].value=0
                    ws.merge_cells('R'+str(row_3)+':'+'S'+str(row_3))
                    extras2_1= ws['R'+str(row_3)]
                    if tot_opd_oopl51:
                        extras2_1.value=tot_opd_oopl51
                    else:
                        extras2_1.value=0
                    extras2_1.font=Font(size=9, bold=True)
                    extras2_1.border=border18
                    extras2_1.alignment=alignment1
                    if tot69:
                        ws['T'+str(row_3)].value=tot69
                    elif tot67:
                        ws['T'+str(row_3)].value=tot67
                    elif tot65:
                        ws['T'+str(row_3)].value=tot65
                    elif tot63:
                        ws['T'+str(row_3)].value=tot63
                    elif tot61:
                        ws['T'+str(row_3)].value=tot61
                    else:
                        ws['T'+str(row_3)].value=0
                    if tot70:
                        ws['U'+str(row_3)].value=tot70
                    elif tot68:
                        ws['U'+str(row_3)].value=tot68
                    elif tot66:
                        ws['U'+str(row_3)].value=tot66
                    elif tot64:
                        ws['U'+str(row_3)].value=tot64
                    elif tot62:
                        ws['U'+str(row_3)].value=tot62
                    else:
                        ws['U'+str(row_3)].value=0
                    ws['P'+str(row_3)].border=border17
                    ws['P'+str(row_3)].fill=total_figure
                    ws['P'+str(row_3)].alignment=alignment1
                    ws['P'+str(row_3)].font=Font(size=9, bold=True)
                    ws['Q'+str(row_3)].border=border13
                    ws['Q'+str(row_3)].alignment=alignment1
                    ws['Q'+str(row_3)].font=Font(size=9, bold=True)
                    ws['S'+str(row_3)].border=border13
                    ws['T'+str(row_3)].border=border17
                    ws['T'+str(row_3)].alignment=alignment1
                    ws['T'+str(row_3)].font=Font(size=9, bold=True)
                    ws['U'+str(row_3)].border=border19
                    ws['U'+str(row_3)].alignment=alignment1
                    ws['U'+str(row_3)].font=Font(size=9, bold=True)
                    row_3+=1
                    print()
                    print('row_3 ka value 28: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'T'+str(row_3))
                finals1=ws['P'+str(row_3)]
                finals1.value='TDS [10%]'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if tds51:
                    ws['U'+str(row_3)].value=tds51
                else:
                    ws['U'+str(row_3)].value=0
                ws['Q'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border13
                ws['U'+str(row_3)].border=border17
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=10, bold=True)
                row_3+=1
                print()
                print('row_3 ka value 29: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'T'+str(row_3))
                finals1=ws['P'+str(row_3)]
                finals1.value='NET PAYABLE AFTER TDS'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if net51:
                    ws['U'+str(row_3)].value=net51
                else:
                    ws['U'+str(row_3)].value=0
                ws['Q'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border13
                ws['U'+str(row_3)].border=border17
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=10, bold=True)
                row_3+=1
                print()
                print('row_3 ka value 30: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'T'+str(row_3))
                finals1=ws['P'+str(row_3)]
                finals1.value='ADVANCE RECEIVED BY OOPL'
                finals1.font=Font(size=10, bold=True)
                finals1.border=border18
                finals1.alignment=alignment1
                if tot1_oopl51:
                    ws['U'+str(row_3)].value=tot1_oopl51
                else:
                    ws['U'+str(row_3)].value=0
                ws['Q'+str(row_3)].border=border13
                ws['R'+str(row_3)].border=border13
                ws['S'+str(row_3)].border=border13
                ws['T'+str(row_3)].border=border13
                ws['U'+str(row_3)].border=border17
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(size=10, bold=True)
                row_3+=1
                print()
                print('row_3 ka value 31: ', row_3)
                ws.merge_cells('P'+str(row_3)+':'+'T'+str(row_3))
                finals1=ws['P'+str(row_3)]
                finals1.value='PAYABLE AMOUNT (AFTER TDS AND ADVANCES)'
                finals1.font=Font(bold=True)
                finals1.border=border18
                finals1.fill=contenido2
                finals1.alignment=alignment1
                if final_amount51:
                    ws['U'+str(row_3)].value=final_amount51
                else:
                    ws['U'+str(row_3)].value=0
                ws['Q'+str(row_3)].border=border13
                ws['Q'+str(row_3)].fill=contenido2
                ws['R'+str(row_3)].border=border13
                ws['R'+str(row_3)].fill=contenido2
                ws['S'+str(row_3)].border=border13
                ws['S'+str(row_3)].fill=contenido2
                ws['T'+str(row_3)].border=border13
                ws['T'+str(row_3)].fill=contenido2
                ws['U'+str(row_3)].border=border17
                ws['U'+str(row_3)].fill=contenido2
                ws['U'+str(row_3)].alignment=alignment1
                ws['U'+str(row_3)].font=Font(bold=True)
                row_3+=1
                print()
                print('row_3 ka value 32: ', row_3)
                ws1=wb.create_sheet("Sheet2")
                ws1.title="Revised Bills"
                ws1.sheet_properties.tabColor='7FFF00'
                #First Revised Bills Will Begin Here
                ws1.merge_cells('B3:F3')
                top_col1= ws1['B3']
                if month2 == '01':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JANUARY, ', year4)
                elif month2 == '02':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF FEBRUARY, ', year4)
                elif month2 == '03':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF MARCH, ', year4)
                elif month2 == '04':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF APRIL, ', year4)
                elif month2 == '05':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF MAY, ', year4)
                elif month2 == '06':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JUNE, ', year4)
                elif month2 == '07':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JULY, ', year4)
                elif month2 == '08':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF AUGUST, ', year4)
                elif month2 == '09':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF SEPTEMBER, ', year4)
                elif month2 == '10':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF OCTOBER, ', year4)
                elif month2 == '11':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF NOVEMBER, ', year4)
                elif month2 == '12':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF DECEMBER, ', year4)
                top_col1.font=Font(bold=True)
                top_col1.border=border1
                top_col1.alignment=alignment1
                ws1.column_dimensions['A'].width=5
                ws1.column_dimensions['B'].width=20
                ws1.column_dimensions['C'].width=22
                ws1.column_dimensions['D'].width=20
                ws1.column_dimensions['E'].width=15
                ws1.column_dimensions['F'].width=18
                ws1['C3'].border=border5
                ws1['D3'].border=border5
                ws1['E3'].border=border5
                ws1['F3'].border=border6
                ws1.merge_cells('B4:F4')
                date_col1= ws1['B4']
                date_col1.value="{}{}{}{}{}{}".format('DATE : ', day2, '/', month2, '/', year4)
                date_col1.border=border18
                date_col1.alignment=alignment2
                ws1['C4'].border=border13
                ws1['D4'].border=border13
                ws1['E4'].border=border13
                ws1['F4'].border=border19
                ws1.merge_cells('B5:D5')
                start_col1= ws1['B5']
                start_col1.value='Average Realized Amount from Cash and Schemes'
                start_col1.border=border18
                start_col1.alignment=alignment3
                start_col1.font=Font(size=9)
                ws1['E5'].value='(A)'
                ws1['F5'].value=avg_total_income
                ws1['C5'].border=border13
                ws1['D5'].border=border13
                ws1['E5'].border=border18
                ws1['E5'].alignment=alignment1
                ws1['E5'].font=Font(size=9, bold=True)
                ws1['F5'].border=border17
                ws1['F5'].alignment=alignment1
                ws1['F5'].fill=total_figure
                ws1['F5'].font=Font(size=9)
                ws1.merge_cells('B6:D6')
                start_col1= ws1['B6']
                start_col1.value=''
                start_col1.border=border18
                start_col1.alignment=alignment3
                ws1['E6'].value=''
                ws1['F6'].value=''
                ws1['C6'].border=border13
                ws1['D6'].border=border13
                ws1['E6'].border=border18
                ws1['E6'].alignment=alignment1
                ws1['F6'].border=border17
                ws1['F6'].alignment=alignment1
                ws1.row_dimensions[6].height=7
                row_num1=7
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1['C'+str(row_num1)].value='PAID BY'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].fill=contenido2
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(bold=True)
                ws1['D'+str(row_num1)].value='KCC'
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value='OOPL'
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value='TOTAL (A)'
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 1: ', row_num1)
                ws1['B'+str(row_num1)].value='Common Expenses'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment3
                ws1['B'+str(row_num1)].font=Font(size=9)
                ws1['C'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=9)
                ws1['D'+str(row_num1)].value=avg_kcc_expenses
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=9)
                ws1['E'+str(row_num1)].value=avg_oopl_expenses
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9)
                ws1['F'+str(row_num1)].value=total_avg_expenses1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=9)
                row_num1+=1
                print()
                print('row_num1 ka value 2: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment3
                ws1['B'+str(row_num1)].font=Font(size=9)
                ws1['C'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=9)
                ws1['D'+str(row_num1)].value=''
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=9)
                ws1['E'+str(row_num1)].value=''
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9)
                ws1['F'+str(row_num1)].value=''
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=9)
                ws1.row_dimensions[row_num1].height=7
                row_num1+=1
                print()
                print('row_num1 ka value 3: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'E'+str(row_num1))
                tot_col1=ws1['B'+str(row_num1)]
                tot_col1.value='TOTAL AMOUNT (A-B)'
                tot_col1.font=Font(size=10, bold=True)
                tot_col1.border=border18
                tot_col1.alignment=alignment1
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border13
                ws1['F'+str(row_num1)].value=a_minus_b_income1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].alignment=alignment1
                row_num1+=1
                print()
                print('row_num1 ka value 4: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1['C'+str(row_num1)].value='SLAB'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].fill=contenido2
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(bold=True)
                ws1['D'+str(row_num1)].value='FINAL % (KCC)'
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value='KCC'
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value='OOPL'
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 5: ', row_num1)
                ws1['B'+str(row_num1)].value=val46
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='Upto 20 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=10
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val51
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val56
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 6: ', row_num1)
                ws1['B'+str(row_num1)].value=val47
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='20 Lacs - 40 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=15
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val52
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val57
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 7: ', row_num1)
                ws1['B'+str(row_num1)].value=val48
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='40 Lacs - 60 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=20
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val53
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val58
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 8: ', row_num1)
                ws1['B'+str(row_num1)].value=val49
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='60 Lacs - 90 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=30
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val54
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val59
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 9: ', row_num1)
                ws1['B'+str(row_num1)].value=val50
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='Above 90 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=38
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val55
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val60
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 10: ', row_num1)
                ws1['B'+str(row_num1)].value=tot71
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value=''
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=tot72
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=tot73
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 11: ', row_num1)
                ws1['B'+str(row_num1)].value='ADD'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value='COMMON EXPENSES PAID BY KCC AND OOPL RESP.'
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=avg_kcc_expenses
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=avg_oopl_expenses
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 12: ', row_num1)
                ws1['B'+str(row_num1)].value='LESS'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value='ADVANCE RECEIVED BY KCC AND OOPL RESP.'
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=avg_kcc_income
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=avg_oopl_income
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 13: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value=''
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.fill=contenido2
                tot_head.font=Font(bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value=tot74
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value=tot75
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=3
                print()
                print('row_num1 ka value 14: ', row_num1)
                #First Revised Bill Ends Here
                #Second Revised Bill Begins Here
                ws1.merge_cells('B'+str(row_num1)+':'+'F'+str(row_num1))
                top_col1= ws1['B'+str(row_num1)]
                if month3 == '01':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JANUARY, ', year5)
                elif month3 == '02':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF FEBRUARY, ', year5)
                elif month3 == '03':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF MARCH, ', year5)
                elif month3 == '04':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF APRIL, ', year5)
                elif month3 == '05':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF MAY, ', year5)
                elif month3 == '06':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JUNE, ', year5)
                elif month3 == '07':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JULY, ', year5)
                elif month3 == '08':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF AUGUST, ', year5)
                elif month3 == '09':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF SEPTEMBER, ', year5)
                elif month3 == '10':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF OCTOBER, ', year5)
                elif month3 == '11':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF NOVEMBER, ', year5)
                elif month3 == '12':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF DECEMBER, ', year5)
                top_col1.font=Font(bold=True)
                top_col1.border=border1
                top_col1.alignment=alignment1
                ws1['C'+str(row_num1)].border=border5
                ws1['D'+str(row_num1)].border=border5
                ws1['E'+str(row_num1)].border=border5
                ws1['F'+str(row_num1)].border=border6
                row_num1+=1
                print()
                print('row_num1 ka value 15: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'F'+str(row_num1))
                date_col1= ws1['B'+str(row_num1)]
                date_col1.value="{}{}{}{}{}{}".format('DATE : ', day3, '/', month3, '/', year5)
                date_col1.border=border18
                date_col1.alignment=alignment2
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border13
                ws1['F'+str(row_num1)].border=border19
                row_num1+=1
                print()
                print('row_num1 ka value 16: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'D'+str(row_num1))
                start_col1= ws1['B'+str(row_num1)]
                start_col1.value='Average Realized Amount from Cash and Schemes'
                start_col1.border=border18
                start_col1.alignment=alignment3
                start_col1.font=Font(size=9)
                ws1['E'+str(row_num1)].value='(A)'
                ws1['F'+str(row_num1)].value=avg_total_income
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border18
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9, bold=True)
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].fill=total_figure
                ws1['F'+str(row_num1)].font=Font(size=9)
                row_num1+=1
                print()
                print('row_num1 ka value 17: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'D'+str(row_num1))
                start_col1= ws1['B'+str(row_num1)]
                start_col1.value=''
                start_col1.border=border18
                start_col1.alignment=alignment3
                ws1['E'+str(row_num1)].value=''
                ws1['F'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border18
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1.row_dimensions[6].height=7
                row_num1+=1
                print()
                print('row_num1 ka value 18: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1['C'+str(row_num1)].value='PAID BY'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].fill=contenido2
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(bold=True)
                ws1['D'+str(row_num1)].value='KCC'
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value='OOPL'
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value='TOTAL (B)'
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 19: ', row_num1)
                ws1['B'+str(row_num1)].value='Common Expenses'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment3
                ws1['B'+str(row_num1)].font=Font(size=9)
                ws1['C'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=9)
                ws1['D'+str(row_num1)].value=avg_kcc_expenses
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=9)
                ws1['E'+str(row_num1)].value=avg_oopl_expenses
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9)
                ws1['F'+str(row_num1)].value=total_avg_expenses1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=9)
                row_num1+=1
                print()
                print('row_num1 ka value 20: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment3
                ws1['B'+str(row_num1)].font=Font(size=9)
                ws1['C'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=9)
                ws1['D'+str(row_num1)].value=''
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=9)
                ws1['E'+str(row_num1)].value=''
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9)
                ws1['F'+str(row_num1)].value=''
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=9)
                ws1.row_dimensions[row_num1].height=7
                row_num1+=1
                print()
                print('row_num1 ka value 21: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'E'+str(row_num1))
                tot_col1=ws1['B'+str(row_num1)]
                tot_col1.value='TOTAL AMOUNT (A-B)'
                tot_col1.font=Font(size=10, bold=True)
                tot_col1.border=border18
                tot_col1.alignment=alignment1
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border13
                ws1['F'+str(row_num1)].value=a_minus_b_income1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].alignment=alignment1
                row_num1+=1
                print()
                print('row_num1 ka value 22: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1['C'+str(row_num1)].value='SLAB'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].fill=contenido2
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(bold=True)
                ws1['D'+str(row_num1)].value='FINAL % (KCC)'
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value='KCC'
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value='OOPL'
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 23: ', row_num1)
                ws1['B'+str(row_num1)].value=val61
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='Upto 20 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=10
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val66
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val71
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 24: ', row_num1)
                ws1['B'+str(row_num1)].value=val62
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='20 Lacs - 40 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=15
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val67
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val72
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 25: ', row_num1)
                ws1['B'+str(row_num1)].value=val63
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='40 Lacs - 60 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=20
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val68
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val73
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 26: ', row_num1)
                ws1['B'+str(row_num1)].value=val64
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='60 Lacs - 90 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=30
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val69
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val74
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 27: ', row_num1)
                ws1['B'+str(row_num1)].value=val65
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='Above 90 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=38
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val70
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val75
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 28: ', row_num1)
                ws1['B'+str(row_num1)].value=tot76
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value=''
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=tot77
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=tot78
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 29: ', row_num1)
                ws1['B'+str(row_num1)].value='ADD'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value='COMMON EXPENSES PAID BY KCC AND OOPL RESP.'
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=avg_kcc_expenses
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=avg_oopl_expenses
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 30: ', row_num1)
                ws1['B'+str(row_num1)].value='LESS'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value='ADVANCE RECEIVED BY KCC AND OOPL RESP.'
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=avg_kcc_income
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=avg_oopl_income
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 31: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value=''
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.fill=contenido2
                tot_head.font=Font(bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value=tot79
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value=tot80
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=3
                print()
                print('row_num1 ka value 32: ', row_num1)
                #Second Revised Bill Ends Here
                #Third Revised Bill Will Begin Here
                ws1.merge_cells('B'+str(row_num1)+':'+'F'+str(row_num1))
                top_col1= ws1['B'+str(row_num1)]
                if month4 == '01':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JANUARY, ', year6)
                elif month4 == '02':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF FEBRUARY, ', year6)
                elif month4 == '03':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF MARCH, ', year6)
                elif month4 == '04':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF APRIL, ', year6)
                elif month4 == '05':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF MAY, ', year6)
                elif month4 == '06':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JUNE, ', year6)
                elif month4 == '07':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF JULY, ', year6)
                elif month4 == '08':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF AUGUST, ', year6)
                elif month4 == '09':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF SEPTEMBER, ', year6)
                elif month4 == '10':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF OCTOBER, ', year6)
                elif month4 == '11':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF NOVEMBER, ', year6)
                elif month4 == '12':
                    top_col1.value="{}{}".format('REVISED BILL FOR THE MONTH OF DECEMBER, ', year6)
                top_col1.font=Font(bold=True)
                top_col1.border=border1
                top_col1.alignment=alignment1
                ws1['C'+str(row_num1)].border=border5
                ws1['D'+str(row_num1)].border=border5
                ws1['E'+str(row_num1)].border=border5
                ws1['F'+str(row_num1)].border=border6
                row_num1+=1
                print()
                print('row_num1 ka value 33: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'F'+str(row_num1))
                date_col1= ws1['B'+str(row_num1)]
                date_col1.value="{}{}{}{}{}{}".format('DATE : ', day4, '/', month4, '/', year6)
                date_col1.border=border18
                date_col1.alignment=alignment2
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border13
                ws1['F'+str(row_num1)].border=border19
                row_num1+=1
                print()
                print('row_num1 ka value 34: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'D'+str(row_num1))
                start_col1= ws1['B'+str(row_num1)]
                start_col1.value='Average Realized Amount from Cash and Schemes'
                start_col1.border=border18
                start_col1.alignment=alignment3
                start_col1.font=Font(size=9)
                ws1['E'+str(row_num1)].value='(A)'
                ws1['F'+str(row_num1)].value=avg_total_income
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border18
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9, bold=True)
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].fill=total_figure
                ws1['F'+str(row_num1)].font=Font(size=9)
                row_num1+=1
                print()
                print('row_num1 ka value 35: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'D'+str(row_num1))
                start_col1= ws1['B'+str(row_num1)]
                start_col1.value=''
                start_col1.border=border18
                start_col1.alignment=alignment3
                ws1['E'+str(row_num1)].value=''
                ws1['F'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border18
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1.row_dimensions[6].height=7
                row_num1+=1
                print()
                print('row_num1 ka value 36: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1['C'+str(row_num1)].value='PAID BY'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].fill=contenido2
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(bold=True)
                ws1['D'+str(row_num1)].value='KCC'
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value='OOPL'
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value='TOTAL (B)'
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 37: ', row_num1)
                ws1['B'+str(row_num1)].value='Common Expenses'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment3
                ws1['B'+str(row_num1)].font=Font(size=9)
                ws1['C'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=9)
                ws1['D'+str(row_num1)].value=avg_kcc_expenses
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=9)
                ws1['E'+str(row_num1)].value=avg_oopl_expenses
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9)
                ws1['F'+str(row_num1)].value=total_avg_expenses1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=9)
                row_num1+=1
                print()
                print('row_num1 ka value 38: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment3
                ws1['B'+str(row_num1)].font=Font(size=9)
                ws1['C'+str(row_num1)].value=''
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=9)
                ws1['D'+str(row_num1)].value=''
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=9)
                ws1['E'+str(row_num1)].value=''
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=9)
                ws1['F'+str(row_num1)].value=''
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=9)
                ws1.row_dimensions[row_num1].height=7
                row_num1+=1
                print()
                print('row_num1 ka value 39: ', row_num1)
                ws1.merge_cells('B'+str(row_num1)+':'+'E'+str(row_num1))
                tot_col1=ws1['B'+str(row_num1)]
                tot_col1.value='TOTAL AMOUNT (A-B)'
                tot_col1.font=Font(size=10, bold=True)
                tot_col1.border=border18
                tot_col1.alignment=alignment1
                ws1['C'+str(row_num1)].border=border13
                ws1['D'+str(row_num1)].border=border13
                ws1['E'+str(row_num1)].border=border13
                ws1['F'+str(row_num1)].value=a_minus_b_income1
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].alignment=alignment1
                row_num1+=1
                print()
                print('row_num1 ka value 40: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1['C'+str(row_num1)].value='SLAB'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].fill=contenido2
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(bold=True)
                ws1['D'+str(row_num1)].value='FINAL % (KCC)'
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value='KCC'
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value='OOPL'
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 41: ', row_num1)
                ws1['B'+str(row_num1)].value=val76
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='Upto 20 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=10
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val81
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val86
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 42: ', row_num1)
                ws1['B'+str(row_num1)].value=val77
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='20 Lacs - 40 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=15
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val82
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val87
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 43: ', row_num1)
                ws1['B'+str(row_num1)].value=val78
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='40 Lacs - 60 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=20
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val83
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val88
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 44: ', row_num1)
                ws1['B'+str(row_num1)].value=val79
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='60 Lacs - 90 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=30
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val84
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val89
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 45: ', row_num1)
                ws1['B'+str(row_num1)].value=val80
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=8)
                ws1['C'+str(row_num1)].value='Above 90 Lacs'
                ws1['C'+str(row_num1)].border=border17
                ws1['C'+str(row_num1)].alignment=alignment1
                ws1['C'+str(row_num1)].font=Font(size=8)
                ws1['D'+str(row_num1)].value=38
                ws1['D'+str(row_num1)].border=border17
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=8, bold=True)
                ws1['E'+str(row_num1)].value=val85
                ws1['E'+str(row_num1)].border=border17
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=8)
                ws1['F'+str(row_num1)].value=val90
                ws1['F'+str(row_num1)].border=border17
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=8)
                row_num1+=1
                print()
                print('row_num1 ka value 46: ', row_num1)
                ws1['B'+str(row_num1)].value=tot81
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value=''
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=tot82
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=tot83
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 47: ', row_num1)
                ws1['B'+str(row_num1)].value='ADD'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value='COMMON EXPENSES PAID BY KCC AND OOPL RESP.'
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=avg_kcc_expenses
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=avg_oopl_expenses
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 48: ', row_num1)
                ws1['B'+str(row_num1)].value='LESS'
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].font=Font(size=10, bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value='ADVANCE RECEIVED BY KCC AND OOPL RESP.'
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.font=Font(size=10, bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['E'+str(row_num1)].value=avg_kcc_income
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].font=Font(size=10, bold=True)
                ws1['F'+str(row_num1)].value=avg_oopl_income
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].font=Font(size=10, bold=True)
                row_num1+=1
                print()
                print('row_num1 ka value 49: ', row_num1)
                ws1['B'+str(row_num1)].value=''
                ws1['B'+str(row_num1)].border=border17
                ws1['B'+str(row_num1)].alignment=alignment1
                ws1['B'+str(row_num1)].fill=contenido2
                ws1['B'+str(row_num1)].font=Font(bold=True)
                ws1.merge_cells('C'+str(row_num1)+':'+'D'+str(row_num1))
                tot_head=ws1['C'+str(row_num1)]
                tot_head.value=''
                tot_head.border=border13
                tot_head.alignment=alignment1
                tot_head.fill=contenido2
                tot_head.font=Font(bold=True)
                ws1['D'+str(row_num1)].border=border19
                ws1['D'+str(row_num1)].alignment=alignment1
                ws1['D'+str(row_num1)].fill=contenido2
                ws1['D'+str(row_num1)].font=Font(bold=True)
                ws1['E'+str(row_num1)].value=tot84
                ws1['E'+str(row_num1)].border=border19
                ws1['E'+str(row_num1)].alignment=alignment1
                ws1['E'+str(row_num1)].fill=contenido2
                ws1['E'+str(row_num1)].font=Font(bold=True)
                ws1['F'+str(row_num1)].value=tot85
                ws1['F'+str(row_num1)].border=border19
                ws1['F'+str(row_num1)].alignment=alignment1
                ws1['F'+str(row_num1)].fill=contenido2
                ws1['F'+str(row_num1)].font=Font(bold=True)
                #Third Revised Bill Ends Here
                ws2=wb.create_sheet("Sheet2")
                ws2.title="Settlement Bill"
                ws2.sheet_properties.tabColor='00FFFF'
                #Settlement Bill Will Begin Here
                row_num2=3
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                heading1=ws2['B'+str(row_num2)]
                heading1.font=Font(bold=True)
                heading1.border=border1
                heading1.alignment=alignment1
                if quarter == 'q1':
                    heading1.value="{}{}{}{}".format('1st QUARTER SETTLEMENT BILL ', year_int3, '-', joined_year3+1)
                elif quarter == 'q2':
                    heading1.value="{}{}{}{}".format('2nd QUARTER SETTLEMENT BILL ', year_int3, '-', joined_year3+1)
                elif quarter == 'q3':
                    heading1.value="{}{}{}{}".format('3rd QUARTER SETTLEMENT BILL ', year_int3, '-', joined_year3+1)
                elif quarter == 'q4':
                    heading1.value="{}{}{}{}".format('4th QUARTER SETTLEMENT BILL ', year_int3-1, '-', joined_year3)
                ws2.column_dimensions['B'].width=35
                ws2.column_dimensions['C'].width=20
                ws2.column_dimensions['D'].width=20
                ws2.column_dimensions['E'].width=20
                ws2.column_dimensions['F'].width=20
                ws2['C'+str(row_num2)].border=border5
                ws2['D'+str(row_num2)].border=border5
                ws2['E'+str(row_num2)].border=border5
                ws2['F'+str(row_num2)].border=border6
                row_num2+=1
                print()
                print('row_num2 ka value 1: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                date1=ws2['B'+str(row_num2)]
                date1.border=border18
                date1.alignment=alignment2
                date1.value="{}{}{}{}{}{}".format('DATE : ', day4, '/', month4, '/', year6)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border19
                row_num2+=1
                print()
                print('row_num2 ka value 2: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                ref1=ws2['B'+str(row_num2)]
                ref1.border=border18
                ref1.alignment=alignment2
                if quarter == 'q1':
                    ref1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', 'Q-1')
                elif quarter == 'q2':
                    ref1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', 'Q-2')
                elif quarter == 'q3':
                    ref1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3, '-', joined_year3+1, '/', 'Q-3')
                elif quarter == 'q4':
                    ref1.value="{}{}{}{}{}{}".format('REF : KCC/', year_int3-1, '-', joined_year3, '/', 'Q-4')
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border19
                row_num2+=1
                print()
                print('row_num2 ka value 3: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border12
                salutation1.fill=contenido1
                salutation1.alignment=alignment3
                salutation1.value='TO,'
                salutation1.font=Font(bold=True)
                ws2['C'+str(row_num2)].fill=contenido1
                ws2['D'+str(row_num2)].fill=contenido1
                ws2['E'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].border=border11
                row_num2+=1
                print()
                print('row_num2 ka value 4: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border12
                salutation1.fill=contenido1
                salutation1.alignment=alignment3
                salutation1.value='THE DIRECTOR,'
                salutation1.font=Font(bold=True)
                ws2['C'+str(row_num2)].fill=contenido1
                ws2['D'+str(row_num2)].fill=contenido1
                ws2['E'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].border=border11
                row_num2+=1
                print()
                print('row_num2 ka value 5: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border12
                salutation1.fill=contenido1
                salutation1.alignment=alignment3
                salutation1.value='KHANDESH CANCER CENTRE (OHRPL), DHULE.'
                salutation1.font=Font(bold=True)
                ws2['C'+str(row_num2)].fill=contenido1
                ws2['D'+str(row_num2)].fill=contenido1
                ws2['E'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].border=border11
                row_num2+=1
                print()
                print('row_num2 ka value 6: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border12
                salutation1.fill=contenido1
                salutation1.alignment=alignment3
                salutation1.value='Dear Sir/Madam,'
                salutation1.font=Font(size=8)
                ws2['C'+str(row_num2)].fill=contenido1
                ws2['D'+str(row_num2)].fill=contenido1
                ws2['E'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].border=border11
                row_num2+=1
                print()
                print('row_num2 ka value 7: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border12
                salutation1.fill=contenido1
                salutation1.alignment=alignment3
                if quarter == 'q1':
                    salutation1.value="{}{}{}{}{}".format('Herewith sending you the Settlemet Bill for the 1st Quarter of FY ', year_int3, '-', joined_year3+1, ' based on average billing.')
                elif quarter == 'q2':
                    salutation1.value="{}{}{}{}{}".format('Herewith sending you the Settlemet Bill for the 2nd Quarter of FY ', year_int3, '-', joined_year3+1, ' based on average billing.')
                elif quarter == 'q3':
                    salutation1.value="{}{}{}{}{}".format('Herewith sending you the Settlemet Bill for the 3rd Quarter of FY ', year_int3, '-', joined_year3+1, ' based on average billing.')
                elif quarter == 'q4':
                    salutation1.value="{}{}{}{}{}".format('Herewith sending you the Settlemet Bill for the 4th Quarter of FY ', year_int3-1, '-', joined_year3, ' based on average billing.')
                salutation1.font=Font(size=8)
                ws2['C'+str(row_num2)].fill=contenido1
                ws2['D'+str(row_num2)].fill=contenido1
                ws2['E'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].border=border11
                row_num2+=1
                print()
                print('row_num2 ka value 8: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.fill=contenido1
                salutation1.alignment=alignment3
                salutation1.value='Please settle the bill before the 10th of this month as agreed. Details of the bill and bank details are as follows.'
                salutation1.font=Font(size=8)
                ws2['C'+str(row_num2)].fill=contenido1
                ws2['D'+str(row_num2)].fill=contenido1
                ws2['E'+str(row_num2)].fill=contenido1
                ws2['F'+str(row_num2)].fill=contenido1
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border19
                row_num2+=1
                print()
                print('row_num2 ka value 9: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'E'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.alignment=alignment3
                if month2 == '01':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Jan - ', joined_year1, ' (A)')
                elif month2 == '04':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Apr - ', joined_year1, ' (A)')
                elif month2 == '07':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Jul - ', joined_year1, ' (A)')
                elif month2 == '10':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Oct - ', joined_year1, ' (A)')
                salutation1.font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border17
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot_comb1
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 10: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'E'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.alignment=alignment3
                salutation1.value=''
                salutation1.font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border17
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=''
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                ws2.row_dimensions[row_num2].height=7
                row_num2+=1
                print()
                print('row_num2 ka value 11: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'E'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.alignment=alignment3
                if month3 == '02':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Feb - ', joined_year2, ' (B)')
                elif month3 == '05':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in May - ', joined_year2, ' (B)')
                elif month3 == '08':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Aug - ', joined_year2, ' (B)')
                elif month3 == '11':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Nov - ', joined_year2, ' (B)')
                salutation1.font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border17
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot_comb31
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 12: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'E'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.alignment=alignment3
                salutation1.value=''
                salutation1.font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border17
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=''
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                ws2.row_dimensions[row_num2].height=7
                row_num2+=1
                print()
                print('row_num2 ka value 13: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'E'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.alignment=alignment3
                if month4 == '03':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Mar - ', joined_year3, ' (C)')
                elif month4 == '06':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in June - ', joined_year3, ' (C)')
                elif month4 == '09':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Sept - ', joined_year3, ' (C)')
                elif month4 == '12':
                    salutation1.value="{}{}{}".format('Realized Amount from Cash and Schemes in Dec - ', joined_year3, ' (C)')
                salutation1.font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border17
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot_comb51
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 14: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'E'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.alignment=alignment3
                salutation1.value=''
                salutation1.font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border17
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=''
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                ws2.row_dimensions[row_num2].height=7
                row_num2+=1
                print()
                print('row_num2 ka value 15: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'E'+str(row_num2))
                salutation1=ws2['B'+str(row_num2)]
                salutation1.border=border18
                salutation1.alignment=alignment3
                salutation1.value='Average Realized Amount from Cash and Schemes (D)'
                salutation1.font=Font(size=10, bold=True)
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border13
                ws2['E'+str(row_num2)].border=border13
                ws2['F'+str(row_num2)].border=border17
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=avg_total_income
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 16: ', row_num2)
                ws2['B'+str(row_num2)].value=''
                ws2['B'+str(row_num2)].border=border17
                ws2.merge_cells('C'+str(row_num2)+':'+'D'+str(row_num2))
                head1=ws2['C'+str(row_num2)]
                head1.border=border13
                head1.fill=contenido2
                head1.alignment=alignment1
                head1.value='ADVANCE'
                head1.font=Font(bold=True)
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].fill=contenido2
                ws2.merge_cells('E'+str(row_num2)+':'+'F'+str(row_num2))
                head2=ws2['E'+str(row_num2)]
                head2.border=border13
                head2.fill=contenido2
                head2.alignment=alignment1
                head2.value='EXPENSES'
                head2.font=Font(bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].fill=contenido2
                row_num2+=1
                print()
                print('row_num2 ka value 17: ', row_num2)
                ws2['B'+str(row_num2)].value=''
                ws2['B'+str(row_num2)].border=border17
                ws2['C'+str(row_num2)].value='KCC'
                ws2['C'+str(row_num2)].border=border19
                ws2['C'+str(row_num2)].alignment=alignment1
                ws2['C'+str(row_num2)].fill=contenido2
                ws2['D'+str(row_num2)].value='OOPL'
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].alignment=alignment1
                ws2['D'+str(row_num2)].fill=contenido2
                ws2['E'+str(row_num2)].value='KCC'
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].fill=contenido2
                ws2['F'+str(row_num2)].value='OOPL'
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].fill=contenido2
                row_num2+=1
                print()
                print('row_num2 ka value 18: ', row_num2)
                if month2 == '01':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Jan - ', joined_year1, ' (F)')
                elif month2 == '04':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Apr - ', joined_year1, ' (F)')
                elif month2 == '07':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Jul - ', joined_year1, ' (F)')
                elif month2 == '10':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Oct - ', joined_year1, ' (F)')
                ws2['B'+str(row_num2)].border=border17
                ws2['B'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['B'+str(row_num2)].alignment=alignment3
                ws2['C'+str(row_num2)].value=tot1
                ws2['C'+str(row_num2)].border=border19
                ws2['C'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].alignment=alignment1
                ws2['D'+str(row_num2)].value=tot1_oopl1
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['D'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=tot7
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot8
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['F'+str(row_num2)].alignment=alignment1
                row_num2+=1
                print()
                print('row_num2 ka value 19: ', row_num2)
                if month3 == '02':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Feb - ', joined_year2, ' (G)')
                elif month3 == '05':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of May - ', joined_year2, ' (G)')
                elif month3 == '08':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Aug - ', joined_year2, ' (G)')
                elif month3 == '11':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Nov - ', joined_year2, ' (G)')
                ws2['B'+str(row_num2)].border=border17
                ws2['B'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['B'+str(row_num2)].alignment=alignment3
                ws2['C'+str(row_num2)].value=tot31
                ws2['C'+str(row_num2)].border=border19
                ws2['C'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].alignment=alignment1
                ws2['D'+str(row_num2)].value=tot1_oopl31
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['D'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=tot37
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot38
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['F'+str(row_num2)].alignment=alignment1
                row_num2+=1
                print()
                print('row_num2 ka value 20: ', row_num2)
                if month4 == '03':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Mar - ', joined_year3, ' (H)')
                elif month4 == '06':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Jun - ', joined_year3, ' (H)')
                elif month4 == '09':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Sept - ', joined_year3, ' (H)')
                elif month4 == '12':
                    ws2['B'+str(row_num2)].value="{}{}{}".format('Revised Bill for the month of Dec - ', joined_year3, ' (H)')
                ws2['B'+str(row_num2)].border=border17
                ws2['B'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['B'+str(row_num2)].alignment=alignment3
                ws2['C'+str(row_num2)].value=tot51
                ws2['C'+str(row_num2)].border=border19
                ws2['C'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['C'+str(row_num2)].alignment=alignment1
                ws2['D'+str(row_num2)].value=tot1_oopl51
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['D'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=tot57
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot58
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].font=Font(size=8, bold=True)
                ws2['F'+str(row_num2)].alignment=alignment1
                row_num2+=1
                print()
                print('row_num2 ka value 21: ', row_num2)
                ws2['B'+str(row_num2)].value='AVERAGE OF RECEIPT & PAYMENT'
                ws2['B'+str(row_num2)].border=border17
                ws2['B'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['B'+str(row_num2)].alignment=alignment3
                ws2['C'+str(row_num2)].value=avg_kcc_income
                ws2['C'+str(row_num2)].border=border19
                ws2['C'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['C'+str(row_num2)].alignment=alignment1
                ws2['D'+str(row_num2)].value=avg_oopl_income
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['D'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=avg_kcc_expenses
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=avg_oopl_expenses
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].alignment=alignment1
                row_num2+=1
                print()
                print('row_num2 ka value 22: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value=''
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].fill=contenido2
                ws2['E'+str(row_num2)].value='KCC'
                ws2['E'+str(row_num2)].font=Font(bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].fill=contenido2
                ws2['F'+str(row_num2)].value='OOPL'
                ws2['F'+str(row_num2)].font=Font(bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 23: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'C'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value=''
                ws2['C'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].alignment=alignment1
                if month2 == '01':
                    ws2['D'+str(row_num2)].value="{}{}".format('Jan - ', joined_year1)
                elif month2 == '04':
                    ws2['D'+str(row_num2)].value="{}{}".format('Apr - ', joined_year1)
                elif month2 == '07':
                    ws2['D'+str(row_num2)].value="{}{}".format('Jul - ', joined_year1)
                elif month2 == '10':
                    ws2['D'+str(row_num2)].value="{}{}".format('Oct - ', joined_year1)
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=tot74
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot75
                row_num2+=1
                print()
                print('row_num2 ka value 24: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'C'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value=''
                ws2['C'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].alignment=alignment1
                if month3 == '02':
                    ws2['D'+str(row_num2)].value="{}{}".format('Feb - ', joined_year2)
                elif month3 == '05':
                    ws2['D'+str(row_num2)].value="{}{}".format('May - ', joined_year2)
                elif month3 == '08':
                    ws2['D'+str(row_num2)].value="{}{}".format('Aug - ', joined_year2)
                elif month3 == '11':
                    ws2['D'+str(row_num2)].value="{}{}".format('Nov - ', joined_year2)
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=tot79
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot80
                row_num2+=1
                print()
                print('row_num2 ka value 25: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'C'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value=''
                ws2['C'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].border=border19
                ws2['D'+str(row_num2)].alignment=alignment1
                if month4 == '03':
                    ws2['D'+str(row_num2)].value="{}{}".format('Mar - ', joined_year3)
                elif month4 == '06':
                    ws2['D'+str(row_num2)].value="{}{}".format('Jun - ', joined_year3)
                elif month4 == '09':
                    ws2['D'+str(row_num2)].value="{}{}".format('Sept - ', joined_year3)
                elif month4 == '12':
                    ws2['D'+str(row_num2)].value="{}{}".format('Dec - ', joined_year3)
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=tot84
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tot85
                row_num2+=1
                print()
                print('row_num2 ka value 26: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value='AMOUNT PAYABLE BY KCC AND RECEIVABLE BY OOPL RESP. BEFORE OPD'
                head2.font=Font(size=10, bold=True)
                head2.alignment=alignment3
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=total_before_opd_kcc
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=total_before_opd_oopl
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 27: ', row_num2)
                ws2['B'+str(row_num2)].border=border17
                ws2['B'+str(row_num2)].alignment=alignment3
                ws2['B'+str(row_num2)].value='LESS AND ADD RESP.'
                ws2['B'+str(row_num2)].font=Font(size=10, bold=True)
                ws2.merge_cells('C'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['C'+str(row_num2)]
                head2.alignment=alignment2
                head2.border=border18
                if month2 == '01':
                    opd_fro="{}{}".format('JAN - ', joined_year1)
                elif month2 == '04':
                    opd_fro="{}{}".format('APR - ', joined_year1)
                elif month2 == '07':
                    opd_fro="{}{}".format('JUL - ', joined_year1)
                elif month2 == '10':
                    opd_fro="{}{}".format('OCT - ', joined_year1)
                if month4 == '03':
                    opd_to="{}{}".format('MAR - ', joined_year3)
                elif month4 == '06':
                    opd_to="{}{}".format('JUN - ', joined_year3)
                elif month4 == '09':
                    opd_to="{}{}".format('SEPT - ', joined_year3)
                elif month4 == '12':
                    opd_to="{}{}".format('DEC - ', joined_year3)
                head2.value='OPD FROM '+opd_fro+' TO '+opd_to
                head2.font=Font(size=10, bold=True)
                ws2['D'+str(row_num2)].border=border17
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=total_opd
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=total_opd
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 28: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value='AMOUNT PAYABLE AFTER OPD'
                head2.font=Font(size=10, bold=True)
                head2.alignment=alignment3
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=total_after_opd_kcc
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=total_after_opd_oopl
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 29: ', row_num2)
                if tot86>0:
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='Additional Income (KCC)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot86
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot86
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 30: ', row_num2)
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='AMOUNT PAYABLE AFTER ADDITIONAL INCOME (KCC)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot90
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot91
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 31: ', row_num2)
                if tot87>0:
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='Additional Income (OOPL)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot87
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot87
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 32: ', row_num2)
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='AMOUNT PAYABLE AFTER ADDITIONAL INCOME (OOPL)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot92
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot93
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 33: ', row_num2)
                if tot88>0:
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='Other Expenses (OOPL)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot88
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot88
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 34: ', row_num2)
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='AMOUNT PAYABLE AFTER OTHER EXPENSES (OOPL)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot94
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot95
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 35: ', row_num2)
                if tot89>0:
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='Other Expenses (KCC)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot89
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot89
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 36: ', row_num2)
                    ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                    head2=ws2['B'+str(row_num2)]
                    head2.border=border18
                    head2.value='AMOUNT PAYABLE AFTER OTHER EXPENSES (KCC)'
                    head2.font=Font(size=10, bold=True)
                    head2.alignment=alignment3
                    ws2['C'+str(row_num2)].border=border13
                    ws2['D'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].border=border19
                    ws2['E'+str(row_num2)].alignment=alignment1
                    ws2['E'+str(row_num2)].value=tot96
                    ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                    ws2['F'+str(row_num2)].border=border19
                    ws2['F'+str(row_num2)].alignment=alignment1
                    ws2['F'+str(row_num2)].value=tot97
                    ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                    row_num2+=1
                    print()
                    print('row_num2 ka value 37: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value="{}{}{}{}".format('AMOUNT CREDITED (INCLUDING TDS) ', round(first_month_bill), '+', round(second_month_bill))
                head2.font=Font(size=10, bold=True)
                head2.alignment=alignment3
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=amount_received_earlier
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=amount_received_earlier
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 38: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value='PAYABLE FROM KCC TO OOPL BEFORE TDS'
                head2.font=Font(size=10, bold=True)
                head2.alignment=alignment3
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=payable_before_tds_kcc
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=payable_before_tds_oopl
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 39: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value='LESS  :  TDS 10%'
                head2.font=Font(size=10, bold=True)
                head2.alignment=alignment3
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=''
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=tds4
                ws2['F'+str(row_num2)].font=Font(size=10, bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 40: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'D'+str(row_num2))
                head2=ws2['B'+str(row_num2)]
                head2.border=border18
                head2.value='PAYABLE FROM KCC TO OOPL AFTER TDS'
                head2.font=Font(bold=True)
                head2.alignment=alignment3
                ws2['C'+str(row_num2)].border=border13
                ws2['D'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].border=border19
                ws2['E'+str(row_num2)].alignment=alignment1
                ws2['E'+str(row_num2)].value=''
                ws2['E'+str(row_num2)].font=Font(size=10, bold=True)
                ws2['F'+str(row_num2)].border=border19
                ws2['F'+str(row_num2)].fill=contenido2
                ws2['F'+str(row_num2)].alignment=alignment1
                ws2['F'+str(row_num2)].value=net4
                ws2['F'+str(row_num2)].font=Font(bold=True)
                row_num2+=1
                print()
                print('row_num2 ka value 41: ', row_num2)
                ws2.merge_cells('B'+str(row_num2)+':'+'F'+str(row_num2+1))
                bottom_1=ws2['B'+str(row_num2)]
                bottom_1.border=border12
                bottom_1.alignment=alignment
                bottom_1.value='Company PAN : AACCO3789M, email id. accounts@optimusoncology.com, mobile no. 8999250794, BANK DETAILS:Optimus Oncology Private Limited,HDFC(Suyojit Sankul,Nashik),  A/C NO.:50200021888130, IFSC CODE::HDFC0001246 (5/6/7th Character is zero)'
                bottom_1.font=Font(size=8)
                ws2['B'+str(row_num2+1)].border=border18
                ws2['C'+str(row_num2+1)].border=border13
                ws2['D'+str(row_num2+1)].border=border13
                ws2['E'+str(row_num2+1)].border=border13
                ws2['F'+str(row_num2)].border=border11
                ws2['F'+str(row_num2+1)].border=border19
                print()
                print('row_num2 ka value 42: ', row_num2)
                #Settlement Bill Ends Here
                #extra sheet deletion
                extra_sheet=wb.get_sheet_by_name('Sheet')
                wb.remove_sheet(extra_sheet)
                wb.save(response)
                return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def patient_view(request):
    print('get mein: ', request)
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print()
                print('post mein: ', request)
                fm_patient=PatientForm(request.POST)
                for field in fm_patient:
                    print("Field Error:", field.name,  field.errors)
                if fm_patient.is_valid():
                    fm_patient.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_patient=PatientForm()
                cur_user=request.user
                nav_msg='Patient Profiling'
                return render(request, 'dhule/patient.html', {'form':fm_patient, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_patient=PatientForm()
                cur_user=request.user
                nav_msg='Patient Profiling'
                return render(request, 'dhule/patient.html', {'form':fm_patient, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def common_expenses_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_common_expenses=CommonExpensesForm(request.POST)
                if fm_common_expenses.is_valid():
                    fm_common_expenses.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_common_expenses=CommonExpensesForm()
                cur_user=request.user
                nav_msg='Common Expense Form'
                return render(request, 'dhule/common_expenses.html', {'form':fm_common_expenses, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_common_expenses=CommonExpensesForm()
                cur_user=request.user
                nav_msg='Common Expense Form'
                return render(request, 'dhule/common_expenses.html', {'form':fm_common_expenses, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def other_income_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_other_income=OtherIncomeForm(request.POST)
                if fm_other_income.is_valid():
                    fm_other_income.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_other_income=OtherIncomeForm()
                cur_user=request.user
                nav_msg='Other Income Form'
                return render(request, 'dhule/other_income.html', {'form':fm_other_income, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_other_income=OtherIncomeForm()
                cur_user=request.user
                nav_msg='Other Income Form'
                return render(request, 'dhule/other_income.html', {'form':fm_other_income, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def additional_income_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_additional_income=AdditionalIncomeForm(request.POST)
                if fm_additional_income.is_valid():
                    fm_additional_income.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_additional_income=AdditionalIncomeForm()
                cur_user=request.user
                nav_msg='Additional Income Form'
                return render(request, 'dhule/additional_income.html', {'form':fm_additional_income, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_additional_income=AdditionalIncomeForm()
                cur_user=request.user
                nav_msg='Additional Income Form'
                return render(request, 'dhule/additional_income.html', {'form':fm_additional_income, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def other_expenses_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_other_expenses=OtherExpensesForm(request.POST)
                if fm_other_expenses.is_valid():
                    fm_other_expenses.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_other_expenses=OtherExpensesForm()
                cur_user=request.user
                nav_msg='Other Expense Form'
                return render(request, 'dhule/other_expenses.html', {'form':fm_other_expenses, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_other_expenses=OtherExpensesForm()
                cur_user=request.user
                nav_msg='Other Expense Form'
                return render(request, 'dhule/other_expenses.html', {'form':fm_other_expenses, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def opd_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_opd=OpdForm(request.POST)
                if fm_opd.is_valid():
                    opd=fm_opd.save()
                    messages.success(request, 'Data saved successfully!')
                    OpdReport.objects.create(patient=opd.patient, opd=opd)
                    fm_opd=OpdForm()
                cur_user=request.user
                nav_msg='OPD Form'
                return render(request, 'dhule/opd.html', {'form':fm_opd, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_opd=OpdForm()
                cur_user=request.user
                nav_msg='OPD Form'
                return render(request, 'dhule/opd.html', {'form':fm_opd, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def opdreport_slim_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            report=Opd.objects.all().order_by('id')
            paginator=Paginator(report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='OPD Report'
            return render(request, 'dhule/opd_slim_report.html', {'page_obj': page_obj, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')


def diagnosis_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_diagnosis=DiagnosisForm(request.POST, prefix='diagnosis_form')
                if fm_diagnosis.is_valid():
                    fm_diagnosis.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_diagnosis=DiagnosisForm(prefix='diagnosis_form')
                cur_user=request.user
                nav_msg='Diagnosis'
                return render(request, 'dhule/diagnosis.html', {'form':fm_diagnosis, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_diagnosis=DiagnosisForm(prefix='diagnosis_form')
                cur_user=request.user
                nav_msg='Diagnosis'
                return render(request, 'dhule/diagnosis.html', {'form':fm_diagnosis, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')


def treatment_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_treatment=TreatmentForm(request.POST, prefix='treatment_form')
                if fm_treatment.is_valid():
                    fm_treatment.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_treatment=TreatmentForm(prefix='treatment_form')
                cur_user=request.user
                nav_msg='Treatment'
                return render(request, 'dhule/treatment.html', {'form':fm_treatment, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_treatment=TreatmentForm(prefix='treatment_form')
                cur_user=request.user
                nav_msg='Treatment'
                return render(request, 'dhule/treatment.html', {'form':fm_treatment, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')


def patient_type_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_patient_type=PatientTypeForm(request.POST, prefix='patien_type_form')
                if fm_patient_type.is_valid():
                    fm_patient_type.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_patient_type=PatientTypeForm(prefix='patien_type_form')
                cur_user=request.user
                nav_msg='Patient Categories'
                return render(request, 'dhule/patient_type.html', {'form':fm_patient_type, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_patient_type=PatientTypeForm(prefix='patien_type_form')
                cur_user=request.user
                nav_msg='Patient Categories'
                return render(request, 'dhule/patient_type.html', {'form':fm_patient_type, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')


def paxmax_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print('paxmax mein data: ', request.POST)
                fm_paxmax=PaxMaxForm(request.POST)
                if fm_paxmax.is_valid():
                    fm_paxmax.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_paxmax=PaxMaxForm()
                cur_user=request.user
                nav_msg='Rate Chart Entry'
                return render(request, 'dhule/paxmax.html', {'form':fm_paxmax, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_paxmax=PaxMaxForm()
                cur_user=request.user
                nav_msg='Rate Chart Entry'
                return render(request, 'dhule/paxmax.html', {'form':fm_paxmax, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def paxmax_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            paxmax_report=PaxMax.objects.all().order_by('id')
            cur_user=request.user
            nav_msg='Rate Chart'
            context={'report': paxmax_report, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/paxmax_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def package_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print('package mein date ka format: ', request.POST)
                fm_package=PackageForm(request.POST, prefix='package_form')
                if fm_package.is_valid():
                    package=fm_package.save()
                    messages.success(request, 'Data saved successfully!')
                    IpdReport.objects.create(patient=package.patient, package=package)
                    fm_package=PackageForm(prefix='package_form')
                cur_user=request.user
                nav_msg='Package Form'
                return render (request, 'dhule/package.html', {'form':fm_package, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_package=PackageForm(prefix='package_form')
                cur_user=request.user
                nav_msg='Package Form'
                return render (request, 'dhule/package.html', {'form':fm_package, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')


def approved_package_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ptt1=request.POST.get('patient_type')
                pt1=request.POST.get('patient')
                ap_date=request.POST.get('approval_date')
                print('patient type 1: ', ptt1)
                if Discharge.objects.filter(patient=pt1, date_of_discharge__lt=datetime.datetime.strptime(ap_date, '%Y-%m-%d')):
                    dis_latest=Discharge.objects.filter(patient=pt1).order_by('-id').first()
                    pkg1=Package.objects.filter(patient=pt1, date_of_admission__gt=dis_latest.date_of_discharge)
                else:
                    pkg1=Package.objects.filter(patient=pt1)
                fm_approved_package=ApprovedPackageForm(request.POST, request=request)
                if fm_approved_package.is_valid():
                    approved_package=fm_approved_package.save(commit=False)
                    if pkg1.count()>1:
                        print('hello')
                        for i in pkg1:
                            print('i.patient type ', i.patient_type.id)
                            ptt2=i.patient_type.id
                            if ptt2==int(ptt1):
                                print('Hello world')
                                approved_package=fm_approved_package.save()
                                messages.success(request, 'Data saved successfully!')
                                print('Hiii')
                                IpdReport.objects.create(patient=approved_package.patient, package=Package.objects.filter(patient=approved_package.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=approved_package)
                    else:
                        approved_package=fm_approved_package.save()
                        messages.success(request, 'Data saved successfully!')
                        IpdReport.objects.create(patient=approved_package.patient, package=Package.objects.filter(patient=approved_package.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=approved_package)
                    fm_approved_package=ApprovedPackageForm(request=request)
                cur_user=request.user
                nav_msg='Approved Package'
                return render(request, 'dhule/approved_package.html', {'form':fm_approved_package, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_approved_package=ApprovedPackageForm(request=request)
                cur_user=request.user
                nav_msg='Approved Package'
                return render(request, 'dhule/approved_package.html', {'form':fm_approved_package, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def ctscan_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ptt1=request.POST.get('patient_type')
                pt1=request.POST.get('patient')
                ct_date=request.POST.get('date')
                print('patient type 1: ', ptt1)
                if Discharge.objects.filter(patient=pt1, date_of_discharge__lt=datetime.datetime.strptime(ct_date, '%Y-%m-%d')):
                    dis_latest=Discharge.objects.filter(patient=pt1).order_by('-id').first()
                    pkg1=Package.objects.filter(patient=pt1, date_of_admission__gt=dis_latest.date_of_discharge)
                else:
                    pkg1=Package.objects.filter(patient=pt1)
                fm_ctscan=CTScanForm(request.POST, request=request)
                if fm_ctscan.is_valid():
                    ctscan=fm_ctscan.save(commit=False)
                    if pkg1.count()>1:
                        print('hello')
                        for i in pkg1:
                            print('i.patient type ', i.patient_type.id)
                            ptt2=i.patient_type.id
                            if ptt2==int(ptt1):
                                print('Hello world')
                                ctscan=fm_ctscan.save()
                                messages.success(request, 'Data saved successfully!')
                                print('hiii')
                                IpdReport.objects.create(patient=ctscan.patient, package=Package.objects.filter(patient=ctscan.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=ctscan.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=ctscan)
                    else:
                        ctscan=fm_ctscan.save()
                        messages.success(request, 'Data saved successfully!')
                        IpdReport.objects.create(patient=ctscan.patient, package=Package.objects.filter(patient=ctscan.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=ctscan.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=ctscan)
                    fm_ctscan=CTScanForm(request=request)
                cur_user=request.user
                nav_msg='CT Scan Form'
                return render(request, 'dhule/ctscan.html', {'form':fm_ctscan, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_ctscan=CTScanForm(request=request)
                cur_user=request.user
                nav_msg='CT Scan Form'
                return render(request, 'dhule/ctscan.html', {'form':fm_ctscan, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def ctscan_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            ct_report=CTScan.objects.all().order_by('id')
            myFilter=CTScanFilters(request.POST, queryset=ct_report)
            ct_report=myFilter.qs
            total=ct_report.aggregate(Sum('amount'))
            rp=serializers.serialize('json', ct_report)
            request.session['ct_report']=rp
            paginator=Paginator(ct_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='CT Scan Reports'
            context={'page_obj': page_obj, 'total':total, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/ct_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_ctscan_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print('export_ctscan_report_view mein response', response)
            response['Content-Disposition']='attachment; filename=CT Scan Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['ct_report']
            print()
            ctscan=CTScan.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('patient__name', 'patient__id', 'patient_type__patient_type', 'rt_number', 'amount', 'date', 'conducted_by')
            print(ctscan)
            print(ctscan[1][1])
            print(len(ctscan))
            wb=Workbook()
            ws=wb.active
            ws.title="CT Scan Report"
            headings=['Patient Name', 'Patient Number', 'Patient Type', 'RT Number', 'Amount', 'Date', 'Conducted By']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=CTScan.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(ctscan)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=ctscan[row][col]
                    if char=='A':
                        if ttl[row].patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+ctscan[row][col]
                        if ttl[row].patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+ctscan[row][col]
                        if ttl[row].patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+ctscan[row][col]
                        if ttl[row].patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+ctscan[row][col]
                    if char=='F':
                        ws[char+str(row+2)].value=ctscan[row][col].strftime("%d/%m/%Y")
                    if char=='G':
                        if ttl[row].conducted_by=='k':
                            ws[char+str(row+2)].value="KCC"
                        elif ttl[row].conducted_by=='o':
                            ws[char+str(row+2)].value="OOPL"
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['B'+str(row+2)]="{}{:d}".format('PN/D/', ctscan[row][1])
            total1=ctscan.aggregate(Sum('amount'))
            tots=['Totals', '', '', '', total1['amount__sum'], '', '']
            ws.append(tots)
            a=list(ws.rows)
            b=len(a)
            for row in range(b-1,b):
                for col in range(len(tots)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+1)].font=Font(bold=True)
                    if char=='A':
                        ws[char+str(row+1)].border=border1
                    elif char=='E':
                        ws[char+str(row+1)].border=border1
                        ws[char+str(row+1)].fill=total_figure
                        ws[char+str(row+1)].alignment=alignment
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def radiations_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ptt1=request.POST.get('patient_type')
                pt1=request.POST.get('patient')
                rt_date=request.POST.get('date')
                print('patient type 1: ', ptt1)
                if Discharge.objects.filter(patient=pt1, date_of_discharge__lt=datetime.datetime.strptime(rt_date, '%Y-%m-%d')):
                    dis_latest=Discharge.objects.filter(patient=pt1).order_by('-id').first()
                    pkg1=Package.objects.filter(patient=pt1, date_of_admission__gt=dis_latest.date_of_discharge)
                else:
                    pkg1=Package.objects.filter(patient=pt1)
                fm_radiation=RadiationsForm(request.POST, request=request)
                if fm_radiation.is_valid():
                    radiations=fm_radiation.save(commit=False)
                    if pkg1.count()>1:
                        print('hello')
                        for i in pkg1:
                            print('i.patient type ', i.patient_type.id)
                            ptt2=i.patient_type.id
                            if ptt2==int(ptt1):
                                print('Hello world')
                                radiations=fm_radiation.save()
                                messages.success(request, 'Data saved successfully!')
                                print('hiii')
                                ipd=IpdReport.objects.create(patient=radiations.patient, package=Package.objects.filter(patient=radiations.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=radiations.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=radiations.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=radiations)
                                print('radiations ke views ka ipd value: ', ipd)
                                OngoingReport.objects.create(ipdreport=ipd)
                    else:
                        radiations=fm_radiation.save()
                        messages.success(request, 'Data saved successfully!')
                        ipd=IpdReport.objects.create(patient=radiations.patient, package=Package.objects.filter(patient=radiations.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=radiations.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=radiations.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=radiations)
                        print('radiations ke views ka ipd value: ', ipd)
                        OngoingReport.objects.create(ipdreport=ipd)
                    fm_radiation=RadiationsForm(request=request)
                cur_user=request.user
                nav_msg='Fractions'
                return render(request, 'dhule/radiations.html', {'form':fm_radiation, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_radiation=RadiationsForm(request=request)
                cur_user=request.user
                nav_msg='Fractions'
                return render(request, 'dhule/radiations.html', {'form':fm_radiation, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def radiations_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            radiations_report=Radiations.objects.all().order_by('id')
            myFilter=RadiationsFilters(request.POST, queryset=radiations_report)
            radiations_report=myFilter.qs
            rp=serializers.serialize('json', radiations_report)
            request.session['radiations_report']=rp
            paginator=Paginator(radiations_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='Radiations Reports'
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/radiations_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def patient_name_rt_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                context={}
                pt=request.POST.get('patient')
                ptt=request.POST.get('patient_type')
                pt_id=[]
                for i in pt.split("/"):
                    if i.isdigit():
                        pt_id.append(int(i))
                print('pt id ka value: ', pt_id)
                print('patient: ', pt)
                print('patient type: ', ptt)
                for pt in pt_id:
                    if CTScan.objects.filter(patient=pt, patient_type__patient_type=ptt).order_by('-id').first():
                        ct_scan=CTScan.objects.filter(patient=pt, patient_type__patient_type=ptt).order_by('-id').first()
                        print('ct_scan: ', ct_scan)
                        print('rt_number: ', ct_scan.rt_number)
                        context['rt']=ct_scan.rt_number
                    else:
                        print('today: ', datetime.date.today())
                        today=str(datetime.date.today())
                        year, month, day=today.split('-')
                        rt_initial="{}{}{}{}{}".format('RT/', year, '/', month, '/')
                        context['rt']=rt_initial
                return JsonResponse(context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def patient_name_fn_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                context={}
                pt=request.POST.get('patient')
                ptt=request.POST.get('patient_type')
                pt_id=[]
                for i in pt.split("/"):
                    if i.isdigit():
                        pt_id.append(int(i))
                print('pt id ka value: ', pt_id)
                print('patient: ', pt)
                print('patient type: ', ptt)
                for pt in pt_id:
                    ct=CTScan.objects.filter(patient=pt, patient_type__patient_type=ptt).order_by('-id').first()
                    if ct:
                        fra=Radiations.objects.filter(patient=pt, patient_type__patient_type=ptt, date__gte=ct.date).order_by('-id').first()
                        if fra:
                            print('fra: ', fra)
                            context['fra']=fra.done_fractions
                        else:
                            context['fra']=0
                return JsonResponse(context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def patient_name_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                pt=request.POST.get('patient')
                pt_id=[]
                for i in pt.split("/"):
                    if i.isdigit():
                        pt_id.append(int(i))
                print('pt id ka value: ', pt_id)
                print('patient: ', pt)
                for pt in pt_id:
                    package=Package.objects.filter(patient=pt).order_by('-id').first()
                print('package: ', package)
                print('total package: ', package.total_package)
                print('patient type: ', package.patient_type.patient_type)
                context={'pkg':package.total_package, 'ptt':package.patient_type.patient_type}
                return JsonResponse(context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def tp_mx_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                context={}
                tt=request.POST.get('treatment')
                ptt=request.POST.get('patient_type')
                print('treatment: ', tt)
                print('patient type: ', ptt)
                try:
                    paxmax=PaxMax.objects.get(treatment__treatment=tt, patient_type__patient_type=ptt)
                    context['mf']=paxmax.max_fractions
                    context['tp']=paxmax.total_package
                    print('max ka value view mein: ', paxmax.max_fractions)
                    print('tp ka value view mein: ', paxmax.total_package)
                except PaxMax.DoesNotExist:
                    context['mf']=0
                    context['tp']=0
                print('context ', context)
                return JsonResponse(context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def discharge_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ptt1=request.POST.get('patient_type')
                pt1=request.POST.get('patient')
                dod=request.POST.get('date_of_discharge')
                print('patient type 1: ', ptt1)
                if Discharge.objects.filter(patient=pt1, date_of_discharge__lt=datetime.datetime.strptime(dod, '%Y-%m-%d')):
                    dis_latest=Discharge.objects.filter(patient=pt1).order_by('-id').first()
                    pkg1=Package.objects.filter(patient=pt1, date_of_admission__gt=dis_latest.date_of_discharge)
                else:
                    pkg1=Package.objects.filter(patient=pt1)
                fm_discharge=DischargeForm(request.POST, request=request)
                if fm_discharge.is_valid():
                    discharge=fm_discharge.save(commit=False)
                    if pkg1.count()>1:
                        print('hello')
                        for i in pkg1:
                            print('i.patient type ', i.patient_type.id)
                            ptt2=i.patient_type.id
                            if ptt2==int(ptt1):
                                print('Hello world')
                                discharge=fm_discharge.save()
                                messages.success(request, 'Data saved successfully!')
                                print('Hiii')
                                ipd=IpdReport.objects.create(patient=discharge.patient, package=Package.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(),ctscan=CTScan.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=discharge)
                                if discharge is not None:
                                    OngoingReport.objects.filter(ipdreport__patient=discharge.patient, ipdreport__package__patient_type=int(ptt1)).delete()
                                    package=Package.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first().patient_type.patient_type
                                    if discharge.discharge_updated==False and package!='CASH':
                                        UnclaimedPendingCases.objects.create(ipdreport=ipd)
                                    elif discharge.discharge_updated==True and package!='CASH':
                                        ClaimedPendingCases.objects.create(ipdreport=ipd)
                    else:
                        discharge=fm_discharge.save()
                        messages.success(request, 'Data saved successfully!')
                        print('check 1')
                        ipd=IpdReport.objects.create(patient=discharge.patient, package=Package.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(),ctscan=CTScan.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=discharge)
                        if discharge is not None:
                            print('check 2')
                            OngoingReport.objects.filter(ipdreport__patient=discharge.patient, ipdreport__package__patient_type=int(ptt1)).delete()
                            print('check 3')
                            package=Package.objects.filter(patient=discharge.patient, patient_type=int(ptt1)).order_by('-id').first().patient_type.patient_type
                            print('check 4')
                            print('check 4.1', discharge.discharge_updated)
                            print('check 4.2', package!='CASH')
                            if discharge.discharge_updated==False and package!='CASH':
                                print('check 5')
                                UnclaimedPendingCases.objects.create(ipdreport=ipd)
                            elif discharge.discharge_updated==True and package!='CASH':
                                print('check 6')
                                ClaimedPendingCases.objects.create(ipdreport=ipd)
                    fm_discharge=DischargeForm(request=request)
                cur_user=request.user
                nav_msg='Discharge Form'
                return render(request, 'dhule/discharge.html', {'form':fm_discharge, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_discharge=DischargeForm(request=request)
                cur_user=request.user
                nav_msg='Discharge Form'
                return render(request, 'dhule/discharge.html', {'form':fm_discharge, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def realization_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print('Hello 1')
                ptt1=request.POST.get('patient_type')
                pt1=request.POST.get('patient')
                print('patient: ', pt1)
                real_date=request.POST.get('billing_month')
                print('real date: ', real_date)
                print('patient type 1: ', ptt1)
                fm_realization=RealizationForm(request.POST, request=request)
                print('Hello 2')
                if fm_realization.is_valid():
                    print('Hello 3')
                    realization=fm_realization.save(commit=False)
                    print('Hello 4')
                    ap_latest=ApprovedPackage.objects.filter(patient=int(pt1), patient_type=int(ptt1)).order_by('-id').first()
                    print('ap latest: ', ap_latest)
                    if Discharge.objects.filter(patient=pt1, date_of_discharge__lt=datetime.datetime.strptime(real_date, '%Y-%m-%d')).filter(date_of_discharge__lt=ap_latest.approval_date):
                        dis_latest=Discharge.objects.filter(patient=pt1).order_by('-id').first()
                        pkg1=Package.objects.filter(patient=pt1, date_of_admission__gt=dis_latest.date_of_discharge)
                    else:
                        pkg1=Package.objects.filter(patient=pt1)
                    if pkg1.count()>1:
                        print('hello')
                        for i in pkg1:
                            print('i.patient type ', i.patient_type.id)
                            ptt2=i.patient_type.id
                            if ptt2==int(ptt1):
                                print('Hello world')
                                realization=fm_realization.save()
                                messages.success(request, 'Data saved successfully!')
                                print('hiii')
                                package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first()
                                discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1), date_of_discharge__gte=package.date_of_admission).order_by('-id').first()
                                if discharge:
                                    print('Hello 5')
                                    try:
                                        rad1=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id')[1]
                                        rad2=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                                        exp1=rad1.expected_value
                                        print('exp1 ka value multiple patient type waale ke if discharge ke try mein: ', exp1)
                                        exp2=rad2.expected_value
                                        print('exp2 ka value multiple patient type waale ke if discharge ke try mein: ', exp2)
                                        if exp1!=exp2:
                                            print('Hello 6')
                                            if package.patient_type.patient_type!='CASH' and realization.cash==False:
                                                ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=rad1, discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                            else:
                                                ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                        else:
                                            print('Hello 7')
                                            ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                    except IndexError:
                                        print('Hello 8')
                                        ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                else:
                                    ap=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1), approval_date__gte=package.date_of_admission).order_by('-id').first()
                                    ct=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                                    if ap and not ct:
                                        print('Hello 8.1')
                                        ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                    else:
                                        print('Hello 9')
                                        rad=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                                        if ct and not rad:
                                            print('Hello 10')
                                            ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                        elif ct and rad:
                                            print('Hello 11')
                                            try:
                                                rad1=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id')[1]
                                                rad2=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                                                exp1=rad1.expected_value
                                                print('exp1 ka value multiple patient type waale ke if discharge ke if ct and rad ke try mein: ', exp1)
                                                exp2=rad2.expected_value
                                                print('exp2 ka value multiple patient type waale ke if discharge ke if ct and rad ke try mein: ', exp2)
                                                if exp1!=exp2:
                                                    print('Hello 12')
                                                    if package.patient_type.patient_type!='CASH' and realization.cash==False:
                                                        ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=rad1, realization=realization)
                                                    else:
                                                        ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                                else:
                                                    print('Hello 13')
                                                    ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                            except IndexError:
                                                print('Hello 14')
                                                ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                    OngoingReport.objects.create(ipdreport=ipdreport)
                                    print('Hello 15')
                                if realization.deficit_percentage != 0 and package.patient_type.patient_type!='CASH':
                                    print('Hello 16')
                                    if realization.cash==False:
                                        print('Hello 17')
                                        RepudiatedClaims.objects.create(ipdreport=ipdreport)
                                        print('Hello 18')
                                if realization.cash==False:
                                    print('Hello 19')
                                    try:
                                        clm=ClaimedPendingCases.objects.get(ipdreport__patient=realization.patient, ipdreport__package__patient_type=int(ptt1))
                                        if clm:
                                            print('Hello 20')
                                            clm.delete()
                                            print('Hello 21')
                                    except ClaimedPendingCases.DoesNotExist:
                                        print('Hello 22')
                                        pass
                    else:
                        realization=fm_realization.save()
                        messages.success(request, 'Data saved successfully!')
                        print('check 1')
                        package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first()
                        print('check 2')
                        discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1), date_of_discharge__gte=package.date_of_admission).order_by('-id').first()
                        print('check 3')
                        if discharge:
                            print('Hello 5')
                            try:
                                rad1=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id')[1]
                                rad2=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                                exp1=rad1.expected_value
                                print('exp1 ka value single patient type waale ke if discharge ke try mein: ', exp1)
                                exp2=rad2.expected_value
                                print('exp2 ka value single patient type waale ke if discharge ke try mein: ', exp2)
                                if exp1!=exp2:
                                    print('Hello 6')
                                    if package.patient_type.patient_type!='CASH' and realization.cash==False:
                                        print('check 4')
                                        ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=rad1, discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                    else:
                                        print('check 5')
                                        ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                else:
                                    print('Hello 7')
                                    ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                            except IndexError:
                                print('Hello 8')
                                ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), discharge=Discharge.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                        else:
                            print('check 6')
                            ap=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1), approval_date__gte=package.date_of_admission).order_by('-id').first()
                            ct=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                            if ap and not ct:
                                print('Hello 8.1')
                                ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                            else:
                                print('Hello 9')
                                rad=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                                if ct and not rad:
                                    print('Hello 10')
                                    ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                elif ct and rad:
                                    print('Hello 11')
                                    try:
                                        rad1=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id')[1]
                                        rad2=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1), date__gte=package.date_of_admission).order_by('-id').first()
                                        exp1=rad1.expected_value
                                        print('exp1 ka value single patient type waale ke if discharge ke if ct and rad ke try mein: ', exp1)
                                        exp2=rad2.expected_value
                                        print('exp2 ka value single patient type waale ke if discharge ke if ct and rad ke try mein: ', exp2)
                                        if exp1!=exp2:
                                            print('Hello 12')
                                            if package.patient_type.patient_type!='CASH' and realization.cash==False:
                                                print('check 7')
                                                ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=rad1, realization=realization)
                                            else:
                                                print('check 8')
                                                ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                        else:
                                            print('Hello 13')
                                            ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                                    except IndexError:
                                        print('Hello 14')
                                        ipdreport=IpdReport.objects.create(patient=realization.patient, package=Package.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=realization.patient, patient_type=int(ptt1)).order_by('-id').first(), realization=realization)
                            print('check 9')
                            OngoingReport.objects.create(ipdreport=ipdreport)
                            print('Hello 15')
                        if realization.deficit_percentage != 0 and package.patient_type.patient_type!='CASH':
                            print('Hello 16')
                            if realization.cash==False:
                                print('Hello 17')
                                RepudiatedClaims.objects.create(ipdreport=ipdreport)
                                print('Hello 18')
                        if realization.cash==False:
                            print('Hello 19')
                            try:
                                clm=ClaimedPendingCases.objects.get(ipdreport__patient=realization.patient, ipdreport__package__patient_type=int(ptt1))
                                if clm:
                                    print('Hello 20')
                                    clm.delete()
                                    print('Hello 21')
                            except ClaimedPendingCases.DoesNotExist:
                                print('Hello 22')
                                pass
                    fm_realization=RealizationForm(request=request)
                cur_user=request.user
                nav_msg='Receipt Entry'
                return render(request, 'dhule/realization.html', {'form':fm_realization, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_realization=RealizationForm(request=request)
                cur_user=request.user
                nav_msg='Receipt Entry'
                return render(request, 'dhule/realization.html', {'form':fm_realization, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def depositor_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_depositor=DepositorForm(request.POST)
                if fm_depositor.is_valid():
                    fm_depositor.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_depositor=DepositorForm()
                cur_user=request.user
                nav_msg='Create a Depositor'
                return render(request, 'dhule/depositor.html', {'form':fm_depositor, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_depositor=DepositorForm()
                cur_user=request.user
                nav_msg='Create a Depositor'
                return render(request, 'dhule/depositor.html', {'form':fm_depositor, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def service_name_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_service_name=ServiceNameForm(request.POST)
                if fm_service_name.is_valid():
                    fm_service_name.save()
                    messages.success(request, 'Data saved successfully!')
                    fm_service_name=ServiceNameForm()
                cur_user=request.user
                nav_msg='Create a Service'
                return render(request, 'dhule/service_name.html', {'form':fm_service_name, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_service_name=ServiceNameForm()
                cur_user=request.user
                nav_msg='Create a Service'
                return render(request, 'dhule/service_name.html', {'form':fm_service_name, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def piggy_bank_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_pb=PiggyBankForm(request.POST)
                if fm_pb.is_valid():
                    pb=fm_pb.save()
                    messages.success(request, 'Data saved successfully!')
                    PettyCash.objects.create(piggybank=pb, withdrawal=Withdrawal.objects.filter(depositor=pb.depositor).order_by('-id').first())
                    fm_pb=PiggyBankForm()
                cur_user=request.user
                nav_msg='Deposit Form'
                return render(request, 'dhule/pb_data.html', {'form':fm_pb, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_pb=PiggyBankForm()
                cur_user=request.user
                nav_msg='Deposit Form'
                return render(request, 'dhule/pb_data.html', {'form':fm_pb, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def piggybank_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            piggy_report=PiggyBank.objects.all().order_by('id')
            myFilter=PiggyBankFilters(request.POST, queryset=piggy_report)
            piggy_report=myFilter.qs
            cur_user=request.user
            nav_msg='Deiposits'
            context={'report': piggy_report, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/piggy_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_piggybank_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                # print(request.POST)
                pig=PiggyBank.objects.get(pk=id)
                print(pig.amount)
                form=PiggyBankForm(request.POST, instance=pig)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Deiposits'
                return render(request, 'dhule/update_piggybank.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                pig=PiggyBank.objects.get(pk=id)
                form=PiggyBankForm(instance=pig)
                cur_user=request.user
                nav_msg='Update Deiposits'
            return render(request, 'dhule/update_piggybank.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def piggybank_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                pig=PiggyBank.objects.get(pk=id)
                pig.delete()
            return HttpResponseRedirect('/dhule/piggy_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def lock_data_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ptt1=request.POST.get('patient_type')
                pt1=request.POST.get('patient')
                lock_date=request.POST.get('date')
                print('patient type 1: ', ptt1)
                fm_lock=LockDataForm(request.POST, prefix='lock_form')
                if fm_lock.is_valid():
                    lock=fm_lock.save(commit=False)
                    if Discharge.objects.filter(patient=pt1, patient_type__patient_type=ptt1):
                        dis1=Discharge.objects.filter(patient=pt1, patient_type__patient_type=ptt1).order_by('-id').first()
                        if LockData.objects.filter(patient=pt1, patient_type__patient_type=ptt1, date__gte=dis1.date_of_discharge):
                            lock1=LockData.objects.filter(patient=pt1, patient_type__patient_type=ptt1, date__gte=dis1.date_of_discharge)
                            if lock1.filter(date__lt=datetime.datetime.strptime(lock_date, '%Y-%m-%d')):
                                lock2=lock1.filter(date__lt=datetime.datetime.strptime(lock_date, '%Y-%m-%d'))
                                if Package.objects.filter(patient=pt1, date_of_admission__gt=lock2.date):
                                    pkg1=Package.objects.filter(patient=pt1)
                                    if pkg1.count()>1:
                                        print('hello')
                                        for i in pkg1:
                                            print('i.patient type ', i.patient_type.id)
                                            ptt2=i.patient_type.id
                                            if ptt2==int(ptt1):
                                                print('Hello world')
                                                lock=fm_lock.save()
                                                messages.success(request, 'Data saved successfully!')
                                                print('Hiii')
                                                IpdReport.objects.create(patient=lock.patient, package=Package.objects.filter(patient=lock.patient, patient_type=int(ptt1)).order_by('-id').first(), lockdata=lock)
                                    else:
                                        lock=fm_lock.save()
                                        messages.success(request, 'Data saved successfully!')
                                        IpdReport.objects.create(patient=lock.patient, package=Package.objects.filter(patient=lock.patient, patient_type=int(ptt1)).order_by('-id').first(), lockdata=lock)
                                else:
                                    lock=fm_lock.save()
                                    messages.success(request, 'Data saved successfully!')
                                    IpdReport.objects.create(patient=lock.patient, lockdata=lock)
                    else:
                        if Package.objects.filter(patient=pt1):
                            pkg1=Package.objects.filter(patient=pt1)
                            if pkg1.count()>1:
                                print('hello')
                                for i in pkg1:
                                    print('i.patient type ', i.patient_type.id)
                                    ptt2=i.patient_type.id
                                    if ptt2==int(ptt1):
                                        print('Hello world')
                                        lock=fm_lock.save()
                                        messages.success(request, 'Data saved successfully!')
                                        print('Hiii')
                                        IpdReport.objects.create(patient=lock.patient, package=Package.objects.filter(patient=lock.patient, patient_type=int(ptt1)).order_by('-id').first(), lockdata=lock)
                            else:
                                lock=fm_lock.save()
                                messages.success(request, 'Data saved successfully!')
                                IpdReport.objects.create(patient=lock.patient, package=Package.objects.filter(patient=lock.patient, patient_type=int(ptt1)).order_by('-id').first(), lockdata=lock)
                        else:
                            lock=fm_lock.save()
                            messages.success(request, 'Data saved successfully!')
                            IpdReport.objects.create(patient=lock.patient, lockdata=lock)
                    fm_lock=LockDataForm(prefix='lock_form')
                cur_user=request.user
                nav_msg='Data-Lock Form'
                return render(request, 'dhule/lock_data.html', {'form':fm_lock, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_lock=LockDataForm(prefix='lock_form')
                cur_user=request.user
                nav_msg='Data-Lock Form'
                return render(request, 'dhule/lock_data.html', {'form':fm_lock, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def withdrawal_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                fm_wd=WithdrawalForm(request.POST, request.FILES)
                if fm_wd.is_valid():
                    wd=fm_wd.save()
                    messages.success(request, 'Data saved successfully!')
                    PettyCash.objects.create(withdrawal=wd)
                    fm_wd=WithdrawalForm()
                cur_user=request.user
                nav_msg='Withdrawal Form'
                return render(request, 'dhule/wd_data.html', {'form':fm_wd, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                fm_wd=WithdrawalForm()
                cur_user=request.user
                nav_msg='Withdrawal Form'
                return render(request, 'dhule/wd_data.html', {'form':fm_wd, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def withdrawal_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            withdrawal_report=Withdrawal.objects.all().order_by('id')
            myFilter=WithdrawalFilters(request.POST, queryset=withdrawal_report)
            withdrawal_report=myFilter.qs
            paginator=Paginator(withdrawal_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='Withdrawal Report'
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/withdrawal_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_withdrawal_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                # print(request.POST)
                wd=Withdrawal.objects.get(pk=id)
                print(wd.amount)
                form=WithdrawalForm(request.POST, request.FILES, instance=wd)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Withdrawal Report'
                return render(request, 'dhule/update_withdrawal.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                wd=Withdrawal.objects.get(pk=id)
                form=WithdrawalForm(instance=wd)
                cur_user=request.user
                nav_msg='Update Withdrawal Report'
            return render(request, 'dhule/update_withdrawal.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def withdrawal_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                wd=Withdrawal.objects.get(pk=id)
                print('wd ka value: ', wd)
                wd.delete()
            return HttpResponseRedirect('/dhule/withdrawal_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def pettycash_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            cur_user=request.user
            nav_msg='Petty Cash Entries'
            return render(request, 'dhule/petty_cash.html', {'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def pettycash_overview(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            petty_cash_overview=PettyCash.objects.all().order_by('id')
            myFilter=PettyCashFilters(request.POST, queryset=petty_cash_overview)
            petty_cash_overview=myFilter.qs
            total1=petty_cash_overview.aggregate(Sum('piggybank__amount'))
            total2=petty_cash_overview.aggregate(Sum('withdrawal__amount'))
            rp=serializers.serialize('json', petty_cash_overview)
            request.session['petty_cash_overview']=rp
            cur_user=request.user
            nav_msg="Petty Cash Book"
            context={'report': petty_cash_overview, 'total1':total1, 'total2':total2, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/petty_cash_overview_two.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_petty_cash_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Petty Cash '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['petty_cash_overview']
            print()
            pcr=PettyCash.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('piggybank__depositor__depositor', 'piggybank__date', 'piggybank__amount', 'withdrawal__date', 'withdrawal__particulars', 'withdrawal__amount', 'withdrawal__balance', 'withdrawal__voucher_number')
            print(pcr)
            print(len(pcr))
            wb=Workbook()
            ws=wb.active
            ws.title="Petty Cash"
            blank_row=['', '', '', '', '', '', '', '', '', '', '']
            ws.append(blank_row)
            col_heads=['', '', '', '', '', '', '', '', '', '', '']
            ws.append(col_heads)
            ws.merge_cells('A2:C2')
            in_col= ws['A2']
            in_col.value='IN'
            ws.merge_cells('E2:I2')
            out_col= ws['E2']
            out_col.value='OUT'
            headings1=['Depositor', 'Date', 'Amount', '', 'Date', 'Particulars', 'Amount', 'Balance', 'Voucher Number']
            headings=['Depositor', 'Date', 'Amount', 'Date', 'Particulars', 'Amount', 'Balance', 'Voucher Number']
            print(len(headings))
            ws.append(headings1)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            border3=Border(top=top1)
            border4=Border(top=top1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            alignment1=Alignment(horizontal='center', vertical='center')
            in_col.font=Font(bold=True)
            out_col.font=Font(bold=True)
            ws['A3'].font=Font(bold=True)
            ws['B3'].font=Font(bold=True)
            ws['C3'].font=Font(bold=True)
            ws['E3'].font=Font(bold=True)
            ws['F3'].font=Font(bold=True)
            ws['G3'].font=Font(bold=True)
            ws['H3'].font=Font(bold=True)
            ws['I3'].font=Font(bold=True)
            #Now bordering
            in_col.border=border1
            out_col.border=border1
            ws['A3'].border=border1
            ws['B2'].border=border3
            ws['F2'].border=border3
            ws['G2'].border=border3
            ws['H2'].border=border3
            ws['B3'].border=border1
            ws['C2'].border=border4
            ws['I2'].border=border4
            ws['C3'].border=border1
            ws['E3'].border=border1
            ws['F3'].border=border1
            ws['G3'].border=border1
            ws['H3'].border=border1
            ws['I3'].border=border1
            #Coloring
            ws['A3'].fill=fill_pattern
            ws['B3'].fill=fill_pattern
            ws['C3'].fill=fill_pattern
            ws['E3'].fill=fill_pattern
            ws['F3'].fill=fill_pattern
            ws['G3'].fill=fill_pattern
            ws['H3'].fill=fill_pattern
            ws['I3'].fill=fill_pattern
            #alignment
            in_col.alignment=alignment1
            out_col.alignment=alignment1
            ws['A3'].alignment=alignment
            ws['B3'].alignment=alignment
            ws['C3'].alignment=alignment
            ws['E3'].alignment=alignment
            ws['F3'].alignment=alignment
            ws['G3'].alignment=alignment
            ws['H3'].alignment=alignment
            ws['I3'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            pc1=PettyCash.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(pcr)):
                for col in range(len(headings)):
                    print('current value:', pcr[row][col])
                    char=get_column_letter(col+1)
                    if char=='D' or char=='E' or char=='F' or char=='G' or char=='H' or char=='I':
                        char=get_column_letter(col+2)
                        print('char ka value - 1: ', char+str(row+4))
                        ws[char+str(row+4)].value=pcr[row][col]
                        print('kya aaya cell mein - 1: ', ws[char+str(row+4)].value)
                    else:
                        ws[char+str(row+4)].value=pcr[row][col]
                        print('char ka value - 4: ', char+str(row+4))
                        print('kya aaya cell mein - 4: ', ws[char+str(row+4)].value)
                    if char=='B':
                        if pc1[row].piggybank:
                            ws[char+str(row+4)].value=pcr[row][col].strftime("%d/%m/%Y")
                    if char=='E':
                        ws[char+str(row+4)].value=pcr[row][col].strftime("%d/%m/%Y")
                    if char=='F':
                        if pcr[row][col]==None:
                            ws[char+str(row+4)].value='Addition To Balance'
                        else:
                            ws[char+str(row+4)].value=pcr[row][col]
                    if char=='G':
                        if pcr[row][col]==None:
                            ws[char+str(row+4)].value=0
                        else:
                            ws[char+str(row+4)].value=pcr[row][col]
                    if char=='I':
                        if pcr[row][col]==None:
                            ws[char+str(row+4)].value='N/A'
                        else:
                            ws[char+str(row+4)].value=pcr[row][col]
                    ws[char+str(row+4)].border=border2
                    ws[char+str(row+4)].fill=contenido
                    ws[char+str(row+4)].alignment=alignment
            total1=pcr.aggregate(Sum('piggybank__amount'))
            total2=pcr.aggregate(Sum('withdrawal__amount'))
            tots=['Totals', '', total1['piggybank__amount__sum'], '', '', '', total2['withdrawal__amount__sum'], '',]
            ws.append(tots)
            a=list(ws.rows)
            b=len(a)
            for row in range(b-1,b):
                for col in range(len(tots)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+1)].font=Font(bold=True)
                    if char=='A':
                        ws[char+str(row+1)].border=border1
                    elif char=='C':
                        ws[char+str(row+1)].border=border1
                        ws[char+str(row+1)].fill=total_figure
                        ws[char+str(row+1)].alignment=alignment
                    elif char=='G':
                        ws[char+str(row+1)].border=border1
                        ws[char+str(row+1)].fill=total_figure
                        ws[char+str(row+1)].alignment=alignment
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def ipd_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            report=IpdReport.objects.all().order_by('-id')
            myFilter=IpdFilters(request.POST, queryset=report)
            report=myFilter.qs
            total1=report.aggregate(Sum('realization__amount_received'))
            rp=serializers.serialize('json', report)
            request.session['report']=rp
            paginator=Paginator(report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='IPD Track Report'
            context={'page_obj': page_obj, 'total1':total1, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/ipdreport.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_track_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Track Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['report']
            print()
            ipd=IpdReport.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('id', 'patient__name', 'patient__id', 'patient__mr_uid', 'package__diagnosis__diagnosis', 'package__treatment__treatment', 'package__patient_type__patient_type', 'package__date_of_admission', 'package__max_fractions', 'package__total_package', 'approvedpackage__discount', 'approvedpackage__approved_package', 'approvedpackage__proposed_fractions', 'ctscan__rt_number', 'radiations__date', 'radiations__done_fractions', 'radiations__base_value', 'radiations__expected_value', 'discharge__date_of_discharge', 'realization__amount_received', 'realization__billing_month', 'realization__deficit_or_surplus_amount', 'realization__deficit_percentage', 'realization__surplus_percentage', 'realization__cash', 'realization__remarks')
            print(ipd)
            print(ipd[1][1])
            print(len(ipd))
            wb=Workbook()
            ws=wb.active
            ws.title="Track Report"
            headings=['Track ID', 'Name', 'Patient Number', 'MR/UID', 'Diagnosis', 'Treatment', 'Type of Patient', 'Date of Admission', 'Max Fractions', 'Total Package', 'Discount', 'Approved Package', 'Proposed Fractions', 'RT Number', 'Radiotherapy Date', 'Done Fractions', 'Base Value', 'Expected Value', 'Date of Discharge', 'Amount Received', 'Date of Billing', 'Deficit/Surplus (in Rs.)', 'Deficit (%)', 'Surplus (%)', 'Cash/Partial Cash', 'Remarks', 'Status', 'Data Locked On']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            ws['H1'].font=Font(bold=True)
            ws['I1'].font=Font(bold=True)
            ws['J1'].font=Font(bold=True)
            ws['K1'].font=Font(bold=True)
            ws['L1'].font=Font(bold=True)
            ws['M1'].font=Font(bold=True)
            ws['N1'].font=Font(bold=True)
            ws['O1'].font=Font(bold=True)
            ws['P1'].font=Font(bold=True)
            ws['Q1'].font=Font(bold=True)
            ws['R1'].font=Font(bold=True)
            ws['S1'].font=Font(bold=True)
            ws['T1'].font=Font(bold=True)
            ws['U1'].font=Font(bold=True)
            ws['V1'].font=Font(bold=True)
            ws['W1'].font=Font(bold=True)
            ws['X1'].font=Font(bold=True)
            ws['Y1'].font=Font(bold=True)
            ws['Z1'].font=Font(bold=True)
            ws['AA1'].font=Font(bold=True)
            ws['AB1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            ws['H1'].border=border1
            ws['I1'].border=border1
            ws['J1'].border=border1
            ws['K1'].border=border1
            ws['L1'].border=border1
            ws['M1'].border=border1
            ws['N1'].border=border1
            ws['O1'].border=border1
            ws['P1'].border=border1
            ws['Q1'].border=border1
            ws['R1'].border=border1
            ws['S1'].border=border1
            ws['T1'].border=border1
            ws['U1'].border=border1
            ws['V1'].border=border1
            ws['W1'].border=border1
            ws['X1'].border=border1
            ws['Y1'].border=border1
            ws['Z1'].border=border1
            ws['AA1'].border=border1
            ws['AB1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            ws['H1'].fill=fill_pattern
            ws['I1'].fill=fill_pattern
            ws['J1'].fill=fill_pattern
            ws['K1'].fill=fill_pattern
            ws['L1'].fill=fill_pattern
            ws['M1'].fill=fill_pattern
            ws['N1'].fill=fill_pattern
            ws['O1'].fill=fill_pattern
            ws['P1'].fill=fill_pattern
            ws['Q1'].fill=fill_pattern
            ws['R1'].fill=fill_pattern
            ws['S1'].fill=fill_pattern
            ws['T1'].fill=fill_pattern
            ws['U1'].fill=fill_pattern
            ws['V1'].fill=fill_pattern
            ws['W1'].fill=fill_pattern
            ws['X1'].fill=fill_pattern
            ws['Y1'].fill=fill_pattern
            ws['Z1'].fill=fill_pattern
            ws['AA1'].fill=fill_pattern
            ws['AB1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            ws['H1'].alignment=alignment
            ws['I1'].alignment=alignment
            ws['J1'].alignment=alignment
            ws['K1'].alignment=alignment
            ws['L1'].alignment=alignment
            ws['M1'].alignment=alignment
            ws['N1'].alignment=alignment
            ws['O1'].alignment=alignment
            ws['P1'].alignment=alignment
            ws['Q1'].alignment=alignment
            ws['R1'].alignment=alignment
            ws['S1'].alignment=alignment
            ws['T1'].alignment=alignment
            ws['U1'].alignment=alignment
            ws['V1'].alignment=alignment
            ws['W1'].alignment=alignment
            ws['X1'].alignment=alignment
            ws['Y1'].alignment=alignment
            ws['Z1'].alignment=alignment
            ws['AA1'].alignment=alignment
            ws['AB1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=IpdReport.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(ipd)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    if char!='AA' and char!='AB':
                        ws[char+str(row+2)].value=ipd[row][col]
                    elif char=='AA':
                        print()
                        print('AA ke time:', ipd[row])
                        print()
                        print('AA ke time ttl: ', ttl[row].approvedpackage)
                        print()
                        if not ttl[row].approvedpackage:
                            if not ttl[row].lockdata:
                                ws[char+str(row+2)].value="Awaiting Package Approval"
                            else:
                                ws[char+str(row+2)].value="Data Locked"
                        elif not ttl[row].ctscan:
                            ws[char+str(row+2)].value="Awaiting CT Scan"
                            if ttl[row].realization:
                                if ttl[row].realization.cash==True:
                                    if ttl[row].package.patient_type.patient_type!='CASH':
                                        ws[char+str(row+2)].value="Partial Cash"
                                    else:
                                        ws[char+str(row+2)].value="Cash Received"
                        elif not ttl[row].radiations:
                            ws[char+str(row+2)].value="Awaiting First Fraction"
                            if ttl[row].realization:
                                if ttl[row].realization.cash==True:
                                    if ttl[row].package.patient_type.patient_type!='CASH':
                                        ws[char+str(row+2)].value="Partial Cash"
                                    else:
                                        ws[char+str(row+2)].value="Cash Received"
                        elif not ttl[row].discharge:
                            if not ttl[row].realization:
                                ws[char+str(row+2)].value="Ongoing Fractions"
                            elif ttl[row].realization:
                                if ttl[row].realization.cash==True:
                                    if ttl[row].package.patient_type.patient_type!='CASH':
                                        ws[char+str(row+2)].value="Ongoing Fractions/Partial Cash"
                                    else:
                                        ws[char+str(row+2)].value="Ongoing Fractions/Cash Payment"
                        elif ttl[row].realization:
                            if ttl[row].package.patient_type.patient_type!='CASH':
                                if ttl[row].discharge:
                                    if ttl[row].discharge.discharge_updated==True:
                                        if not ttl[row].realization.deficit_or_surplus_amount<0:
                                            ws[char+str(row+2)].value="Claim Received"
                                        else:
                                            ws[char+str(row+2)].value="Repudiated"
                                            if ttl[row].previous.realization:
                                                if ttl[row].previous.realization.cash==False and ttl[row].previous.realization.deficit_or_surplus_amount<0:
                                                    ws[char+str(row+2)].value="Repudiated/Reclaimed Amount Received"
                            else:
                                ws[char+str(row+2)].value="Cash Received"
                        elif not ttl[row].realization:
                            if ttl[row].discharge.discharge_updated==True:
                                if ttl[row].package.patient_type.patient_type=='CASH':
                                    ws[char+str(row+2)].value="Cash Patient Discharged"
                                else:
                                    ws[char+str(row+2)].value="Discharged/Pending Claim"
                            else:
                                if ttl[row].package.patient_type.patient_type=='CASH':
                                    ws[char+str(row+2)].value="Cash Patient Discharged"
                                else:
                                    ws[char+str(row+2)].value="Discharged But Not Claimed"
                    elif char=='AB':
                        if ttl[row].lockdata:
                            if ttl[row].lockdata.lock==True:
                                ws[char+str(row+2)].value=ttl[row].lockdata.date.strftime("%d/%m/%Y")
                                print('date ka type', type(ws[char+str(row+2)].value))
                            else:
                                pass
                        else:
                            pass
                    if char=='B':
                        if ttl[row].patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+ipd[row][col]
                        if ttl[row].patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+ipd[row][col]
                        if ttl[row].patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+ipd[row][col]
                        if ttl[row].patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+ipd[row][col]
                    if char=='H':
                        if ttl[row].package:
                            ws[char+str(row+2)].value=ipd[row][col].strftime("%d/%m/%Y")
                    if char=='R':
                        if ttl[row].approvedpackage:
                            if ttl[row].package:
                                if ttl[row].realization:
                                    if ttl[row].package.patient_type.patient_type!='CASH' and ttl[row].realization.cash==True:
                                        ws[char+str(row+2)].value="N/A"
                            if ttl[row].radiations:
                                if ttl[row].radiations.expected_value<0:
                                    ws[char+str(row+2)].value=ipd[row][col]*-1
                    if char=='O':
                        if ttl[row].radiations:
                            ws[char+str(row+2)].value=ipd[row][col].strftime("%d/%m/%Y")
                    if char=='S':
                        if ttl[row].discharge:
                            ws[char+str(row+2)].value=ipd[row][col].strftime("%d/%m/%Y")
                    if char=='U':
                        if ttl[row].realization:
                            ws[char+str(row+2)].value=ipd[row][col].strftime("%d/%m/%Y")
                    if char=='V':
                        if ttl[row].realization:
                            if ttl[row].package:
                                if ttl[row].package.patient_type.patient_type!='CASH' and ttl[row].realization.cash==True:
                                    ws[char+str(row+2)].value="N/A"
                    if char=='W':
                        if ttl[row].realization:
                            if ttl[row].package:
                                if ttl[row].package.patient_type.patient_type!='CASH' and ttl[row].realization.cash==True:
                                    ws[char+str(row+2)].value="N/A"
                    if char=='X':
                        if ttl[row].realization:
                            if ttl[row].package:
                                if ttl[row].package.patient_type.patient_type!='CASH' and ttl[row].realization.cash==True:
                                    ws[char+str(row+2)].value="N/A"
                    if char=='Y':
                        if ws[char+str(row+2)].value==True:
                            ws[char+str(row+2)].value='Yes'
                        elif ws[char+str(row+2)].value==False:
                            ws[char+str(row+2)].value='No'
                    if char=='Z':
                        if ttl[row].package:
                            if ttl[row].package.remarks:
                                ws[char+str(row+2)].value="{}{}".format('Package: ', ttl[row].package.remarks)
                        if ttl[row].approvedpackage:
                            if ttl[row].approvedpackage.remarks:
                                if ttl[row].package:
                                    if ttl[row].package.remarks:
                                        ws[char+str(row+2)].value="{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                    else:
                                        ws[char+str(row+2)].value="{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)
                        if ttl[row].ctscan:
                            if ttl[row].ctscan.remarks:
                                if ttl[row].approvedpackage:
                                    if ttl[row].approvedpackage.remarks:
                                        if ttl[row].package:
                                            if ttl[row].package.remarks:
                                                ws[char+str(row+2)].value="{}{}".format('CT Scan: ', ttl[row].ctscan.remarks)+"\n"+"{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                            else:
                                                ws[char+str(row+2)].value="{}{}".format('CT Scan: ', ttl[row].ctscan.remarks)
                        if ttl[row].radiations:
                            if ttl[row].radiations.remarks:
                                if ttl[row].ctscan:
                                    if ttl[row].ctscan.remarks:
                                        if ttl[row].approvedpackage:
                                            if ttl[row].approvedpackage.remarks:
                                                if ttl[row].package:
                                                    if ttl[row].package.remarks:
                                                        ws[char+str(row+2)].value="{}{}".format('Radiations: ', ttl[row].radiations.remarks)+"\n"+"{}{}".format('CT Scan: ', ttl[row].ctscan.remarks)+"\n"+"{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                                    else:
                                                        ws[char+str(row+2)].value="{}{}".format('Radiations: ', ttl[row].radiations.remarks)
                        if ttl[row].discharge:
                            if ttl[row].discharge.remarks:
                                if ttl[row].radiations:
                                    if ttl[row].radiations.remarks:
                                        if ttl[row].ctscan:
                                            if ttl[row].ctscan.remarks:
                                                if ttl[row].approvedpackage:
                                                    if ttl[row].approvedpackage.remarks:
                                                        if ttl[row].package:
                                                            if ttl[row].package.remarks:
                                                                ws[char+str(row+2)].value="{}{}".format('Discharge: ', ttl[row].discharge.remarks)+"\n"+"{}{}".format('Radiations: ', ttl[row].radiations.remarks)+"\n"+"{}{}".format('CT Scan: ', ttl[row].ctscan.remarks)+"\n"+"{}{}".format('Approved Package: ', ttl[row].approved_package.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                                            else:
                                                                ws[char+str(row+2)].value="{}{}".format('Discharge: ', ttl[row].discharge.remarks)
                        if ttl[row].realization:
                            if ttl[row].realization.remarks:
                                if ttl[row].discharge:
                                    if ttl[row].discharge.remarks:
                                        if ttl[row].radiations:
                                            if ttl[row].radiations.remarks:
                                                if ttl[row].ctscan:
                                                    if ttl[row].ctscan.remarks:
                                                        if ttl[row].approvedpackage:
                                                            if ttl[row].approvedpackage.remarks:
                                                                if ttl[row].package:
                                                                    if ttl[row].package.remarks:
                                                                        ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)+"\n"+"{}{}".format('Discharge: ', ttl[row].discharge.remarks)+"\n"+"{}{}".format('Radiations: ', ttl[row].radiations.remarks)+"\n"+"{}{}".format('CT Scan: ', ttl[row].ctscan.remarks)+"\n"+"{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                                                    else:
                                                                        ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)
                                else:
                                    if ttl[row].radiations:
                                        if ttl[row].radiations.remarks:
                                            if ttl[row].ctscan:
                                                if ttl[row].ctscan.remarks:
                                                    if ttl[row].approvedpackage:
                                                        if ttl[row].approvedpackage.remarks:
                                                            if ttl[row].package:
                                                                if ttl[row].package.remarks:
                                                                    ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)+"\n"+"{}{}".format('Radiations: ', ttl[row].radiations.remarks)+"\n"+"{}{}".format('CT Scan: ', ttl[row].ctscan.remarks)+"\n"+"{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                                                else:
                                                                    ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)
                                    else:
                                        if ttl[row].ctscan:
                                            if ttl[row].ctscan.remarks:
                                                if ttl[row].approvedpackage:
                                                    if ttl[row].approvedpackage.remarks:
                                                        if ttl[row].package:
                                                            if ttl[row].package.remarks:
                                                                ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)+"\n"+"{}{}".format('CT Scan: ', ttl[row].ctscan.remarks)+"\n"+"{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                                            else:
                                                                ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)
                                                else:
                                                    if ttl[row].approvedpackage:
                                                        if ttl[row].approvedpackage.remarks:
                                                            if ttl[row].package:
                                                                if ttl[row].package.remarks:
                                                                    ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)+"\n"+"{}{}".format('Approved Package: ', ttl[row].approvedpackage.remarks)+"\n"+"{}{}".format('Package: ', ttl[row].package.remarks)
                                                                else:
                                                                    ws[char+str(row+2)].value="{}{}".format('Realization: ', ttl[row].realization.remarks)
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['A'+str(row+2)]="{}{:d}".format('OOPL/D/', ipd[row][0])
                    ws['C'+str(row+2)]="{}{:d}".format('PN/D/', ipd[row][2])
            total1=ipd.aggregate(Sum('realization__amount_received'))
            tots=['Totals', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', total1['realization__amount_received__sum'], '', '', '', '', '', '', '', '']
            ws.append(tots)
            a=list(ws.rows)
            b=len(a)
            for row in range(b-1,b):
                for col in range(len(tots)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+1)].font=Font(bold=True)
                    if char=='A':
                        ws[char+str(row+1)].border=border1
                    elif char=='T':
                        ws[char+str(row+1)].border=border1
                        ws[char+str(row+1)].fill=total_figure
                        ws[char+str(row+1)].alignment=alignment
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def opd_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            opd_report=OpdReport.objects.all().order_by('id')
            myFilter=OpdFilters(request.POST, queryset=opd_report)
            opd_report=myFilter.qs
            total=opd_report.aggregate(Sum('opd__amount'))
            rp=serializers.serialize('json', opd_report)
            request.session['opd_report']=rp
            paginator=Paginator(opd_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='OPD Report'
            context={'page_obj': page_obj, 'total':total, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/opdreport.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_opd_track_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=OPD Track Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['opd_report']
            opd=OpdReport.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('id', 'patient__id', 'opd__bill_number', 'opd__date', 'patient__name', 'opd__service_name', 'opd__amount', 'opd__remarks')
            print(opd)
            print(len(opd))
            wb=Workbook()
            ws=wb.active
            ws.title="OPD Track Report"
            headings=['Track ID', 'Patient Number', 'Bill Number', 'Date', 'Name', 'Service Name', 'Amount', 'Remarks']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            ws['H1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            ws['H1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            ws['H1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            ws['H1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=OpdReport.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(opd)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=opd[row][col]
                    if char=='E':
                        if ttl[row].patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+opd[row][col]
                        if ttl[row].patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+opd[row][col]
                        if ttl[row].patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+opd[row][col]
                        if ttl[row].patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+opd[row][col]
                    if char=='D':
                        ws[char+str(row+2)].value=opd[row][col].strftime("%d/%m/%Y")
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['A'+str(row+2)]="{}{:d}".format('OPD/', opd[row][0])
                    ws['B'+str(row+2)]="{}{:d}".format('PN/D/', opd[row][2])
            total=opd.aggregate(Sum('opd__amount'))
            tots=['Totals:', '', '', '', '', '', total['opd__amount__sum'], '']
            ws.append(tots)
            a=list(ws.rows)
            b=len(a)
            for row in range(b-1,b):
                for col in range(len(tots)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+1)].font=Font(bold=True)
                    if char=='A':
                        ws[char+str(row+1)].border=border1
                    elif char=='G':
                        ws[char+str(row+1)].border=border1
                        ws[char+str(row+1)].fill=total_figure
                        ws[char+str(row+1)].alignment=alignment
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def ongoing_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            ongoing_report=OngoingReport.objects.all().order_by('id')
            myFilter=OngoingFilters(request.POST, queryset=ongoing_report)
            ongoing_report=myFilter.qs
            total=ongoing_report.aggregate(Sum('ipdreport__realization__amount_received'))
            rp=serializers.serialize('json', ongoing_report)
            request.session['ongoing_report']=rp
            paginator=Paginator(ongoing_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg="Ongoing Patients' Report"
            context={'page_obj': page_obj, 'total':total, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/ongoingreport.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_ongoing_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Ongoing Patients Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['ongoing_report']
            ong=OngoingReport.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('ipdreport__id', 'ipdreport__patient__name', 'ipdreport__patient__id', 'ipdreport__patient__mr_uid', 'ipdreport__package__diagnosis__diagnosis', 'ipdreport__package__treatment__treatment', 'ipdreport__package__patient_type__patient_type', 'ipdreport__package__date_of_admission', 'ipdreport__package__max_fractions', 'ipdreport__package__total_package', 'ipdreport__approvedpackage__discount', 'ipdreport__approvedpackage__approved_package', 'ipdreport__approvedpackage__proposed_fractions', 'ipdreport__ctscan__rt_number', 'ipdreport__radiations__date', 'ipdreport__radiations__done_fractions', 'ipdreport__radiations__base_value', 'ipdreport__radiations__expected_value', 'ipdreport__realization__amount_received', 'ipdreport__realization__billing_month', 'ipdreport__realization__deficit_or_surplus_amount', 'ipdreport__realization__deficit_percentage', 'ipdreport__realization__surplus_percentage','ipdreport__realization__cash')
            print(ong)
            print(len(ong))
            wb=Workbook()
            ws=wb.active
            ws.title="Ongoing Patients' Report"
            headings=['Track ID', 'Name', 'Patient Number', 'MR/UID', 'Diagnosis', 'Treatment', 'Type of Patient', 'Date of Admission', 'Max Fractions', 'Total Package', 'Discount', 'Approved Package', 'Proposed Fractions', 'RT Number', 'Radiotherapy Date', 'Done Fractions', 'Base Value', 'Expected Value', 'Amount Received', 'Date of Billing', 'Deficit/Surplus (in Rs.)', 'Deficit (%)', 'Surplus (%)', 'Cash/Partial Cash']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            ws['H1'].font=Font(bold=True)
            ws['I1'].font=Font(bold=True)
            ws['J1'].font=Font(bold=True)
            ws['K1'].font=Font(bold=True)
            ws['L1'].font=Font(bold=True)
            ws['M1'].font=Font(bold=True)
            ws['N1'].font=Font(bold=True)
            ws['O1'].font=Font(bold=True)
            ws['P1'].font=Font(bold=True)
            ws['Q1'].font=Font(bold=True)
            ws['R1'].font=Font(bold=True)
            ws['S1'].font=Font(bold=True)
            ws['T1'].font=Font(bold=True)
            ws['U1'].font=Font(bold=True)
            ws['V1'].font=Font(bold=True)
            ws['W1'].font=Font(bold=True)
            ws['X1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            ws['H1'].border=border1
            ws['I1'].border=border1
            ws['J1'].border=border1
            ws['K1'].border=border1
            ws['L1'].border=border1
            ws['M1'].border=border1
            ws['N1'].border=border1
            ws['O1'].border=border1
            ws['P1'].border=border1
            ws['Q1'].border=border1
            ws['R1'].border=border1
            ws['S1'].border=border1
            ws['T1'].border=border1
            ws['U1'].border=border1
            ws['V1'].border=border1
            ws['W1'].border=border1
            ws['X1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            ws['H1'].fill=fill_pattern
            ws['I1'].fill=fill_pattern
            ws['J1'].fill=fill_pattern
            ws['K1'].fill=fill_pattern
            ws['L1'].fill=fill_pattern
            ws['M1'].fill=fill_pattern
            ws['N1'].fill=fill_pattern
            ws['O1'].fill=fill_pattern
            ws['P1'].fill=fill_pattern
            ws['Q1'].fill=fill_pattern
            ws['R1'].fill=fill_pattern
            ws['S1'].fill=fill_pattern
            ws['T1'].fill=fill_pattern
            ws['U1'].fill=fill_pattern
            ws['V1'].fill=fill_pattern
            ws['W1'].fill=fill_pattern
            ws['X1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            ws['H1'].alignment=alignment
            ws['I1'].alignment=alignment
            ws['J1'].alignment=alignment
            ws['K1'].alignment=alignment
            ws['L1'].alignment=alignment
            ws['M1'].alignment=alignment
            ws['N1'].alignment=alignment
            ws['O1'].alignment=alignment
            ws['P1'].alignment=alignment
            ws['Q1'].alignment=alignment
            ws['R1'].alignment=alignment
            ws['S1'].alignment=alignment
            ws['T1'].alignment=alignment
            ws['U1'].alignment=alignment
            ws['V1'].alignment=alignment
            ws['W1'].alignment=alignment
            ws['X1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=OngoingReport.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(ong)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=ong[row][col]
                    if char=='B':
                        if ttl[row].ipdreport.patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+ong[row][col]
                        if ttl[row].ipdreport.patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+ong[row][col]
                        if ttl[row].ipdreport.patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+ong[row][col]
                        if ttl[row].ipdreport.patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+ong[row][col]
                    if char=='H':
                            ws[char+str(row+2)].value=ong[row][col].strftime("%d/%m/%Y")
                    if char=='T':
                        if ttl[row].ipdreport.realization:
                            ws[char+str(row+2)].value=ong[row][col].strftime("%d/%m/%Y")
                    if char=='X':
                        if ws[char+str(row+2)].value==True:
                            ws[char+str(row+2)].value='Yes'
                        elif ws[char+str(row+2)].value==False:
                            ws[char+str(row+2)].value='No'
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['A'+str(row+2)]="{}{:d}".format('OOPL/D/', ong[row][0])
                    ws['C'+str(row+2)]="{}{:d}".format('PN/D/', ong[row][2])
            total1=ong.aggregate(Sum('ipdreport__realization__amount_received'))
            tots=['Totals', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', total1['ipdreport__realization__amount_received__sum'], '', '', '', '', '']
            ws.append(tots)
            a=list(ws.rows)
            b=len(a)
            for row in range(b-1,b):
                for col in range(len(tots)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+1)].font=Font(bold=True)
                    if char=='A':
                        ws[char+str(row+1)].border=border1
                    elif char=='S':
                        ws[char+str(row+1)].border=border1
                        ws[char+str(row+1)].fill=total_figure
                        ws[char+str(row+1)].alignment=alignment
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def unclaimed_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            unclaimed_report=UnclaimedPendingCases.objects.all().order_by('id')
            myFilter=UnclaimedFilters(request.POST, queryset=unclaimed_report)
            unclaimed_report=myFilter.qs
            rp=serializers.serialize('json', unclaimed_report)
            request.session['unclaimed_report']=rp
            paginator=Paginator(unclaimed_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg="Unclaimed Discharges' Track Report"
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/unclaimed.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_unclaimed_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Unclaimed Discharges Track Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['unclaimed_report']
            ucl=UnclaimedPendingCases.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('ipdreport__id', 'ipdreport__patient__name', 'ipdreport__patient__id', 'ipdreport__patient__mr_uid', 'ipdreport__package__diagnosis__diagnosis', 'ipdreport__package__treatment__treatment', 'ipdreport__package__patient_type__patient_type', 'ipdreport__package__date_of_admission', 'ipdreport__package__max_fractions', 'ipdreport__package__total_package', 'ipdreport__approvedpackage__discount', 'ipdreport__approvedpackage__approved_package', 'ipdreport__approvedpackage__proposed_fractions', 'ipdreport__ctscan__rt_number', 'ipdreport__radiations__date', 'ipdreport__radiations__done_fractions', 'ipdreport__radiations__base_value', 'ipdreport__radiations__expected_value', 'ipdreport__discharge__date_of_discharge')
            print(ucl)
            print(len(ucl))
            wb=Workbook()
            ws=wb.active
            ws.title="Unclaimed Discharges Report"
            headings=['Track ID', 'Name', 'Patient Number', 'MR/UID', 'Diagnosis', 'Treatment', 'Type of Patient', 'Date of Admission', 'Max Fractions', 'Total Package', 'Discount', 'Approved Package', 'Proposed Fractions', 'RT Number', 'Radiotherapy Date', 'Done Fractions', 'Base Value', 'Expected Value', 'Date Of Discharge']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            ws['H1'].font=Font(bold=True)
            ws['I1'].font=Font(bold=True)
            ws['J1'].font=Font(bold=True)
            ws['K1'].font=Font(bold=True)
            ws['L1'].font=Font(bold=True)
            ws['M1'].font=Font(bold=True)
            ws['N1'].font=Font(bold=True)
            ws['O1'].font=Font(bold=True)
            ws['P1'].font=Font(bold=True)
            ws['Q1'].font=Font(bold=True)
            ws['R1'].font=Font(bold=True)
            ws['S1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            ws['H1'].border=border1
            ws['I1'].border=border1
            ws['J1'].border=border1
            ws['K1'].border=border1
            ws['L1'].border=border1
            ws['M1'].border=border1
            ws['N1'].border=border1
            ws['O1'].border=border1
            ws['P1'].border=border1
            ws['Q1'].border=border1
            ws['R1'].border=border1
            ws['S1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            ws['H1'].fill=fill_pattern
            ws['I1'].fill=fill_pattern
            ws['J1'].fill=fill_pattern
            ws['K1'].fill=fill_pattern
            ws['L1'].fill=fill_pattern
            ws['M1'].fill=fill_pattern
            ws['N1'].fill=fill_pattern
            ws['O1'].fill=fill_pattern
            ws['P1'].fill=fill_pattern
            ws['Q1'].fill=fill_pattern
            ws['R1'].fill=fill_pattern
            ws['S1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            ws['H1'].alignment=alignment
            ws['I1'].alignment=alignment
            ws['J1'].alignment=alignment
            ws['K1'].alignment=alignment
            ws['L1'].alignment=alignment
            ws['M1'].alignment=alignment
            ws['N1'].alignment=alignment
            ws['O1'].alignment=alignment
            ws['P1'].alignment=alignment
            ws['Q1'].alignment=alignment
            ws['R1'].alignment=alignment
            ws['S1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=UnclaimedPendingCases.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(ucl)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=ucl[row][col]
                    if char=='B':
                        if ttl[row].ipdreport.patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+ucl[row][col]
                        if ttl[row].ipdreport.patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+ucl[row][col]
                        if ttl[row].ipdreport.patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+ucl[row][col]
                        if ttl[row].ipdreport.patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+ucl[row][col]
                    if char=='H':
                        ws[char+str(row+2)].value=ucl[row][col].strftime("%d/%m/%Y")
                    if char=='S':
                        ws[char+str(row+2)].value=ucl[row][col].strftime("%d/%m/%Y")
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['A'+str(row+2)]="{}{:d}".format('OOPL/D/', ucl[row][0])
                    ws['C'+str(row+2)]="{}{:d}".format('PN/D/', ucl[row][2])
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def claimed_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            claimed_report=ClaimedPendingCases.objects.all().order_by('id')
            myFilter=ClaimedFilters(request.POST, queryset=claimed_report)
            claimed_report=myFilter.qs
            rp=serializers.serialize('json', claimed_report)
            request.session['claimed_report']=rp
            paginator=Paginator(claimed_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg="Claimed Discharges' Track Report"
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/claimed.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_claimed_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Claimed Discharges Track Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['claimed_report']
            cld=ClaimedPendingCases.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('ipdreport__id', 'ipdreport__patient__name', 'ipdreport__patient__id', 'ipdreport__patient__mr_uid', 'ipdreport__package__diagnosis__diagnosis', 'ipdreport__package__treatment__treatment', 'ipdreport__package__patient_type__patient_type', 'ipdreport__package__date_of_admission', 'ipdreport__package__max_fractions', 'ipdreport__package__total_package', 'ipdreport__approvedpackage__discount', 'ipdreport__approvedpackage__approved_package', 'ipdreport__approvedpackage__proposed_fractions', 'ipdreport__ctscan__rt_number', 'ipdreport__radiations__date', 'ipdreport__radiations__done_fractions', 'ipdreport__radiations__base_value', 'ipdreport__radiations__expected_value', 'ipdreport__discharge__date_of_discharge')
            print(cld)
            print(len(cld))
            wb=Workbook()
            ws=wb.active
            ws.title="Claimed Discharges Report"
            headings=['Track ID', 'Name', 'Patient Number', 'MR/UID', 'Diagnosis', 'Treatment', 'Type of Patient', 'Date of Admission', 'Max Fractions', 'Total Package', 'Discount', 'Approved Package', 'Proposed Fractions', 'RT Number', 'Radiotherapy Date', 'Done Fractions', 'Base Value', 'Expected Value', 'Date Of Discharge']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            ws['H1'].font=Font(bold=True)
            ws['I1'].font=Font(bold=True)
            ws['J1'].font=Font(bold=True)
            ws['K1'].font=Font(bold=True)
            ws['L1'].font=Font(bold=True)
            ws['M1'].font=Font(bold=True)
            ws['N1'].font=Font(bold=True)
            ws['O1'].font=Font(bold=True)
            ws['P1'].font=Font(bold=True)
            ws['Q1'].font=Font(bold=True)
            ws['R1'].font=Font(bold=True)
            ws['S1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            ws['H1'].border=border1
            ws['I1'].border=border1
            ws['J1'].border=border1
            ws['K1'].border=border1
            ws['L1'].border=border1
            ws['M1'].border=border1
            ws['N1'].border=border1
            ws['O1'].border=border1
            ws['P1'].border=border1
            ws['Q1'].border=border1
            ws['R1'].border=border1
            ws['S1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            ws['H1'].fill=fill_pattern
            ws['I1'].fill=fill_pattern
            ws['J1'].fill=fill_pattern
            ws['K1'].fill=fill_pattern
            ws['L1'].fill=fill_pattern
            ws['M1'].fill=fill_pattern
            ws['N1'].fill=fill_pattern
            ws['O1'].fill=fill_pattern
            ws['P1'].fill=fill_pattern
            ws['Q1'].fill=fill_pattern
            ws['R1'].fill=fill_pattern
            ws['S1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            ws['H1'].alignment=alignment
            ws['I1'].alignment=alignment
            ws['J1'].alignment=alignment
            ws['K1'].alignment=alignment
            ws['L1'].alignment=alignment
            ws['M1'].alignment=alignment
            ws['N1'].alignment=alignment
            ws['O1'].alignment=alignment
            ws['P1'].alignment=alignment
            ws['Q1'].alignment=alignment
            ws['R1'].alignment=alignment
            ws['S1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=ClaimedPendingCases.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(cld)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=cld[row][col]
                    if char=='B':
                        if ttl[row].ipdreport.patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+cld[row][col]
                        if ttl[row].ipdreport.patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+cld[row][col]
                        if ttl[row].ipdreport.patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+cld[row][col]
                        if ttl[row].ipdreport.patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+cld[row][col]
                    if char=='H':
                        ws[char+str(row+2)].value=cld[row][col].strftime("%d/%m/%Y")
                    if char=='S':
                        ws[char+str(row+2)].value=cld[row][col].strftime("%d/%m/%Y")
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['A'+str(row+2)]="{}{:d}".format('OOPL/D/', cld[row][0])
                    ws['C'+str(row+2)]="{}{:d}".format('PN/D/', cld[row][2])
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def patient_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            patient_report=Patient.objects.all().order_by('id')
            myFilter=PatientFilters(request.POST, queryset=patient_report)
            patient_report=myFilter.qs
            paginator=Paginator(patient_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='List of Patients'
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/patient_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def package_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            package_report=Package.objects.all().order_by('id')
            myFilter=PackageFilters(request.POST, queryset=package_report)
            package_report=myFilter.qs
            paginator=Paginator(package_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg="Patients' Packages"
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/package_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def approved_package_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            approved_package_report=ApprovedPackage.objects.all().order_by('id')
            myFilter=ApprovedPackageFilters(request.POST, queryset=approved_package_report)
            approved_package_report=myFilter.qs
            paginator=Paginator(approved_package_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg="Approved Packages"
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/approved_package_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def discharge_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            discharge_report=Discharge.objects.order_by('id').order_by('id')
            myFilter=DischargeFilters(request.POST, queryset=discharge_report)
            discharge_report=myFilter.qs
            paginator=Paginator(discharge_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='Discharge Reports'
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/discharge_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def realization_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            realization_report=Realization.objects.all().order_by('id')
            myFilter=RealizationFilters(request.POST, queryset=realization_report)
            realization_report=myFilter.qs
            paginator=Paginator(realization_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='Receipts'
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/realization_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def lock_data_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            lock_data_report=LockData.objects.all().order_by('id')
            myFilter=LockDataFilters(request.POST, queryset=lock_data_report)
            lock_data_report=myFilter.qs
            paginator=Paginator(lock_data_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='Locked Data'
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/lock_data_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def other_income_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            other_income_report=OtherIncome.objects.all().order_by('id')
            myFilter=OtherIncomeFilters(request.POST, queryset=other_income_report)
            other_income_report=myFilter.qs
            total=other_income_report.aggregate(Sum('amount'))
            rp=serializers.serialize('json', other_income_report)
            request.session['other_income_report']=rp
            cur_user=request.user
            nav_msg="Other Income Report"
            context={'report': other_income_report, 'total':total, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/other_income_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def additional_income_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            additional_income_report=AdditionalIncome.objects.all().order_by('id')
            myFilter=AdditionalIncomeFilters(request.POST, queryset=additional_income_report)
            additional_income_report=myFilter.qs
            total=additional_income_report.aggregate(Sum('amount'))
            rp=serializers.serialize('json', additional_income_report)
            request.session['additional_income_report']=rp
            cur_user=request.user
            nav_msg="Additional Income Report"
            context={'report': additional_income_report, 'total':total, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/additional_income_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def other_expenses_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            other_expenses_report=OtherExpenses.objects.all().order_by('id')
            myFilter=OtherExpensesFilters(request.POST, queryset=other_expenses_report)
            other_expenses_report=myFilter.qs
            total=other_expenses_report.aggregate(Sum('amount'))
            rp=serializers.serialize('json', other_expenses_report)
            request.session['other_expenses_report']=rp
            cur_user=request.user
            nav_msg="Other Expenses Report"
            context={'report': other_expenses_report, 'total':total, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/other_expenses_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def common_expenses_report_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            common_expenses_report=CommonExpenses.objects.all().order_by('id')
            myFilter=CommonExpensesFilters(request.POST, queryset=common_expenses_report)
            common_expenses_report=myFilter.qs
            total=common_expenses_report.aggregate(Sum('amount'))
            rp=serializers.serialize('json', common_expenses_report)
            request.session['common_expenses_report']=rp
            paginator=Paginator(common_expenses_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg="Common Expense Report"
            context={'page_obj': page_obj, 'total':total, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/common_expenses_report.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_common_expenses_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Common Expenses Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['common_expenses_report']
            print()
            com=CommonExpenses.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('particulars', 'date', 'paid_by', 'amount', 'common_expenses_date')
            print(com)
            print(len(com))
            wb=Workbook()
            ws=wb.active
            ws.title="Common Expenses Report"
            headings=['Particulars', 'Date', 'Paid By', 'Amount', 'Created On']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=CommonExpenses.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(com)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=com[row][col]
                    if char=='B':
                        ws[char+str(row+2)].value=com[row][col].strftime("%d/%m/%Y")
                    if char=='C':
                        if ttl[row].paid_by=='k':
                            ws[char+str(row+2)].value='KCC'
                        elif ttl[row].paid_by=='o':
                            ws[char+str(row+2)].value='OOPL'
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
            total=com.aggregate(Sum('amount'))
            tots=['Totals', '', '', total['amount__sum'], '']
            ws.append(tots)
            a=list(ws.rows)
            b=len(a)
            for row in range(b-1,b):
                for col in range(len(tots)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+1)].font=Font(bold=True)
                    if char=='A':
                        ws[char+str(row+1)].border=border1
                    elif char=='D':
                        ws[char+str(row+1)].border=border1
                        ws[char+str(row+1)].fill=total_figure
                        ws[char+str(row+1)].alignment=alignment
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def repudiated_claim_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            repudiated_report=RepudiatedClaims.objects.all().order_by('id')
            myFilter=RepudiatedFilters(request.POST, queryset=repudiated_report)
            repudiated_report=myFilter.qs
            rp=serializers.serialize('json', repudiated_report)
            request.session['repudiated_report']=rp
            paginator=Paginator(repudiated_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg="Repudiated Claims' Track Report"
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/repudiatedclaims.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_repudiated_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Repudiated Claims Track Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['repudiated_report']
            rep=RepudiatedClaims.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('ipdreport__id', 'ipdreport__patient__name', 'ipdreport__patient__id', 'ipdreport__patient__mr_uid', 'ipdreport__package__diagnosis__diagnosis', 'ipdreport__package__treatment__treatment', 'ipdreport__package__patient_type__patient_type', 'ipdreport__package__date_of_admission', 'ipdreport__package__max_fractions', 'ipdreport__package__total_package', 'ipdreport__approvedpackage__discount', 'ipdreport__approvedpackage__approved_package', 'ipdreport__approvedpackage__proposed_fractions', 'ipdreport__ctscan__rt_number', 'ipdreport__radiations__date', 'ipdreport__radiations__done_fractions', 'ipdreport__radiations__base_value', 'ipdreport__radiations__expected_value', 'ipdreport__discharge__date_of_discharge', 'ipdreport__realization__amount_received', 'ipdreport__realization__billing_month', 'ipdreport__realization__deficit_or_surplus_amount', 'ipdreport__realization__deficit_percentage', 'ipdreport__realization__surplus_percentage','ipdreport__realization__cash')
            print(rep)
            print(len(rep))
            wb=Workbook()
            ws=wb.active
            ws.title="Track Report"
            headings=['Track ID', 'Name', 'Patient Number', 'MR/UID', 'Diagnosis', 'Treatment', 'Type of Patient', 'Date of Admission', 'Max Fractions', 'Total Package', 'Discount', 'Approved Package', 'Proposed Fractions', 'RT Number', 'Radiotherapy Date', 'Done Fractions', 'Base Value', 'Expected Value', 'Date of Discharge', 'Amount Received', 'Date of Billing', 'Deficit/Surplus (in Rs.)', 'Deficit (%)', 'Surplus (%)', 'Cash/Partial Cash']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            ws['H1'].font=Font(bold=True)
            ws['I1'].font=Font(bold=True)
            ws['J1'].font=Font(bold=True)
            ws['K1'].font=Font(bold=True)
            ws['L1'].font=Font(bold=True)
            ws['M1'].font=Font(bold=True)
            ws['N1'].font=Font(bold=True)
            ws['O1'].font=Font(bold=True)
            ws['P1'].font=Font(bold=True)
            ws['Q1'].font=Font(bold=True)
            ws['R1'].font=Font(bold=True)
            ws['S1'].font=Font(bold=True)
            ws['T1'].font=Font(bold=True)
            ws['U1'].font=Font(bold=True)
            ws['V1'].font=Font(bold=True)
            ws['W1'].font=Font(bold=True)
            ws['X1'].font=Font(bold=True)
            ws['Y1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            ws['H1'].border=border1
            ws['I1'].border=border1
            ws['J1'].border=border1
            ws['K1'].border=border1
            ws['L1'].border=border1
            ws['M1'].border=border1
            ws['N1'].border=border1
            ws['O1'].border=border1
            ws['P1'].border=border1
            ws['Q1'].border=border1
            ws['R1'].border=border1
            ws['S1'].border=border1
            ws['T1'].border=border1
            ws['U1'].border=border1
            ws['V1'].border=border1
            ws['W1'].border=border1
            ws['X1'].border=border1
            ws['Y1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            ws['H1'].fill=fill_pattern
            ws['I1'].fill=fill_pattern
            ws['J1'].fill=fill_pattern
            ws['K1'].fill=fill_pattern
            ws['L1'].fill=fill_pattern
            ws['M1'].fill=fill_pattern
            ws['N1'].fill=fill_pattern
            ws['O1'].fill=fill_pattern
            ws['P1'].fill=fill_pattern
            ws['Q1'].fill=fill_pattern
            ws['R1'].fill=fill_pattern
            ws['S1'].fill=fill_pattern
            ws['T1'].fill=fill_pattern
            ws['U1'].fill=fill_pattern
            ws['V1'].fill=fill_pattern
            ws['W1'].fill=fill_pattern
            ws['X1'].fill=fill_pattern
            ws['Y1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            ws['H1'].alignment=alignment
            ws['I1'].alignment=alignment
            ws['J1'].alignment=alignment
            ws['K1'].alignment=alignment
            ws['L1'].alignment=alignment
            ws['M1'].alignment=alignment
            ws['N1'].alignment=alignment
            ws['O1'].alignment=alignment
            ws['P1'].alignment=alignment
            ws['Q1'].alignment=alignment
            ws['R1'].alignment=alignment
            ws['S1'].alignment=alignment
            ws['T1'].alignment=alignment
            ws['U1'].alignment=alignment
            ws['V1'].alignment=alignment
            ws['W1'].alignment=alignment
            ws['X1'].alignment=alignment
            ws['Y1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=RepudiatedClaims.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(rep)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=rep[row][col]
                    if char=='B':
                        if ttl[row].ipdreport.patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+rep[row][col]
                        if ttl[row].ipdreport.patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+rep[row][col]
                        if ttl[row].ipdreport.patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+rep[row][col]
                        if ttl[row].ipdreport.patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+rep[row][col]
                    if char=='H':
                        ws[char+str(row+2)].value=rep[row][col].strftime("%d/%m/%Y")
                    if char=='S':
                        ws[char+str(row+2)].value=rep[row][col].strftime("%d/%m/%Y")
                    if char=='U':
                        ws[char+str(row+2)].value=rep[row][col].strftime("%d/%m/%Y")
                    if char=='Y':
                        if ws[char+str(row+2)].value==True:
                            ws[char+str(row+2)].value='Yes'
                        elif ws[char+str(row+2)].value==False:
                            ws[char+str(row+2)].value='No'
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['A'+str(row+2)]="{}{:d}".format('OOPL/D/', rep[row][0])
                    ws['C'+str(row+2)]="{}{:d}".format('PN/D/', rep[row][2])
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def reclaimed_repudiation_view(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            reclaimed_report=ReclaimedRepudiation.objects.all().order_by('id')
            myFilter=ReclaimedRepudiationFilters(request.POST, queryset=reclaimed_report)
            reclaimed_report=myFilter.qs
            rp=serializers.serialize('json', reclaimed_report)
            request.session['reclaimed_report']=rp
            paginator=Paginator(reclaimed_report, 15)
            print('paginator: ', paginator)
            page_number=request.GET.get('page')
            print('page_number:', page_number)
            page_obj=paginator.get_page(page_number)
            print('page_obj:', page_obj)
            cur_user=request.user
            nav_msg='Reclaimed Cases'
            context={'page_obj': page_obj, 'myFilter':myFilter, 'cur_user':cur_user, 'nav_msg':nav_msg}
            return render(request, 'dhule/reclaimed_repudiation.html', context)
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def export_reclaimed_repudiation_report(request):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            response=HttpResponse(content_type='application/ms-excel')
            print(response)
            response['Content-Disposition']='attachment; filename=Reclaimed Track Report '+str(datetime.datetime.now())+'.xlsx'
            rp=request.session['reclaimed_report']
            print('rp', rp)
            rep=ReclaimedRepudiation.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id').values_list('ipdreport__id', 'ipdreport__patient__name', 'ipdreport__patient__id', 'ipdreport__patient__mr_uid', 'ipdreport__package__diagnosis__diagnosis', 'ipdreport__package__treatment__treatment', 'ipdreport__package__patient_type__patient_type', 'ipdreport__package__date_of_admission', 'ipdreport__package__max_fractions', 'ipdreport__package__total_package', 'ipdreport__approvedpackage__discount', 'ipdreport__approvedpackage__approved_package', 'ipdreport__approvedpackage__proposed_fractions', 'ipdreport__ctscan__rt_number', 'ipdreport__radiations__date', 'ipdreport__radiations__done_fractions', 'ipdreport__radiations__base_value', 'ipdreport__radiations__expected_value', 'ipdreport__discharge__date_of_discharge', 'ipdreport__realization__amount_received', 'ipdreport__realization__billing_month', 'ipdreport__realization__deficit_or_surplus_amount', 'ipdreport__realization__deficit_percentage', 'ipdreport__realization__surplus_percentage','ipdreport__realization__cash')
            print('reclaimed', rep)
            print(len(rep))
            wb=Workbook()
            ws=wb.active
            ws.title="Track Report"
            headings=['Track ID', 'Name', 'Patient Number', 'MR/UID', 'Diagnosis', 'Treatment', 'Type of Patient', 'Date of Admission', 'Max Fractions', 'Total Package', 'Discount', 'Approved Package', 'Proposed Fractions', 'RT Number', 'Radiotherapy Date', 'Done Fractions', 'Base Value', 'Expected Value', 'Date of Discharge', 'Amount Received', 'Date of Billing', 'Deficit/Surplus (in Rs.)', 'Deficit (%)', 'Surplus (%)', 'Cash/Partial Cash']
            print(len(headings))
            ws.append(headings)
            top1=Side(border_style='thick', color='000000')
            bottom1=Side(border_style='thick', color='000000')
            left1=Side(border_style='thick', color='000000')
            right1=Side(border_style='thick', color='000000')
            border1=Border(top=top1, bottom=bottom1, left=left1, right=right1)
            fill_pattern=PatternFill(patternType='solid', fgColor='B0C4DE')
            contenido=PatternFill(patternType='solid', fgColor='8FBC8F')
            total_figure=PatternFill(patternType='solid', fgColor='FFFF00')
            alignment=Alignment(horizontal='center', vertical='center', text_rotation=0, wrap_text=False, shrink_to_fit=False, indent=0)
            ws['A1'].font=Font(bold=True)
            ws['B1'].font=Font(bold=True)
            ws['C1'].font=Font(bold=True)
            ws['D1'].font=Font(bold=True)
            ws['E1'].font=Font(bold=True)
            ws['F1'].font=Font(bold=True)
            ws['G1'].font=Font(bold=True)
            ws['H1'].font=Font(bold=True)
            ws['I1'].font=Font(bold=True)
            ws['J1'].font=Font(bold=True)
            ws['K1'].font=Font(bold=True)
            ws['L1'].font=Font(bold=True)
            ws['M1'].font=Font(bold=True)
            ws['N1'].font=Font(bold=True)
            ws['O1'].font=Font(bold=True)
            ws['P1'].font=Font(bold=True)
            ws['Q1'].font=Font(bold=True)
            ws['R1'].font=Font(bold=True)
            ws['S1'].font=Font(bold=True)
            ws['T1'].font=Font(bold=True)
            ws['U1'].font=Font(bold=True)
            ws['V1'].font=Font(bold=True)
            ws['W1'].font=Font(bold=True)
            ws['X1'].font=Font(bold=True)
            ws['Y1'].font=Font(bold=True)
            #Now bordering
            ws['A1'].border=border1
            ws['B1'].border=border1
            ws['C1'].border=border1
            ws['D1'].border=border1
            ws['E1'].border=border1
            ws['F1'].border=border1
            ws['G1'].border=border1
            ws['H1'].border=border1
            ws['I1'].border=border1
            ws['J1'].border=border1
            ws['K1'].border=border1
            ws['L1'].border=border1
            ws['M1'].border=border1
            ws['N1'].border=border1
            ws['O1'].border=border1
            ws['P1'].border=border1
            ws['Q1'].border=border1
            ws['R1'].border=border1
            ws['S1'].border=border1
            ws['T1'].border=border1
            ws['U1'].border=border1
            ws['V1'].border=border1
            ws['W1'].border=border1
            ws['X1'].border=border1
            ws['Y1'].border=border1
            #Coloring
            ws['A1'].fill=fill_pattern
            ws['B1'].fill=fill_pattern
            ws['C1'].fill=fill_pattern
            ws['D1'].fill=fill_pattern
            ws['E1'].fill=fill_pattern
            ws['F1'].fill=fill_pattern
            ws['G1'].fill=fill_pattern
            ws['H1'].fill=fill_pattern
            ws['I1'].fill=fill_pattern
            ws['J1'].fill=fill_pattern
            ws['K1'].fill=fill_pattern
            ws['L1'].fill=fill_pattern
            ws['M1'].fill=fill_pattern
            ws['N1'].fill=fill_pattern
            ws['O1'].fill=fill_pattern
            ws['P1'].fill=fill_pattern
            ws['Q1'].fill=fill_pattern
            ws['R1'].fill=fill_pattern
            ws['S1'].fill=fill_pattern
            ws['T1'].fill=fill_pattern
            ws['U1'].fill=fill_pattern
            ws['V1'].fill=fill_pattern
            ws['W1'].fill=fill_pattern
            ws['X1'].fill=fill_pattern
            ws['Y1'].fill=fill_pattern
            #alignment
            ws['A1'].alignment=alignment
            ws['B1'].alignment=alignment
            ws['C1'].alignment=alignment
            ws['D1'].alignment=alignment
            ws['E1'].alignment=alignment
            ws['F1'].alignment=alignment
            ws['G1'].alignment=alignment
            ws['H1'].alignment=alignment
            ws['I1'].alignment=alignment
            ws['J1'].alignment=alignment
            ws['K1'].alignment=alignment
            ws['L1'].alignment=alignment
            ws['M1'].alignment=alignment
            ws['N1'].alignment=alignment
            ws['O1'].alignment=alignment
            ws['P1'].alignment=alignment
            ws['Q1'].alignment=alignment
            ws['R1'].alignment=alignment
            ws['S1'].alignment=alignment
            ws['T1'].alignment=alignment
            ws['U1'].alignment=alignment
            ws['V1'].alignment=alignment
            ws['W1'].alignment=alignment
            ws['X1'].alignment=alignment
            ws['Y1'].alignment=alignment
            top2=Side(border_style='thin', color='000000')
            bottom2=Side(border_style='thin', color='000000')
            left2=Side(border_style='thin', color='000000')
            right2=Side(border_style='thin', color='000000')
            border2=Border(top=top2, bottom=bottom2, left=left2, right=right2)
            ttl=ReclaimedRepudiation.objects.filter(pk__in=map(lambda o: o.object.pk, serializers.deserialize("json", rp))).order_by('id')
            for row in range(len(rep)):
                for col in range(len(headings)):
                    char=get_column_letter(col+1)
                    ws[char+str(row+2)].value=rep[row][col]
                    if char=='B':
                        if ttl[row].ipdreport.patient.title=='0':
                            ws[char+str(row+2)].value='Mr.'+' '+rep[row][col]
                        if ttl[row].ipdreport.patient.title=='1':
                            ws[char+str(row+2)].value='Mrs.'+' '+rep[row][col]
                        if ttl[row].ipdreport.patient.title=='2':
                            ws[char+str(row+2)].value='Ms.'+' '+rep[row][col]
                        if ttl[row].ipdreport.patient.title=='3':
                            ws[char+str(row+2)].value='Mast.'+' '+rep[row][col]
                    if char=='H':
                        ws[char+str(row+2)].value=rep[row][col].strftime("%d/%m/%Y")
                    if char=='S':
                        ws[char+str(row+2)].value=rep[row][col].strftime("%d/%m/%Y")
                    if char=='U':
                        ws[char+str(row+2)].value=rep[row][col].strftime("%d/%m/%Y")
                    if char=='Y':
                        if ws[char+str(row+2)].value==True:
                            ws[char+str(row+2)].value='Yes'
                        elif ws[char+str(row+2)].value==False:
                            ws[char+str(row+2)].value='No'
                    ws[char+str(row+2)].border=border2
                    ws[char+str(row+2)].fill=contenido
                    ws[char+str(row+2)].alignment=alignment
                    ws['A'+str(row+2)]="{}{:d}".format('OOPL/D/', rep[row][0])
                    ws['C'+str(row+2)]="{}{:d}".format('PN/D/', rep[row][2])
            wb.save(response)
            return response
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_discharge_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            di1=Discharge.objects.get(pk=id)
            fm1=di1.discharge_updated
            print('Change se pehle', fm1)
            if request.method=='POST':
                print('check 1', request.POST)
                di=Discharge.objects.get(pk=id)
                print('di ka value: ', di)
                ptt1=request.POST.get('patient_type')
                pt1=request.POST.get('patient')
                dod=request.POST.get('date_of_discharge')
                print('patient type 1: ', ptt1)
                if Discharge.objects.filter(patient=pt1, date_of_discharge__lt=datetime.datetime.strptime(dod, '%Y-%m-%d')):
                    dis_latest=Discharge.objects.filter(patient=pt1).order_by('-id').first()
                    pkg1=Package.objects.filter(patient=pt1, date_of_admission__gt=dis_latest.date_of_discharge)
                else:
                    pkg1=Package.objects.filter(patient=pt1)
                form=DischargeForm(request.POST, instance=di, request=request)
                print('check 2', form)
                if form.is_valid():
                    discharge=form.save(commit=False)
                    if pkg1.count()>1:
                        print('hello')
                        for i in pkg1:
                            print('i.patient type ', i.patient_type.id)
                            ptt2=i.patient_type.id
                            if ptt2==int(ptt1):
                                print('Hello world')
                                discharge=form.save()
                                messages.success(request, 'Data saved successfully!')
                                print('Hiii')
                                fm2=di.discharge_updated
                                print(fm1)
                                print(fm2)
                                print(Package.objects.filter(patient=discharge.patient.id).order_by('-id').first())
                                print(ApprovedPackage.objects.filter(patient=discharge.patient.id).order_by('-id').first())
                                print(discharge.patient.name)
                                ipd=IpdReport.objects.get(patient=discharge.patient.id, package=Package.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), discharge=discharge)
                                print('IPD Value: ', ipd)
                                package=Package.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first()
                                if fm1 == False and fm2 == True and package.patient_type.patient_type!='CASH':
                                    print('YESSS')
                                    cl1=ClaimedPendingCases.objects.create(ipdreport=ipd)
                                    print('CL',cl1)
                                    cl3=UnclaimedPendingCases.objects.get(ipdreport=ipd)
                                    if cl3:
                                        cl3.delete()
                                elif fm1 == True and fm2 == False and package.patient_type.patient_type!='CASH':
                                    print('YES')
                                    cl2=UnclaimedPendingCases.objects.create(ipdreport=ipd)
                                    print('CL',cl2)
                                    try:
                                        ClaimedPendingCases.objects.get(ipdreport=ipd).delete()
                                    except ClaimedPendingCases.DoesNotExist:
                                        pass
                    else:
                        discharge=form.save()
                        messages.success(request, 'Data saved successfully!')
                        fm2=di.discharge_updated
                        print(fm1)
                        print(fm2)
                        print(Package.objects.filter(patient=discharge.patient.id).order_by('-id').first())
                        print(ApprovedPackage.objects.filter(patient=discharge.patient.id).order_by('-id').first())
                        print(discharge.patient.name)
                        ipd=IpdReport.objects.get(patient=discharge.patient.id, package=Package.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), ctscan=CTScan.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), radiations=Radiations.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first(), discharge=discharge)
                        print('IPD Value: ', ipd)
                        package=Package.objects.filter(patient=discharge.patient.id, patient_type=int(ptt1)).order_by('-id').first()
                        if fm1 == False and fm2 == True and package.patient_type.patient_type!='CASH':
                            print('YESSS')
                            cl1=ClaimedPendingCases.objects.create(ipdreport=ipd)
                            print('CL',cl1)
                            cl3=UnclaimedPendingCases.objects.get(ipdreport=ipd)
                            print('CL3', cl3)
                            if cl3:
                                cl3.delete()
                        elif fm1 == True and fm2 == False and package.patient_type.patient_type!='CASH':
                            print('YES')
                            cl2=UnclaimedPendingCases.objects.create(ipdreport=ipd)
                            print('CL',cl2)
                            try:
                                ClaimedPendingCases.objects.get(ipdreport=ipd).delete()
                            except ClaimedPendingCases.DoesNotExist:
                                pass
                di=Discharge.objects.get(pk=id)
                form=DischargeForm(instance=di, request=request)
                cur_user=request.user
                nav_msg='Update Discharge Reports'
                return render(request, 'dhule/update_discharge.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                di=Discharge.objects.get(pk=id)
                form=DischargeForm(instance=di, request=request)
                cur_user=request.user
                nav_msg='Update Discharge Reports'
            return render(request, 'dhule/update_discharge.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def move_to_reclaimed_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                rep=RepudiatedClaims.objects.get(pk=id)
                print('move_to_reclaimed_view mein rep ka value : ', rep)
                ap4=ApprovedPackage.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first()
                print('ap4 ka value: ', ap4)
                try:
                    ipd=IpdReport.objects.get(patient=rep.ipdreport.patient.id, package=Package.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first(), discharge=Discharge.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first(), realization=Realization.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first())
                    print('move_to_reclaimed_view mein ipd ka value : ', ipd)
                except IpdReport.DoesNotExist:
                    ipd=IpdReport.objects.get(patient=rep.ipdreport.patient.id, package=Package.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first(), approvedpackage=ApprovedPackage.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id')[1], discharge=Discharge.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first(), realization=Realization.objects.filter(patient=rep.ipdreport.patient.id, patient_type=rep.ipdreport.package.patient_type).order_by('-id').first())
                    print('move_to_reclaimed_view mein approved_package ke second last instance ke saath ipd ka value : ', ipd)
                ReclaimedRepudiation.objects.create(ipdreport=ipd)
                rep.delete()
            return HttpResponseRedirect('/dhule/repudiated/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def claim_received_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ap=ReclaimedRepudiation.objects.get(pk=id)
                print('claim received view mein ap ka value :', ap)
                ap.delete()
            return HttpResponseRedirect('/dhule/realization/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_patient_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                pt=Patient.objects.get(pk=id)
                print(pt)
                form=PatientForm(request.POST, instance=pt)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                pt=Patient.objects.get(pk=id)
                form=PatientForm(instance=pt)
                cur_user=request.user
                nav_msg='Reclaimed Cases'
                return render(request, 'dhule/update_patient.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                pt=Patient.objects.get(pk=id)
                form=PatientForm(instance=pt)
                cur_user=request.user
                nav_msg='Reclaimed Cases'
            return render(request, 'dhule/update_patient.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_lock_data_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                lock=LockData.objects.get(pk=id)
                print(lock)
                form=LockDataForm(request.POST, instance=lock)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Locked Data'
                return render(request, 'dhule/update_lock_data.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                lock=LockData.objects.get(pk=id)
                form=LockDataForm(instance=lock)
                cur_user=request.user
                nav_msg='Update Locked Data'
            return render(request, 'dhule/update_lock_data.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_common_expenses_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                common_expenses=CommonExpenses.objects.get(pk=id)
                print(common_expenses)
                form=CommonExpensesForm(request.POST, instance=common_expenses)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Common Expenses'
                return render(request, 'dhule/update_common_expenses.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                common_expenses=CommonExpenses.objects.get(pk=id)
                form=CommonExpensesForm(instance=common_expenses)
                cur_user=request.user
                nav_msg='Update Common Expenses'
            return render(request, 'dhule/update_common_expenses.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_other_income_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                other_income=OtherIncome.objects.get(pk=id)
                print(other_income)
                form=OtherIncomeForm(request.POST, instance=other_income)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Other Income'
                return render(request, 'dhule/update_other_income.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                other_income=OtherIncome.objects.get(pk=id)
                form=OtherIncomeForm(instance=other_income)
                cur_user=request.user
                nav_msg='Update Other Income'
            return render(request, 'dhule/update_other_income.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_additional_income_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                additional_income=AdditionalIncome.objects.get(pk=id)
                print(additional_income)
                form=AdditionalIncomeForm(request.POST, instance=additional_income)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Additional Income'
                return render(request, 'dhule/update_additional_income.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                additional_income=AdditionalIncome.objects.get(pk=id)
                form=AdditionalIncomeForm(instance=additional_income)
                cur_user=request.user
                nav_msg='Update Additional Income'
            return render(request, 'dhule/update_additional_income.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_other_expenses_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                other_expenses=OtherExpenses.objects.get(pk=id)
                print(other_expenses)
                form=OtherExpensesForm(request.POST, instance=other_expenses)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Other Expense'
                return render(request, 'dhule/update_other_expenses.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                other_expenses=OtherExpenses.objects.get(pk=id)
                form=OtherExpensesForm(instance=other_expenses)
                cur_user=request.user
                nav_msg='Update Other Expense'
            return render(request, 'dhule/update_other_expenses.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_ct_report_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                ct=CTScan.objects.get(pk=id)
                print(ct)
                form=CTScanForm(request.POST, instance=ct, request=request)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update CT Scan Reports'
                return render(request, 'dhule/update_ct_report.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                ct=CTScan.objects.get(pk=id)
                form=CTScanForm(instance=ct, request=request)
                cur_user=request.user
                nav_msg='Update CT Scan Reports'
            return render(request, 'dhule/update_ct_report.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_radiations_report_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                radiations=Radiations.objects.get(pk=id)
                print(radiations)
                form=RadiationsForm(request.POST, instance=radiations, request=request)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Radiations Reports'
                return render(request, 'dhule/update_radiations_report.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                radiations=Radiations.objects.get(pk=id)
                form=RadiationsForm(instance=radiations, request=request)
                cur_user=request.user
                nav_msg='Update Radiations Reports'
            return render(request, 'dhule/update_radiations_report.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_paxmax_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                pax=PaxMax.objects.get(pk=id)
                print(pax)
                form=PaxMaxForm(request.POST, instance=pax)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Rate-Chart Element'
                return render(request, 'dhule/update_paxmax.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                pax=PaxMax.objects.get(pk=id)
                form=PaxMaxForm(instance=pax)
                cur_user=request.user
                nav_msg='Update Rate-Chart Element'
            return render(request, 'dhule/update_paxmax.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_package_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                print('request.POST ka type', type(request.POST))
                pkg=Package.objects.get(pk=id)
                print(pkg)
                form=PackageForm(request.POST, instance=pkg)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Package'
                return render(request, 'dhule/update_package.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                pkg=Package.objects.get(pk=id)
                form=PackageForm(instance=pkg)
                cur_user=request.user
                nav_msg='Update Package'
            return render(request, 'dhule/update_package.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_approved_package_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print('update approved_package ka request post', request.POST)
                ap=ApprovedPackage.objects.get(pk=id)
                print(ap)
                form=ApprovedPackageForm(request.POST, instance=ap, request=request)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg="Update Approved Packages"
                return render(request, 'dhule/update_approved_package.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                ap=ApprovedPackage.objects.get(pk=id)
                form=ApprovedPackageForm(instance=ap, request=request)
                cur_user=request.user
                nav_msg="Update Approved Packages"
            return render(request, 'dhule/update_approved_package.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_realization_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print('update realization mein request.method: ', request.POST)
                real=Realization.objects.get(pk=id)
                print(real.amount_received)
                form=RealizationForm(request.POST, instance=real, request=request)
                print(form['amount_received'])
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update Receipts'
                return render(request, 'dhule/update_realization.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                real=Realization.objects.get(pk=id)
                form=RealizationForm(instance=real, request=request)
                cur_user=request.user
                nav_msg='Update Receipts'
            return render(request, 'dhule/update_realization.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def update_opd_slim_report_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                print(request.POST)
                opd=Opd.objects.get(pk=id)
                print(opd)
                form=OpdForm(request.POST, instance=opd)
                print(form)
                if form.is_valid():
                    form.save()
                    messages.success(request, 'Data saved successfully!')
                cur_user=request.user
                nav_msg='Update OPD Entry'
                return render(request, 'dhule/update_opd_slim_report.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
            else:
                opd=Opd.objects.get(pk=id)
                form=OpdForm(instance=opd)
                cur_user=request.user
                nav_msg='Update OPD Entry'
            return render(request, 'dhule/update_opd_slim_report.html', {'form':form, 'cur_user':cur_user, 'nav_msg':nav_msg})
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def reclaim_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ap=ReclaimedRepudiation.objects.get(pk=id)
                ap.delete()
            return HttpResponseRedirect('/dhule/reclaimed_sheet/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def discharge_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                disi=Discharge.objects.get(pk=id)
                pt=disi.patient.id
                print('pt ka value discharge delete mein: ', pt)
                ptt=disi.patient_type.id
                print('ptt ka value discharge delete mein: ', ptt)
                dod=disi.date_of_discharge
                print('date_of_discharge: ', dod)
                lock=LockData.objects.filter(patient=pt, patient_type=ptt, date__gte=dod).order_by('id').first()
                if lock.lock==True:
                    return HttpResponse('The data is locked!')
                else:
                    disi.delete()
            return HttpResponseRedirect('/dhule/discharge_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def realization_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                real=Realization.objects.get(pk=id)
                pt=real.patient.id
                print('pt ka value realization delete mein: ', pt)
                ptt=real.patient_type.id
                print('ptt ka value realization delete mein: ', ptt)
                bm=real.billing_month
                print('Billing month: ', bm)
                lock=LockData.objects.filter(patient=pt, patient_type=ptt, date__gte=bm).order_by('id').first()
                if lock.lock==True:
                    return HttpResponse('The data is locked!')
                else:
                    real.delete()
            return HttpResponseRedirect('/dhule/realization_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def approved_package_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ap=ApprovedPackage.objects.get(pk=id)
                pt=ap.patient.id
                print('pt ka value ap delete mein: ', pt)
                ptt=ap.patient_type.id
                print('ptt ka value ap delete mein: ', ptt)
                ad=ap.approval_date
                print('approval_date: ', ad)
                lock=LockData.objects.filter(patient=pt, patient_type=ptt, date__gte=ad).order_by('id').first()
                if lock.lock==True:
                    return HttpResponse('The data is locked!')
                else:
                    ap.delete()
            return HttpResponseRedirect('/dhule/approved_package_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def ct_report_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                ct=CTScan.objects.get(pk=id)
                pt=ct.patient.id
                print('pt ka value ct delete mein: ', pt)
                ptt=ct.patient_type.id
                print('ptt ka value ct delete mein: ', ptt)
                cdt=ct.date
                print('date in ct delete: ', cdt)
                lock=LockData.objects.filter(patient=pt, patient_type=ptt, date__gte=cdt).order_by('id').first()
                if lock.lock==True:
                    return HttpResponse('The data is locked!')
                else:
                    ct.delete()
            return HttpResponseRedirect('/dhule/ct_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def radiations_report_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                radiations=Radiations.objects.get(pk=id)
                pt=radiations.patient.id
                print('pt ka value radiations delete mein: ', pt)
                ptt=radiations.patient_type.id
                print('ptt ka value radiations delete mein: ', ptt)
                rdt=radiations.date
                print('date in radiation delete: ', rdt)
                lock=LockData.objects.filter(patient=pt, patient_type=ptt, date__gte=rdt).order_by('id').first()
                if lock.lock==True:
                    return HttpResponse('The data is locked!')
                else:
                    radiations.delete()
            return HttpResponseRedirect('/dhule/radiations_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def patient_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                pt=Patient.objects.get(pk=id)
                pt.delete()
            return HttpResponseRedirect('/dhule/patient_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def paxmax_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                pax=PaxMax.objects.get(pk=id)
                pax.delete()
            return HttpResponseRedirect('/dhule/paxmax_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def package_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                pkg=Package.objects.get(pk=id)
                pt=pkg.patient.id
                print('pt ka value pkg delete mein: ', pt)
                ptt=pkg.patient_type.id
                print('ptt ka value pkg delete mein: ', ptt)
                doa=pkg.date_of_admission
                print('date_of_admission: ', doa)
                lock=LockData.objects.filter(patient=pt, patient_type=ptt, date__gte=doa).order_by('id').first()
                if lock.lock==True:
                    return HttpResponse('The data is locked!')
                else:
                    pkg.delete()
            return HttpResponseRedirect('/dhule/package_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def common_expenses_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                common_expenses=CommonExpenses.objects.get(pk=id)
                common_expenses.delete()
            return HttpResponseRedirect('/dhule/common_expenses_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def other_income_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                other_income=OtherIncome.objects.get(pk=id)
                other_income.delete()
            return HttpResponseRedirect('/dhule/other_income_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def additional_income_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                additional_income=AdditionalIncome.objects.get(pk=id)
                additional_income.delete()
            return HttpResponseRedirect('/dhule/additional_income_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def other_expenses_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                other_expenses=OtherExpenses.objects.get(pk=id)
                other_expenses.delete()
            return HttpResponseRedirect('/dhule/other_expenses_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def lock_data_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                lock=LockData.objects.get(pk=id)
                lock.delete()
            return HttpResponseRedirect('/dhule/lock_data_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')

def opd_slim_delete_view(request, id):
    if request.user.is_authenticated:
        if request.user.location!='Solapur' or request.user.is_superuser==True:
            if request.method=='POST':
                opd=Opd.objects.get(pk=id)
                opd.delete()
            return HttpResponseRedirect('/dhule/opd_slim_report/')
        else:
            messages.warning(request, 'Only Dhule Employees & Admins Can Access This Link!!')
            return HttpResponseRedirect('/solapur/dashboard/')
    else:
        messages.warning(request, 'Please log in first!')
        return HttpResponseRedirect('/')